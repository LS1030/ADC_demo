
ADC_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007854  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  08007a40  08007a40  00017a40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d20  08007d20  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007d20  08007d20  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007d20  08007d20  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d20  08007d20  00017d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d24  08007d24  00017d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007d28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  200001dc  08007f04  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  08007f04  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca0e  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002389  00000000  00000000  0002cc13  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d80  00000000  00000000  0002efa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c28  00000000  00000000  0002fd20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016e0f  00000000  00000000  00030948  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bb75  00000000  00000000  00047757  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00083940  00000000  00000000  000532cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d6c0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043f0  00000000  00000000  000d6c88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001dc 	.word	0x200001dc
 8000204:	00000000 	.word	0x00000000
 8000208:	08007a24 	.word	0x08007a24

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e0 	.word	0x200001e0
 8000224:	08007a24 	.word	0x08007a24

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000376:	f1a4 0401 	sub.w	r4, r4, #1
 800037a:	d1e9      	bne.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000cfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000d00:	d1ed      	bne.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eae:	2afd      	cmp	r2, #253	; 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	; 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	; 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	; 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__aeabi_f2uiz>:
 80010fc:	0042      	lsls	r2, r0, #1
 80010fe:	d20e      	bcs.n	800111e <__aeabi_f2uiz+0x22>
 8001100:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001104:	d30b      	bcc.n	800111e <__aeabi_f2uiz+0x22>
 8001106:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800110a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800110e:	d409      	bmi.n	8001124 <__aeabi_f2uiz+0x28>
 8001110:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001118:	fa23 f002 	lsr.w	r0, r3, r2
 800111c:	4770      	bx	lr
 800111e:	f04f 0000 	mov.w	r0, #0
 8001122:	4770      	bx	lr
 8001124:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001128:	d101      	bne.n	800112e <__aeabi_f2uiz+0x32>
 800112a:	0242      	lsls	r2, r0, #9
 800112c:	d102      	bne.n	8001134 <__aeabi_f2uiz+0x38>
 800112e:	f04f 30ff 	mov.w	r0, #4294967295
 8001132:	4770      	bx	lr
 8001134:	f04f 0000 	mov.w	r0, #0
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop

0800113c <ADC_KalmanFilter_Init>:
#include "KalmanFilter.h"

KalmanFilter_TypeDef ADC1_IN1_KalmanFilter;

void ADC_KalmanFilter_Init(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
    ADC1_IN1_KalmanFilter.LastP = 0.02;
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <ADC_KalmanFilter_Init+0x38>)
 8001142:	4a0d      	ldr	r2, [pc, #52]	; (8001178 <ADC_KalmanFilter_Init+0x3c>)
 8001144:	601a      	str	r2, [r3, #0]
    ADC1_IN1_KalmanFilter.Now_P = 0.0;
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <ADC_KalmanFilter_Init+0x38>)
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	605a      	str	r2, [r3, #4]
    ADC1_IN1_KalmanFilter.out = 0.0;
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <ADC_KalmanFilter_Init+0x38>)
 8001150:	f04f 0200 	mov.w	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
    ADC1_IN1_KalmanFilter.Kg = 0.0;
 8001156:	4b07      	ldr	r3, [pc, #28]	; (8001174 <ADC_KalmanFilter_Init+0x38>)
 8001158:	f04f 0200 	mov.w	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
    ADC1_IN1_KalmanFilter.Q = 0.05;
 800115e:	4b05      	ldr	r3, [pc, #20]	; (8001174 <ADC_KalmanFilter_Init+0x38>)
 8001160:	4a06      	ldr	r2, [pc, #24]	; (800117c <ADC_KalmanFilter_Init+0x40>)
 8001162:	611a      	str	r2, [r3, #16]
    ADC1_IN1_KalmanFilter.R = 1.0;
 8001164:	4b03      	ldr	r3, [pc, #12]	; (8001174 <ADC_KalmanFilter_Init+0x38>)
 8001166:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800116a:	615a      	str	r2, [r3, #20]
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr
 8001174:	2000021c 	.word	0x2000021c
 8001178:	3ca3d70a 	.word	0x3ca3d70a
 800117c:	3d4ccccd 	.word	0x3d4ccccd

08001180 <KalmanFilter>:

float KalmanFilter(KalmanFilter_TypeDef *KalmanFilter,float input)
{
 8001180:	b5b0      	push	{r4, r5, r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
    //预测协方差方程：k时刻系统估算协方差 = k-1时刻的系统协方差 + 过程噪声协方差
     KalmanFilter->Now_P = KalmanFilter->LastP + KalmanFilter->Q;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	691b      	ldr	r3, [r3, #16]
 8001192:	4619      	mov	r1, r3
 8001194:	4610      	mov	r0, r2
 8001196:	f7ff fd59 	bl	8000c4c <__addsf3>
 800119a:	4603      	mov	r3, r0
 800119c:	461a      	mov	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	605a      	str	r2, [r3, #4]
     //卡尔曼增益方程：卡尔曼增益 = k时刻系统估算协方差 / （k时刻系统估算协方差 + 观测噪声协方差）
     KalmanFilter->Kg = KalmanFilter->Now_P / (KalmanFilter->Now_P + KalmanFilter->R);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685c      	ldr	r4, [r3, #4]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685a      	ldr	r2, [r3, #4]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	4619      	mov	r1, r3
 80011b0:	4610      	mov	r0, r2
 80011b2:	f7ff fd4b 	bl	8000c4c <__addsf3>
 80011b6:	4603      	mov	r3, r0
 80011b8:	4619      	mov	r1, r3
 80011ba:	4620      	mov	r0, r4
 80011bc:	f7ff ff02 	bl	8000fc4 <__aeabi_fdiv>
 80011c0:	4603      	mov	r3, r0
 80011c2:	461a      	mov	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	60da      	str	r2, [r3, #12]
     //更新最优值方程：k时刻状态变量的最优值 = 状态变量的预测值 + 卡尔曼增益 * （测量值 - 状态变量的预测值）
     KalmanFilter->out = KalmanFilter->out + KalmanFilter->Kg * (input -KalmanFilter->out);//因为这一次的预测值就是上一次的输出值
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689c      	ldr	r4, [r3, #8]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	68dd      	ldr	r5, [r3, #12]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	4619      	mov	r1, r3
 80011d6:	6838      	ldr	r0, [r7, #0]
 80011d8:	f7ff fd36 	bl	8000c48 <__aeabi_fsub>
 80011dc:	4603      	mov	r3, r0
 80011de:	4619      	mov	r1, r3
 80011e0:	4628      	mov	r0, r5
 80011e2:	f7ff fe3b 	bl	8000e5c <__aeabi_fmul>
 80011e6:	4603      	mov	r3, r0
 80011e8:	4619      	mov	r1, r3
 80011ea:	4620      	mov	r0, r4
 80011ec:	f7ff fd2e 	bl	8000c4c <__addsf3>
 80011f0:	4603      	mov	r3, r0
 80011f2:	461a      	mov	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	609a      	str	r2, [r3, #8]
     //更新协方差方程: 本次的系统协方差付给 KalmanFilter->LastP 威下一次运算准备。
     KalmanFilter->LastP = (1-KalmanFilter->Kg) * KalmanFilter->Now_P;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	4619      	mov	r1, r3
 80011fe:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001202:	f7ff fd21 	bl	8000c48 <__aeabi_fsub>
 8001206:	4603      	mov	r3, r0
 8001208:	461a      	mov	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	4619      	mov	r1, r3
 8001210:	4610      	mov	r0, r2
 8001212:	f7ff fe23 	bl	8000e5c <__aeabi_fmul>
 8001216:	4603      	mov	r3, r0
 8001218:	461a      	mov	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	601a      	str	r2, [r3, #0]
     return KalmanFilter->out;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	689b      	ldr	r3, [r3, #8]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800122c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 800123c:	4b2e      	ldr	r3, [pc, #184]	; (80012f8 <MX_ADC1_Init+0xcc>)
 800123e:	4a2f      	ldr	r2, [pc, #188]	; (80012fc <MX_ADC1_Init+0xd0>)
 8001240:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001242:	4b2d      	ldr	r3, [pc, #180]	; (80012f8 <MX_ADC1_Init+0xcc>)
 8001244:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001248:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800124a:	4b2b      	ldr	r3, [pc, #172]	; (80012f8 <MX_ADC1_Init+0xcc>)
 800124c:	2201      	movs	r2, #1
 800124e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001250:	4b29      	ldr	r3, [pc, #164]	; (80012f8 <MX_ADC1_Init+0xcc>)
 8001252:	2200      	movs	r2, #0
 8001254:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001256:	4b28      	ldr	r3, [pc, #160]	; (80012f8 <MX_ADC1_Init+0xcc>)
 8001258:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800125c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800125e:	4b26      	ldr	r3, [pc, #152]	; (80012f8 <MX_ADC1_Init+0xcc>)
 8001260:	2200      	movs	r2, #0
 8001262:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8001264:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <MX_ADC1_Init+0xcc>)
 8001266:	2204      	movs	r2, #4
 8001268:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800126a:	4823      	ldr	r0, [pc, #140]	; (80012f8 <MX_ADC1_Init+0xcc>)
 800126c:	f000 fc8e 	bl	8001b8c <HAL_ADC_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001276:	f000 fa73 	bl	8001760 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800127e:	2301      	movs	r3, #1
 8001280:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001282:	2305      	movs	r3, #5
 8001284:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	4619      	mov	r1, r3
 800128a:	481b      	ldr	r0, [pc, #108]	; (80012f8 <MX_ADC1_Init+0xcc>)
 800128c:	f000 fe58 	bl	8001f40 <HAL_ADC_ConfigChannel>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001296:	f000 fa63 	bl	8001760 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800129a:	2301      	movs	r3, #1
 800129c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800129e:	2302      	movs	r3, #2
 80012a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	4619      	mov	r1, r3
 80012a6:	4814      	ldr	r0, [pc, #80]	; (80012f8 <MX_ADC1_Init+0xcc>)
 80012a8:	f000 fe4a 	bl	8001f40 <HAL_ADC_ConfigChannel>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80012b2:	f000 fa55 	bl	8001760 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80012b6:	2302      	movs	r3, #2
 80012b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80012ba:	2303      	movs	r3, #3
 80012bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	4619      	mov	r1, r3
 80012c2:	480d      	ldr	r0, [pc, #52]	; (80012f8 <MX_ADC1_Init+0xcc>)
 80012c4:	f000 fe3c 	bl	8001f40 <HAL_ADC_ConfigChannel>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80012ce:	f000 fa47 	bl	8001760 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80012d2:	2310      	movs	r3, #16
 80012d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80012d6:	2304      	movs	r3, #4
 80012d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	4619      	mov	r1, r3
 80012de:	4806      	ldr	r0, [pc, #24]	; (80012f8 <MX_ADC1_Init+0xcc>)
 80012e0:	f000 fe2e 	bl	8001f40 <HAL_ADC_ConfigChannel>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80012ea:	f000 fa39 	bl	8001760 <Error_Handler>
  }

}
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000234 	.word	0x20000234
 80012fc:	40012400 	.word	0x40012400

08001300 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a28      	ldr	r2, [pc, #160]	; (80013bc <HAL_ADC_MspInit+0xbc>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d149      	bne.n	80013b4 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001320:	4b27      	ldr	r3, [pc, #156]	; (80013c0 <HAL_ADC_MspInit+0xc0>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	4a26      	ldr	r2, [pc, #152]	; (80013c0 <HAL_ADC_MspInit+0xc0>)
 8001326:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800132a:	6193      	str	r3, [r2, #24]
 800132c:	4b24      	ldr	r3, [pc, #144]	; (80013c0 <HAL_ADC_MspInit+0xc0>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001338:	4b21      	ldr	r3, [pc, #132]	; (80013c0 <HAL_ADC_MspInit+0xc0>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	4a20      	ldr	r2, [pc, #128]	; (80013c0 <HAL_ADC_MspInit+0xc0>)
 800133e:	f043 0304 	orr.w	r3, r3, #4
 8001342:	6193      	str	r3, [r2, #24]
 8001344:	4b1e      	ldr	r3, [pc, #120]	; (80013c0 <HAL_ADC_MspInit+0xc0>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	f003 0304 	and.w	r3, r3, #4
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001350:	2307      	movs	r3, #7
 8001352:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001354:	2303      	movs	r3, #3
 8001356:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001358:	f107 0310 	add.w	r3, r7, #16
 800135c:	4619      	mov	r1, r3
 800135e:	4819      	ldr	r0, [pc, #100]	; (80013c4 <HAL_ADC_MspInit+0xc4>)
 8001360:	f001 fbf8 	bl	8002b54 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001364:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <HAL_ADC_MspInit+0xc8>)
 8001366:	4a19      	ldr	r2, [pc, #100]	; (80013cc <HAL_ADC_MspInit+0xcc>)
 8001368:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800136a:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <HAL_ADC_MspInit+0xc8>)
 800136c:	2200      	movs	r2, #0
 800136e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001370:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_ADC_MspInit+0xc8>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001376:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <HAL_ADC_MspInit+0xc8>)
 8001378:	2280      	movs	r2, #128	; 0x80
 800137a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800137c:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <HAL_ADC_MspInit+0xc8>)
 800137e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001382:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001384:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <HAL_ADC_MspInit+0xc8>)
 8001386:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800138a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800138c:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <HAL_ADC_MspInit+0xc8>)
 800138e:	2220      	movs	r2, #32
 8001390:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001392:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <HAL_ADC_MspInit+0xc8>)
 8001394:	2200      	movs	r2, #0
 8001396:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001398:	480b      	ldr	r0, [pc, #44]	; (80013c8 <HAL_ADC_MspInit+0xc8>)
 800139a:	f001 f89b 	bl	80024d4 <HAL_DMA_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80013a4:	f000 f9dc 	bl	8001760 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a07      	ldr	r2, [pc, #28]	; (80013c8 <HAL_ADC_MspInit+0xc8>)
 80013ac:	621a      	str	r2, [r3, #32]
 80013ae:	4a06      	ldr	r2, [pc, #24]	; (80013c8 <HAL_ADC_MspInit+0xc8>)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80013b4:	bf00      	nop
 80013b6:	3720      	adds	r7, #32
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40012400 	.word	0x40012400
 80013c0:	40021000 	.word	0x40021000
 80013c4:	40010800 	.word	0x40010800
 80013c8:	20000264 	.word	0x20000264
 80013cc:	40020008 	.word	0x40020008

080013d0 <HAL_ADC_ConvCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  if (hadc->Instance == ADC1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a06      	ldr	r2, [pc, #24]	; (80013f8 <HAL_ADC_ConvCpltCallback+0x28>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d105      	bne.n	80013ee <HAL_ADC_ConvCpltCallback+0x1e>
  {
    LED0_ON;
 80013e2:	2200      	movs	r2, #0
 80013e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013e8:	4804      	ldr	r0, [pc, #16]	; (80013fc <HAL_ADC_ConvCpltCallback+0x2c>)
 80013ea:	f001 fd1d 	bl	8002e28 <HAL_GPIO_WritePin>
  }
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40012400 	.word	0x40012400
 80013fc:	40010800 	.word	0x40010800

08001400 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <MX_DMA_Init+0x38>)
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	4a0b      	ldr	r2, [pc, #44]	; (8001438 <MX_DMA_Init+0x38>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6153      	str	r3, [r2, #20]
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <MX_DMA_Init+0x38>)
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	2101      	movs	r1, #1
 8001422:	200b      	movs	r0, #11
 8001424:	f001 f82b 	bl	800247e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001428:	200b      	movs	r0, #11
 800142a:	f001 f844 	bl	80024b6 <HAL_NVIC_EnableIRQ>

}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40021000 	.word	0x40021000

0800143c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b088      	sub	sp, #32
 8001440:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001442:	f107 0310 	add.w	r3, r7, #16
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001450:	4b42      	ldr	r3, [pc, #264]	; (800155c <MX_GPIO_Init+0x120>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	4a41      	ldr	r2, [pc, #260]	; (800155c <MX_GPIO_Init+0x120>)
 8001456:	f043 0310 	orr.w	r3, r3, #16
 800145a:	6193      	str	r3, [r2, #24]
 800145c:	4b3f      	ldr	r3, [pc, #252]	; (800155c <MX_GPIO_Init+0x120>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	f003 0310 	and.w	r3, r3, #16
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001468:	4b3c      	ldr	r3, [pc, #240]	; (800155c <MX_GPIO_Init+0x120>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	4a3b      	ldr	r2, [pc, #236]	; (800155c <MX_GPIO_Init+0x120>)
 800146e:	f043 0320 	orr.w	r3, r3, #32
 8001472:	6193      	str	r3, [r2, #24]
 8001474:	4b39      	ldr	r3, [pc, #228]	; (800155c <MX_GPIO_Init+0x120>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	f003 0320 	and.w	r3, r3, #32
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001480:	4b36      	ldr	r3, [pc, #216]	; (800155c <MX_GPIO_Init+0x120>)
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	4a35      	ldr	r2, [pc, #212]	; (800155c <MX_GPIO_Init+0x120>)
 8001486:	f043 0304 	orr.w	r3, r3, #4
 800148a:	6193      	str	r3, [r2, #24]
 800148c:	4b33      	ldr	r3, [pc, #204]	; (800155c <MX_GPIO_Init+0x120>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	f003 0304 	and.w	r3, r3, #4
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001498:	4b30      	ldr	r3, [pc, #192]	; (800155c <MX_GPIO_Init+0x120>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	4a2f      	ldr	r2, [pc, #188]	; (800155c <MX_GPIO_Init+0x120>)
 800149e:	f043 0308 	orr.w	r3, r3, #8
 80014a2:	6193      	str	r3, [r2, #24]
 80014a4:	4b2d      	ldr	r3, [pc, #180]	; (800155c <MX_GPIO_Init+0x120>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	f003 0308 	and.w	r3, r3, #8
 80014ac:	603b      	str	r3, [r7, #0]
 80014ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 80014b0:	2201      	movs	r2, #1
 80014b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014b6:	482a      	ldr	r0, [pc, #168]	; (8001560 <MX_GPIO_Init+0x124>)
 80014b8:	f001 fcb6 	bl	8002e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80014bc:	2201      	movs	r2, #1
 80014be:	2104      	movs	r1, #4
 80014c0:	4828      	ldr	r0, [pc, #160]	; (8001564 <MX_GPIO_Init+0x128>)
 80014c2:	f001 fcb1 	bl	8002e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 80014c6:	2320      	movs	r3, #32
 80014c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014ca:	4b27      	ldr	r3, [pc, #156]	; (8001568 <MX_GPIO_Init+0x12c>)
 80014cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ce:	2301      	movs	r3, #1
 80014d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 80014d2:	f107 0310 	add.w	r3, r7, #16
 80014d6:	4619      	mov	r1, r3
 80014d8:	4824      	ldr	r0, [pc, #144]	; (800156c <MX_GPIO_Init+0x130>)
 80014da:	f001 fb3b 	bl	8002b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80014de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e4:	2301      	movs	r3, #1
 80014e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014e8:	2302      	movs	r3, #2
 80014ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2302      	movs	r3, #2
 80014ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80014f0:	f107 0310 	add.w	r3, r7, #16
 80014f4:	4619      	mov	r1, r3
 80014f6:	481a      	ldr	r0, [pc, #104]	; (8001560 <MX_GPIO_Init+0x124>)
 80014f8:	f001 fb2c 	bl	8002b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 80014fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001500:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001502:	4b19      	ldr	r3, [pc, #100]	; (8001568 <MX_GPIO_Init+0x12c>)
 8001504:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001506:	2301      	movs	r3, #1
 8001508:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 800150a:	f107 0310 	add.w	r3, r7, #16
 800150e:	4619      	mov	r1, r3
 8001510:	4813      	ldr	r0, [pc, #76]	; (8001560 <MX_GPIO_Init+0x124>)
 8001512:	f001 fb1f 	bl	8002b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001516:	2304      	movs	r3, #4
 8001518:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151a:	2301      	movs	r3, #1
 800151c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800151e:	2302      	movs	r3, #2
 8001520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	2302      	movs	r3, #2
 8001524:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001526:	f107 0310 	add.w	r3, r7, #16
 800152a:	4619      	mov	r1, r3
 800152c:	480d      	ldr	r0, [pc, #52]	; (8001564 <MX_GPIO_Init+0x128>)
 800152e:	f001 fb11 	bl	8002b54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	2100      	movs	r1, #0
 8001536:	2017      	movs	r0, #23
 8001538:	f000 ffa1 	bl	800247e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800153c:	2017      	movs	r0, #23
 800153e:	f000 ffba 	bl	80024b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	2100      	movs	r1, #0
 8001546:	2028      	movs	r0, #40	; 0x28
 8001548:	f000 ff99 	bl	800247e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800154c:	2028      	movs	r0, #40	; 0x28
 800154e:	f000 ffb2 	bl	80024b6 <HAL_NVIC_EnableIRQ>

}
 8001552:	bf00      	nop
 8001554:	3720      	adds	r7, #32
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40021000 	.word	0x40021000
 8001560:	40010800 	.word	0x40010800
 8001564:	40011400 	.word	0x40011400
 8001568:	10110000 	.word	0x10110000
 800156c:	40011000 	.word	0x40011000

08001570 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == KEY0_Pin)
 800157a:	88fb      	ldrh	r3, [r7, #6]
 800157c:	2b20      	cmp	r3, #32
 800157e:	d113      	bne.n	80015a8 <HAL_GPIO_EXTI_Callback+0x38>
    {
      ADC1_IN1_KalmanFilter.R = ADC1_IN1_KalmanFilter.R + 0.1;
 8001580:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <HAL_GPIO_EXTI_Callback+0x78>)
 8001582:	695b      	ldr	r3, [r3, #20]
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe ffbb 	bl	8000500 <__aeabi_f2d>
 800158a:	a315      	add	r3, pc, #84	; (adr r3, 80015e0 <HAL_GPIO_EXTI_Callback+0x70>)
 800158c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001590:	f7fe fe58 	bl	8000244 <__adddf3>
 8001594:	4603      	mov	r3, r0
 8001596:	460c      	mov	r4, r1
 8001598:	4618      	mov	r0, r3
 800159a:	4621      	mov	r1, r4
 800159c:	f7ff fb00 	bl	8000ba0 <__aeabi_d2f>
 80015a0:	4602      	mov	r2, r0
 80015a2:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <HAL_GPIO_EXTI_Callback+0x78>)
 80015a4:	615a      	str	r2, [r3, #20]
    else if (GPIO_Pin == KEY1_Pin)
    {
      ADC1_IN1_KalmanFilter.R = ADC1_IN1_KalmanFilter.R - 0.1;
    }

}
 80015a6:	e016      	b.n	80015d6 <HAL_GPIO_EXTI_Callback+0x66>
    else if (GPIO_Pin == KEY1_Pin)
 80015a8:	88fb      	ldrh	r3, [r7, #6]
 80015aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015ae:	d112      	bne.n	80015d6 <HAL_GPIO_EXTI_Callback+0x66>
      ADC1_IN1_KalmanFilter.R = ADC1_IN1_KalmanFilter.R - 0.1;
 80015b0:	4b0d      	ldr	r3, [pc, #52]	; (80015e8 <HAL_GPIO_EXTI_Callback+0x78>)
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7fe ffa3 	bl	8000500 <__aeabi_f2d>
 80015ba:	a309      	add	r3, pc, #36	; (adr r3, 80015e0 <HAL_GPIO_EXTI_Callback+0x70>)
 80015bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c0:	f7fe fe3e 	bl	8000240 <__aeabi_dsub>
 80015c4:	4603      	mov	r3, r0
 80015c6:	460c      	mov	r4, r1
 80015c8:	4618      	mov	r0, r3
 80015ca:	4621      	mov	r1, r4
 80015cc:	f7ff fae8 	bl	8000ba0 <__aeabi_d2f>
 80015d0:	4602      	mov	r2, r0
 80015d2:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <HAL_GPIO_EXTI_Callback+0x78>)
 80015d4:	615a      	str	r2, [r3, #20]
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd90      	pop	{r4, r7, pc}
 80015de:	bf00      	nop
 80015e0:	9999999a 	.word	0x9999999a
 80015e4:	3fb99999 	.word	0x3fb99999
 80015e8:	2000021c 	.word	0x2000021c

080015ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015f0:	f000 fa9a 	bl	8001b28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015f4:	f000 f842 	bl	800167c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015f8:	f7ff ff20 	bl	800143c <MX_GPIO_Init>
  MX_DMA_Init();
 80015fc:	f7ff ff00 	bl	8001400 <MX_DMA_Init>
  MX_ADC1_Init();
 8001600:	f7ff fe14 	bl	800122c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001604:	f000 f9f4 	bl	80019f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ADC_KalmanFilter_Init();
 8001608:	f7ff fd98 	bl	800113c <ADC_KalmanFilter_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_value, 4) != HAL_OK)
 800160c:	2204      	movs	r2, #4
 800160e:	4915      	ldr	r1, [pc, #84]	; (8001664 <main+0x78>)
 8001610:	4815      	ldr	r0, [pc, #84]	; (8001668 <main+0x7c>)
 8001612:	f000 fba5 	bl	8001d60 <HAL_ADC_Start_DMA>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <main+0x34>
  {
    Error_Handler();
 800161c:	f000 f8a0 	bl	8001760 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ADC_IN1_value = KalmanFilter(&ADC1_IN1_KalmanFilter, (float)ADC_value[0]);
 8001620:	4b10      	ldr	r3, [pc, #64]	; (8001664 <main+0x78>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fbc1 	bl	8000dac <__aeabi_ui2f>
 800162a:	4603      	mov	r3, r0
 800162c:	4619      	mov	r1, r3
 800162e:	480f      	ldr	r0, [pc, #60]	; (800166c <main+0x80>)
 8001630:	f7ff fda6 	bl	8001180 <KalmanFilter>
 8001634:	4602      	mov	r2, r0
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <main+0x84>)
 8001638:	601a      	str	r2, [r3, #0]
	  ADC_IN1_FaultCode = (uint8_t)(16 * (ADC_IN1_value/4095));
 800163a:	4b0d      	ldr	r3, [pc, #52]	; (8001670 <main+0x84>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	490d      	ldr	r1, [pc, #52]	; (8001674 <main+0x88>)
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fcbf 	bl	8000fc4 <__aeabi_fdiv>
 8001646:	4603      	mov	r3, r0
 8001648:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fc05 	bl	8000e5c <__aeabi_fmul>
 8001652:	4603      	mov	r3, r0
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fd51 	bl	80010fc <__aeabi_f2uiz>
 800165a:	4603      	mov	r3, r0
 800165c:	b2da      	uxtb	r2, r3
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <main+0x8c>)
 8001660:	701a      	strb	r2, [r3, #0]
	  ADC_IN1_value = KalmanFilter(&ADC1_IN1_KalmanFilter, (float)ADC_value[0]);
 8001662:	e7dd      	b.n	8001620 <main+0x34>
 8001664:	200001f8 	.word	0x200001f8
 8001668:	20000234 	.word	0x20000234
 800166c:	2000021c 	.word	0x2000021c
 8001670:	20000208 	.word	0x20000208
 8001674:	457ff000 	.word	0x457ff000
 8001678:	2000020c 	.word	0x2000020c

0800167c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b096      	sub	sp, #88	; 0x58
 8001680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001682:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001686:	2228      	movs	r2, #40	; 0x28
 8001688:	2100      	movs	r1, #0
 800168a:	4618      	mov	r0, r3
 800168c:	f002 fc86 	bl	8003f9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001690:	f107 031c 	add.w	r3, r7, #28
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	611a      	str	r2, [r3, #16]
 80016ae:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016b0:	2301      	movs	r3, #1
 80016b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80016ba:	2300      	movs	r3, #0
 80016bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016be:	2301      	movs	r3, #1
 80016c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c2:	2302      	movs	r3, #2
 80016c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016ca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016cc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80016d0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016d6:	4618      	mov	r0, r3
 80016d8:	f001 fbd6 	bl	8002e88 <HAL_RCC_OscConfig>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80016e2:	f000 f83d 	bl	8001760 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e6:	230f      	movs	r3, #15
 80016e8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ea:	2302      	movs	r3, #2
 80016ec:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ee:	2300      	movs	r3, #0
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016f8:	2300      	movs	r3, #0
 80016fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016fc:	f107 031c 	add.w	r3, r7, #28
 8001700:	2102      	movs	r1, #2
 8001702:	4618      	mov	r0, r3
 8001704:	f001 fe40 	bl	8003388 <HAL_RCC_ClockConfig>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800170e:	f000 f827 	bl	8001760 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001712:	2302      	movs	r3, #2
 8001714:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001716:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800171a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	4618      	mov	r0, r3
 8001720:	f002 f824 	bl	800376c <HAL_RCCEx_PeriphCLKConfig>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800172a:	f000 f819 	bl	8001760 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800172e:	f001 ff15 	bl	800355c <HAL_RCC_EnableCSS>
}
 8001732:	bf00      	nop
 8001734:	3758      	adds	r7, #88	; 0x58
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a04      	ldr	r2, [pc, #16]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d101      	bne.n	8001752 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800174e:	f000 fa01 	bl	8001b54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40001400 	.word	0x40001400

08001760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <HAL_MspInit+0x5c>)
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	4a14      	ldr	r2, [pc, #80]	; (80017c8 <HAL_MspInit+0x5c>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6193      	str	r3, [r2, #24]
 800177e:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <HAL_MspInit+0x5c>)
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800178a:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <HAL_MspInit+0x5c>)
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	4a0e      	ldr	r2, [pc, #56]	; (80017c8 <HAL_MspInit+0x5c>)
 8001790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001794:	61d3      	str	r3, [r2, #28]
 8001796:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <HAL_MspInit+0x5c>)
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017a2:	4b0a      	ldr	r3, [pc, #40]	; (80017cc <HAL_MspInit+0x60>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	4a04      	ldr	r2, [pc, #16]	; (80017cc <HAL_MspInit+0x60>)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017be:	bf00      	nop
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40010000 	.word	0x40010000

080017d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08c      	sub	sp, #48	; 0x30
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 80017e0:	2200      	movs	r2, #0
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	2037      	movs	r0, #55	; 0x37
 80017e6:	f000 fe4a 	bl	800247e <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80017ea:	2037      	movs	r0, #55	; 0x37
 80017ec:	f000 fe63 	bl	80024b6 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80017f0:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <HAL_InitTick+0xa0>)
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	4a1e      	ldr	r2, [pc, #120]	; (8001870 <HAL_InitTick+0xa0>)
 80017f6:	f043 0320 	orr.w	r3, r3, #32
 80017fa:	61d3      	str	r3, [r2, #28]
 80017fc:	4b1c      	ldr	r3, [pc, #112]	; (8001870 <HAL_InitTick+0xa0>)
 80017fe:	69db      	ldr	r3, [r3, #28]
 8001800:	f003 0320 	and.w	r3, r3, #32
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001808:	f107 0210 	add.w	r2, r7, #16
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	4611      	mov	r1, r2
 8001812:	4618      	mov	r0, r3
 8001814:	f001 ff42 	bl	800369c <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001818:	f001 ff18 	bl	800364c <HAL_RCC_GetPCLK1Freq>
 800181c:	4603      	mov	r3, r0
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001824:	4a13      	ldr	r2, [pc, #76]	; (8001874 <HAL_InitTick+0xa4>)
 8001826:	fba2 2303 	umull	r2, r3, r2, r3
 800182a:	0c9b      	lsrs	r3, r3, #18
 800182c:	3b01      	subs	r3, #1
 800182e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001830:	4b11      	ldr	r3, [pc, #68]	; (8001878 <HAL_InitTick+0xa8>)
 8001832:	4a12      	ldr	r2, [pc, #72]	; (800187c <HAL_InitTick+0xac>)
 8001834:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8001836:	4b10      	ldr	r3, [pc, #64]	; (8001878 <HAL_InitTick+0xa8>)
 8001838:	f240 32e7 	movw	r2, #999	; 0x3e7
 800183c:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800183e:	4a0e      	ldr	r2, [pc, #56]	; (8001878 <HAL_InitTick+0xa8>)
 8001840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001842:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <HAL_InitTick+0xa8>)
 8001846:	2200      	movs	r2, #0
 8001848:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184a:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <HAL_InitTick+0xa8>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001850:	4809      	ldr	r0, [pc, #36]	; (8001878 <HAL_InitTick+0xa8>)
 8001852:	f002 f841 	bl	80038d8 <HAL_TIM_Base_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d104      	bne.n	8001866 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 800185c:	4806      	ldr	r0, [pc, #24]	; (8001878 <HAL_InitTick+0xa8>)
 800185e:	f002 f86f 	bl	8003940 <HAL_TIM_Base_Start_IT>
 8001862:	4603      	mov	r3, r0
 8001864:	e000      	b.n	8001868 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
}
 8001868:	4618      	mov	r0, r3
 800186a:	3730      	adds	r7, #48	; 0x30
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40021000 	.word	0x40021000
 8001874:	431bde83 	.word	0x431bde83
 8001878:	200002a8 	.word	0x200002a8
 800187c:	40001400 	.word	0x40001400

08001880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001884:	f001 ff3a 	bl	80036fc <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}

0800188c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001890:	e7fe      	b.n	8001890 <HardFault_Handler+0x4>

08001892 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001896:	e7fe      	b.n	8001896 <MemManage_Handler+0x4>

08001898 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800189c:	e7fe      	b.n	800189c <BusFault_Handler+0x4>

0800189e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a2:	e7fe      	b.n	80018a2 <UsageFault_Handler+0x4>

080018a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr

080018b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr

080018bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018d8:	4802      	ldr	r0, [pc, #8]	; (80018e4 <DMA1_Channel1_IRQHandler+0x10>)
 80018da:	f000 fed1 	bl	8002680 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000264 	.word	0x20000264

080018e8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80018ec:	2020      	movs	r0, #32
 80018ee:	f001 fab3 	bl	8002e58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80018fa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80018fe:	f001 faab 	bl	8002e58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800190c:	4802      	ldr	r0, [pc, #8]	; (8001918 <TIM7_IRQHandler+0x10>)
 800190e:	f002 f83a 	bl	8003986 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200002a8 	.word	0x200002a8

0800191c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001924:	4a14      	ldr	r2, [pc, #80]	; (8001978 <_sbrk+0x5c>)
 8001926:	4b15      	ldr	r3, [pc, #84]	; (800197c <_sbrk+0x60>)
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001930:	4b13      	ldr	r3, [pc, #76]	; (8001980 <_sbrk+0x64>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d102      	bne.n	800193e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001938:	4b11      	ldr	r3, [pc, #68]	; (8001980 <_sbrk+0x64>)
 800193a:	4a12      	ldr	r2, [pc, #72]	; (8001984 <_sbrk+0x68>)
 800193c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <_sbrk+0x64>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	429a      	cmp	r2, r3
 800194a:	d207      	bcs.n	800195c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800194c:	f002 fafc 	bl	8003f48 <__errno>
 8001950:	4602      	mov	r2, r0
 8001952:	230c      	movs	r3, #12
 8001954:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001956:	f04f 33ff 	mov.w	r3, #4294967295
 800195a:	e009      	b.n	8001970 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800195c:	4b08      	ldr	r3, [pc, #32]	; (8001980 <_sbrk+0x64>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001962:	4b07      	ldr	r3, [pc, #28]	; (8001980 <_sbrk+0x64>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4413      	add	r3, r2
 800196a:	4a05      	ldr	r2, [pc, #20]	; (8001980 <_sbrk+0x64>)
 800196c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800196e:	68fb      	ldr	r3, [r7, #12]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	2000c000 	.word	0x2000c000
 800197c:	00000400 	.word	0x00000400
 8001980:	20000210 	.word	0x20000210
 8001984:	20000330 	.word	0x20000330

08001988 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800198c:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <SystemInit+0x5c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a14      	ldr	r2, [pc, #80]	; (80019e4 <SystemInit+0x5c>)
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001998:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <SystemInit+0x5c>)
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	4911      	ldr	r1, [pc, #68]	; (80019e4 <SystemInit+0x5c>)
 800199e:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <SystemInit+0x60>)
 80019a0:	4013      	ands	r3, r2
 80019a2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80019a4:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <SystemInit+0x5c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a0e      	ldr	r2, [pc, #56]	; (80019e4 <SystemInit+0x5c>)
 80019aa:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80019ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019b2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019b4:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <SystemInit+0x5c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <SystemInit+0x5c>)
 80019ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019be:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80019c0:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <SystemInit+0x5c>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	4a07      	ldr	r2, [pc, #28]	; (80019e4 <SystemInit+0x5c>)
 80019c6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80019ca:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <SystemInit+0x5c>)
 80019ce:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80019d2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <SystemInit+0x64>)
 80019d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019da:	609a      	str	r2, [r3, #8]
#endif 
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr
 80019e4:	40021000 	.word	0x40021000
 80019e8:	f8ff0000 	.word	0xf8ff0000
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80019f4:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <MX_USART1_UART_Init+0x4c>)
 80019f6:	4a12      	ldr	r2, [pc, #72]	; (8001a40 <MX_USART1_UART_Init+0x50>)
 80019f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019fa:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <MX_USART1_UART_Init+0x4c>)
 80019fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a02:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <MX_USART1_UART_Init+0x4c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a08:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <MX_USART1_UART_Init+0x4c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a0e:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <MX_USART1_UART_Init+0x4c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a14:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <MX_USART1_UART_Init+0x4c>)
 8001a16:	220c      	movs	r2, #12
 8001a18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a1a:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <MX_USART1_UART_Init+0x4c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <MX_USART1_UART_Init+0x4c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a26:	4805      	ldr	r0, [pc, #20]	; (8001a3c <MX_USART1_UART_Init+0x4c>)
 8001a28:	f002 f966 	bl	8003cf8 <HAL_UART_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a32:	f7ff fe95 	bl	8001760 <Error_Handler>
  }

}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	200002e8 	.word	0x200002e8
 8001a40:	40013800 	.word	0x40013800

08001a44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b088      	sub	sp, #32
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4c:	f107 0310 	add.w	r3, r7, #16
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a1c      	ldr	r2, [pc, #112]	; (8001ad0 <HAL_UART_MspInit+0x8c>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d131      	bne.n	8001ac8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a64:	4b1b      	ldr	r3, [pc, #108]	; (8001ad4 <HAL_UART_MspInit+0x90>)
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	4a1a      	ldr	r2, [pc, #104]	; (8001ad4 <HAL_UART_MspInit+0x90>)
 8001a6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a6e:	6193      	str	r3, [r2, #24]
 8001a70:	4b18      	ldr	r3, [pc, #96]	; (8001ad4 <HAL_UART_MspInit+0x90>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7c:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <HAL_UART_MspInit+0x90>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	4a14      	ldr	r2, [pc, #80]	; (8001ad4 <HAL_UART_MspInit+0x90>)
 8001a82:	f043 0304 	orr.w	r3, r3, #4
 8001a86:	6193      	str	r3, [r2, #24]
 8001a88:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <HAL_UART_MspInit+0x90>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa2:	f107 0310 	add.w	r3, r7, #16
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	480b      	ldr	r0, [pc, #44]	; (8001ad8 <HAL_UART_MspInit+0x94>)
 8001aaa:	f001 f853 	bl	8002b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001aae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ab2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abc:	f107 0310 	add.w	r3, r7, #16
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4805      	ldr	r0, [pc, #20]	; (8001ad8 <HAL_UART_MspInit+0x94>)
 8001ac4:	f001 f846 	bl	8002b54 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001ac8:	bf00      	nop
 8001aca:	3720      	adds	r7, #32
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40013800 	.word	0x40013800
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40010800 	.word	0x40010800

08001adc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001adc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001ade:	e003      	b.n	8001ae8 <LoopCopyDataInit>

08001ae0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001ae2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001ae4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001ae6:	3104      	adds	r1, #4

08001ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001ae8:	480a      	ldr	r0, [pc, #40]	; (8001b14 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001aea:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001aec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001aee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001af0:	d3f6      	bcc.n	8001ae0 <CopyDataInit>
  ldr r2, =_sbss
 8001af2:	4a0a      	ldr	r2, [pc, #40]	; (8001b1c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001af4:	e002      	b.n	8001afc <LoopFillZerobss>

08001af6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001af6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001af8:	f842 3b04 	str.w	r3, [r2], #4

08001afc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001afc:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001afe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001b00:	d3f9      	bcc.n	8001af6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b02:	f7ff ff41 	bl	8001988 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b06:	f002 fa25 	bl	8003f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b0a:	f7ff fd6f 	bl	80015ec <main>
  bx lr
 8001b0e:	4770      	bx	lr
  ldr r3, =_sidata
 8001b10:	08007d28 	.word	0x08007d28
  ldr r0, =_sdata
 8001b14:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001b18:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8001b1c:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8001b20:	20000330 	.word	0x20000330

08001b24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b24:	e7fe      	b.n	8001b24 <ADC1_2_IRQHandler>
	...

08001b28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b2c:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <HAL_Init+0x28>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a07      	ldr	r2, [pc, #28]	; (8001b50 <HAL_Init+0x28>)
 8001b32:	f043 0310 	orr.w	r3, r3, #16
 8001b36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b38:	2003      	movs	r0, #3
 8001b3a:	f000 fc95 	bl	8002468 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b3e:	2000      	movs	r0, #0
 8001b40:	f7ff fe46 	bl	80017d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b44:	f7ff fe12 	bl	800176c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40022000 	.word	0x40022000

08001b54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b58:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <HAL_IncTick+0x1c>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <HAL_IncTick+0x20>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4413      	add	r3, r2
 8001b64:	4a03      	ldr	r2, [pc, #12]	; (8001b74 <HAL_IncTick+0x20>)
 8001b66:	6013      	str	r3, [r2, #0]
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr
 8001b70:	20000008 	.word	0x20000008
 8001b74:	20000328 	.word	0x20000328

08001b78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b7c:	4b02      	ldr	r3, [pc, #8]	; (8001b88 <HAL_GetTick+0x10>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr
 8001b88:	20000328 	.word	0x20000328

08001b8c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b94:	2300      	movs	r3, #0
 8001b96:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e0ce      	b.n	8001d4c <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d109      	bne.n	8001bd0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff fb98 	bl	8001300 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 faff 	bl	80021d4 <ADC_ConversionStop_Disable>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bde:	f003 0310 	and.w	r3, r3, #16
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f040 80a9 	bne.w	8001d3a <HAL_ADC_Init+0x1ae>
 8001be8:	7dfb      	ldrb	r3, [r7, #23]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f040 80a5 	bne.w	8001d3a <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bf8:	f023 0302 	bic.w	r3, r3, #2
 8001bfc:	f043 0202 	orr.w	r2, r3, #2
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4951      	ldr	r1, [pc, #324]	; (8001d54 <HAL_ADC_Init+0x1c8>)
 8001c0e:	428b      	cmp	r3, r1
 8001c10:	d10a      	bne.n	8001c28 <HAL_ADC_Init+0x9c>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001c1a:	d002      	beq.n	8001c22 <HAL_ADC_Init+0x96>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	e004      	b.n	8001c2c <HAL_ADC_Init+0xa0>
 8001c22:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001c26:	e001      	b.n	8001c2c <HAL_ADC_Init+0xa0>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c2c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	7b1b      	ldrb	r3, [r3, #12]
 8001c32:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c34:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c44:	d003      	beq.n	8001c4e <HAL_ADC_Init+0xc2>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d102      	bne.n	8001c54 <HAL_ADC_Init+0xc8>
 8001c4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c52:	e000      	b.n	8001c56 <HAL_ADC_Init+0xca>
 8001c54:	2300      	movs	r3, #0
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	7d1b      	ldrb	r3, [r3, #20]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d119      	bne.n	8001c98 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	7b1b      	ldrb	r3, [r3, #12]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d109      	bne.n	8001c80 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	3b01      	subs	r3, #1
 8001c72:	035a      	lsls	r2, r3, #13
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c7c:	613b      	str	r3, [r7, #16]
 8001c7e:	e00b      	b.n	8001c98 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c84:	f043 0220 	orr.w	r2, r3, #32
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c90:	f043 0201 	orr.w	r2, r3, #1
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	4b29      	ldr	r3, [pc, #164]	; (8001d58 <HAL_ADC_Init+0x1cc>)
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	6812      	ldr	r2, [r2, #0]
 8001cba:	68b9      	ldr	r1, [r7, #8]
 8001cbc:	430b      	orrs	r3, r1
 8001cbe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cc8:	d003      	beq.n	8001cd2 <HAL_ADC_Init+0x146>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d104      	bne.n	8001cdc <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	051b      	lsls	r3, r3, #20
 8001cda:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	430a      	orrs	r2, r1
 8001cee:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	689a      	ldr	r2, [r3, #8]
 8001cf6:	4b19      	ldr	r3, [pc, #100]	; (8001d5c <HAL_ADC_Init+0x1d0>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d10b      	bne.n	8001d18 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0a:	f023 0303 	bic.w	r3, r3, #3
 8001d0e:	f043 0201 	orr.w	r2, r3, #1
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d16:	e018      	b.n	8001d4a <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1c:	f023 0312 	bic.w	r3, r3, #18
 8001d20:	f043 0210 	orr.w	r2, r3, #16
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2c:	f043 0201 	orr.w	r2, r3, #1
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d38:	e007      	b.n	8001d4a <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3e:	f043 0210 	orr.w	r2, r3, #16
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40013c00 	.word	0x40013c00
 8001d58:	ffe1f7fd 	.word	0xffe1f7fd
 8001d5c:	ff1f0efe 	.word	0xff1f0efe

08001d60 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a64      	ldr	r2, [pc, #400]	; (8001f08 <HAL_ADC_Start_DMA+0x1a8>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d004      	beq.n	8001d84 <HAL_ADC_Start_DMA+0x24>
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a63      	ldr	r2, [pc, #396]	; (8001f0c <HAL_ADC_Start_DMA+0x1ac>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d106      	bne.n	8001d92 <HAL_ADC_Start_DMA+0x32>
 8001d84:	4b60      	ldr	r3, [pc, #384]	; (8001f08 <HAL_ADC_Start_DMA+0x1a8>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f040 80b3 	bne.w	8001ef8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d101      	bne.n	8001da0 <HAL_ADC_Start_DMA+0x40>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e0ae      	b.n	8001efe <HAL_ADC_Start_DMA+0x19e>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f000 f9c1 	bl	8002130 <ADC_Enable>
 8001dae:	4603      	mov	r3, r0
 8001db0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001db2:	7dfb      	ldrb	r3, [r7, #23]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f040 809a 	bne.w	8001eee <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001dc2:	f023 0301 	bic.w	r3, r3, #1
 8001dc6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a4e      	ldr	r2, [pc, #312]	; (8001f0c <HAL_ADC_Start_DMA+0x1ac>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d105      	bne.n	8001de4 <HAL_ADC_Start_DMA+0x84>
 8001dd8:	4b4b      	ldr	r3, [pc, #300]	; (8001f08 <HAL_ADC_Start_DMA+0x1a8>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d115      	bne.n	8001e10 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d026      	beq.n	8001e4c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e02:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e06:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e0e:	e01d      	b.n	8001e4c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e14:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a39      	ldr	r2, [pc, #228]	; (8001f08 <HAL_ADC_Start_DMA+0x1a8>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d004      	beq.n	8001e30 <HAL_ADC_Start_DMA+0xd0>
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a38      	ldr	r2, [pc, #224]	; (8001f0c <HAL_ADC_Start_DMA+0x1ac>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d10d      	bne.n	8001e4c <HAL_ADC_Start_DMA+0xec>
 8001e30:	4b35      	ldr	r3, [pc, #212]	; (8001f08 <HAL_ADC_Start_DMA+0x1a8>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d007      	beq.n	8001e4c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e40:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e44:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d006      	beq.n	8001e66 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5c:	f023 0206 	bic.w	r2, r3, #6
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e64:	e002      	b.n	8001e6c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	4a25      	ldr	r2, [pc, #148]	; (8001f10 <HAL_ADC_Start_DMA+0x1b0>)
 8001e7a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	4a24      	ldr	r2, [pc, #144]	; (8001f14 <HAL_ADC_Start_DMA+0x1b4>)
 8001e82:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	4a23      	ldr	r2, [pc, #140]	; (8001f18 <HAL_ADC_Start_DMA+0x1b8>)
 8001e8a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f06f 0202 	mvn.w	r2, #2
 8001e94:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ea4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6a18      	ldr	r0, [r3, #32]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	334c      	adds	r3, #76	; 0x4c
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f000 fb83 	bl	80025c0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001ec4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001ec8:	d108      	bne.n	8001edc <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001ed8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001eda:	e00f      	b.n	8001efc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001eea:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001eec:	e006      	b.n	8001efc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001ef6:	e001      	b.n	8001efc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001efc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40012400 	.word	0x40012400
 8001f0c:	40012800 	.word	0x40012800
 8001f10:	08002249 	.word	0x08002249
 8001f14:	080022c5 	.word	0x080022c5
 8001f18:	080022e1 	.word	0x080022e1

08001f1c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr

08001f2e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr

08001f40 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d101      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x20>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	e0dc      	b.n	800211a <HAL_ADC_ConfigChannel+0x1da>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b06      	cmp	r3, #6
 8001f6e:	d81c      	bhi.n	8001faa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4413      	add	r3, r2
 8001f80:	3b05      	subs	r3, #5
 8001f82:	221f      	movs	r2, #31
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	4019      	ands	r1, r3
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	6818      	ldr	r0, [r3, #0]
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	4613      	mov	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	3b05      	subs	r3, #5
 8001f9c:	fa00 f203 	lsl.w	r2, r0, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	635a      	str	r2, [r3, #52]	; 0x34
 8001fa8:	e03c      	b.n	8002024 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b0c      	cmp	r3, #12
 8001fb0:	d81c      	bhi.n	8001fec <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	3b23      	subs	r3, #35	; 0x23
 8001fc4:	221f      	movs	r2, #31
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	4019      	ands	r1, r3
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	6818      	ldr	r0, [r3, #0]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	3b23      	subs	r3, #35	; 0x23
 8001fde:	fa00 f203 	lsl.w	r2, r0, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	631a      	str	r2, [r3, #48]	; 0x30
 8001fea:	e01b      	b.n	8002024 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3b41      	subs	r3, #65	; 0x41
 8001ffe:	221f      	movs	r2, #31
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	4019      	ands	r1, r3
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	6818      	ldr	r0, [r3, #0]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	3b41      	subs	r3, #65	; 0x41
 8002018:	fa00 f203 	lsl.w	r2, r0, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b09      	cmp	r3, #9
 800202a:	d91c      	bls.n	8002066 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68d9      	ldr	r1, [r3, #12]
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	4613      	mov	r3, r2
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	4413      	add	r3, r2
 800203c:	3b1e      	subs	r3, #30
 800203e:	2207      	movs	r2, #7
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	43db      	mvns	r3, r3
 8002046:	4019      	ands	r1, r3
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	6898      	ldr	r0, [r3, #8]
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	4613      	mov	r3, r2
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	4413      	add	r3, r2
 8002056:	3b1e      	subs	r3, #30
 8002058:	fa00 f203 	lsl.w	r2, r0, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	430a      	orrs	r2, r1
 8002062:	60da      	str	r2, [r3, #12]
 8002064:	e019      	b.n	800209a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6919      	ldr	r1, [r3, #16]
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4613      	mov	r3, r2
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	4413      	add	r3, r2
 8002076:	2207      	movs	r2, #7
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	4019      	ands	r1, r3
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	6898      	ldr	r0, [r3, #8]
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4613      	mov	r3, r2
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	4413      	add	r3, r2
 800208e:	fa00 f203 	lsl.w	r2, r0, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	430a      	orrs	r2, r1
 8002098:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2b10      	cmp	r3, #16
 80020a0:	d003      	beq.n	80020aa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020a6:	2b11      	cmp	r3, #17
 80020a8:	d132      	bne.n	8002110 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a1d      	ldr	r2, [pc, #116]	; (8002124 <HAL_ADC_ConfigChannel+0x1e4>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d125      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d126      	bne.n	8002110 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80020d0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2b10      	cmp	r3, #16
 80020d8:	d11a      	bne.n	8002110 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020da:	4b13      	ldr	r3, [pc, #76]	; (8002128 <HAL_ADC_ConfigChannel+0x1e8>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a13      	ldr	r2, [pc, #76]	; (800212c <HAL_ADC_ConfigChannel+0x1ec>)
 80020e0:	fba2 2303 	umull	r2, r3, r2, r3
 80020e4:	0c9a      	lsrs	r2, r3, #18
 80020e6:	4613      	mov	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020f0:	e002      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	3b01      	subs	r3, #1
 80020f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f9      	bne.n	80020f2 <HAL_ADC_ConfigChannel+0x1b2>
 80020fe:	e007      	b.n	8002110 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002104:	f043 0220 	orr.w	r2, r3, #32
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002118:	7bfb      	ldrb	r3, [r7, #15]
}
 800211a:	4618      	mov	r0, r3
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	bc80      	pop	{r7}
 8002122:	4770      	bx	lr
 8002124:	40012400 	.word	0x40012400
 8002128:	20000000 	.word	0x20000000
 800212c:	431bde83 	.word	0x431bde83

08002130 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002138:	2300      	movs	r3, #0
 800213a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b01      	cmp	r3, #1
 800214c:	d039      	beq.n	80021c2 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f042 0201 	orr.w	r2, r2, #1
 800215c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800215e:	4b1b      	ldr	r3, [pc, #108]	; (80021cc <ADC_Enable+0x9c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a1b      	ldr	r2, [pc, #108]	; (80021d0 <ADC_Enable+0xa0>)
 8002164:	fba2 2303 	umull	r2, r3, r2, r3
 8002168:	0c9b      	lsrs	r3, r3, #18
 800216a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800216c:	e002      	b.n	8002174 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	3b01      	subs	r3, #1
 8002172:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f9      	bne.n	800216e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800217a:	f7ff fcfd 	bl	8001b78 <HAL_GetTick>
 800217e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002180:	e018      	b.n	80021b4 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002182:	f7ff fcf9 	bl	8001b78 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d911      	bls.n	80021b4 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002194:	f043 0210 	orr.w	r2, r3, #16
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a0:	f043 0201 	orr.w	r2, r3, #1
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e007      	b.n	80021c4 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d1df      	bne.n	8002182 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	20000000 	.word	0x20000000
 80021d0:	431bde83 	.word	0x431bde83

080021d4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021dc:	2300      	movs	r3, #0
 80021de:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d127      	bne.n	800223e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 0201 	bic.w	r2, r2, #1
 80021fc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021fe:	f7ff fcbb 	bl	8001b78 <HAL_GetTick>
 8002202:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002204:	e014      	b.n	8002230 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002206:	f7ff fcb7 	bl	8001b78 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d90d      	bls.n	8002230 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002218:	f043 0210 	orr.w	r2, r3, #16
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002224:	f043 0201 	orr.w	r2, r3, #1
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e007      	b.n	8002240 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b01      	cmp	r3, #1
 800223c:	d0e3      	beq.n	8002206 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002254:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800225e:	2b00      	cmp	r3, #0
 8002260:	d127      	bne.n	80022b2 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002266:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002278:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800227c:	d115      	bne.n	80022aa <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002282:	2b00      	cmp	r3, #0
 8002284:	d111      	bne.n	80022aa <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002296:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d105      	bne.n	80022aa <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a2:	f043 0201 	orr.w	r2, r3, #1
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f7ff f890 	bl	80013d0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80022b0:	e004      	b.n	80022bc <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	4798      	blx	r3
}
 80022bc:	bf00      	nop
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f7ff fe22 	bl	8001f1c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022d8:	bf00      	nop
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fe:	f043 0204 	orr.w	r2, r3, #4
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f7ff fe11 	bl	8001f2e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800230c:	bf00      	nop
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002324:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <__NVIC_SetPriorityGrouping+0x44>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002330:	4013      	ands	r3, r2
 8002332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800233c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002346:	4a04      	ldr	r2, [pc, #16]	; (8002358 <__NVIC_SetPriorityGrouping+0x44>)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	60d3      	str	r3, [r2, #12]
}
 800234c:	bf00      	nop
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002360:	4b04      	ldr	r3, [pc, #16]	; (8002374 <__NVIC_GetPriorityGrouping+0x18>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	0a1b      	lsrs	r3, r3, #8
 8002366:	f003 0307 	and.w	r3, r3, #7
}
 800236a:	4618      	mov	r0, r3
 800236c:	46bd      	mov	sp, r7
 800236e:	bc80      	pop	{r7}
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002386:	2b00      	cmp	r3, #0
 8002388:	db0b      	blt.n	80023a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	f003 021f 	and.w	r2, r3, #31
 8002390:	4906      	ldr	r1, [pc, #24]	; (80023ac <__NVIC_EnableIRQ+0x34>)
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	095b      	lsrs	r3, r3, #5
 8002398:	2001      	movs	r0, #1
 800239a:	fa00 f202 	lsl.w	r2, r0, r2
 800239e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr
 80023ac:	e000e100 	.word	0xe000e100

080023b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	6039      	str	r1, [r7, #0]
 80023ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	db0a      	blt.n	80023da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	490c      	ldr	r1, [pc, #48]	; (80023fc <__NVIC_SetPriority+0x4c>)
 80023ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ce:	0112      	lsls	r2, r2, #4
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	440b      	add	r3, r1
 80023d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023d8:	e00a      	b.n	80023f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	4908      	ldr	r1, [pc, #32]	; (8002400 <__NVIC_SetPriority+0x50>)
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	3b04      	subs	r3, #4
 80023e8:	0112      	lsls	r2, r2, #4
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	440b      	add	r3, r1
 80023ee:	761a      	strb	r2, [r3, #24]
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc80      	pop	{r7}
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	e000e100 	.word	0xe000e100
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002404:	b480      	push	{r7}
 8002406:	b089      	sub	sp, #36	; 0x24
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f1c3 0307 	rsb	r3, r3, #7
 800241e:	2b04      	cmp	r3, #4
 8002420:	bf28      	it	cs
 8002422:	2304      	movcs	r3, #4
 8002424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3304      	adds	r3, #4
 800242a:	2b06      	cmp	r3, #6
 800242c:	d902      	bls.n	8002434 <NVIC_EncodePriority+0x30>
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3b03      	subs	r3, #3
 8002432:	e000      	b.n	8002436 <NVIC_EncodePriority+0x32>
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002438:	f04f 32ff 	mov.w	r2, #4294967295
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43da      	mvns	r2, r3
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	401a      	ands	r2, r3
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800244c:	f04f 31ff 	mov.w	r1, #4294967295
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	fa01 f303 	lsl.w	r3, r1, r3
 8002456:	43d9      	mvns	r1, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800245c:	4313      	orrs	r3, r2
         );
}
 800245e:	4618      	mov	r0, r3
 8002460:	3724      	adds	r7, #36	; 0x24
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr

08002468 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7ff ff4f 	bl	8002314 <__NVIC_SetPriorityGrouping>
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800247e:	b580      	push	{r7, lr}
 8002480:	b086      	sub	sp, #24
 8002482:	af00      	add	r7, sp, #0
 8002484:	4603      	mov	r3, r0
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	607a      	str	r2, [r7, #4]
 800248a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002490:	f7ff ff64 	bl	800235c <__NVIC_GetPriorityGrouping>
 8002494:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	68b9      	ldr	r1, [r7, #8]
 800249a:	6978      	ldr	r0, [r7, #20]
 800249c:	f7ff ffb2 	bl	8002404 <NVIC_EncodePriority>
 80024a0:	4602      	mov	r2, r0
 80024a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024a6:	4611      	mov	r1, r2
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff ff81 	bl	80023b0 <__NVIC_SetPriority>
}
 80024ae:	bf00      	nop
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b082      	sub	sp, #8
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	4603      	mov	r3, r0
 80024be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff ff57 	bl	8002378 <__NVIC_EnableIRQ>
}
 80024ca:	bf00      	nop
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
	...

080024d4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024dc:	2300      	movs	r3, #0
 80024de:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e059      	b.n	800259e <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	461a      	mov	r2, r3
 80024f0:	4b2d      	ldr	r3, [pc, #180]	; (80025a8 <HAL_DMA_Init+0xd4>)
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d80f      	bhi.n	8002516 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	461a      	mov	r2, r3
 80024fc:	4b2b      	ldr	r3, [pc, #172]	; (80025ac <HAL_DMA_Init+0xd8>)
 80024fe:	4413      	add	r3, r2
 8002500:	4a2b      	ldr	r2, [pc, #172]	; (80025b0 <HAL_DMA_Init+0xdc>)
 8002502:	fba2 2303 	umull	r2, r3, r2, r3
 8002506:	091b      	lsrs	r3, r3, #4
 8002508:	009a      	lsls	r2, r3, #2
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a28      	ldr	r2, [pc, #160]	; (80025b4 <HAL_DMA_Init+0xe0>)
 8002512:	63da      	str	r2, [r3, #60]	; 0x3c
 8002514:	e00e      	b.n	8002534 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	461a      	mov	r2, r3
 800251c:	4b26      	ldr	r3, [pc, #152]	; (80025b8 <HAL_DMA_Init+0xe4>)
 800251e:	4413      	add	r3, r2
 8002520:	4a23      	ldr	r2, [pc, #140]	; (80025b0 <HAL_DMA_Init+0xdc>)
 8002522:	fba2 2303 	umull	r2, r3, r2, r3
 8002526:	091b      	lsrs	r3, r3, #4
 8002528:	009a      	lsls	r2, r3, #2
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a22      	ldr	r2, [pc, #136]	; (80025bc <HAL_DMA_Init+0xe8>)
 8002532:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2202      	movs	r2, #2
 8002538:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800254a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800254e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002558:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002564:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002570:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	4313      	orrs	r3, r2
 800257c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr
 80025a8:	40020407 	.word	0x40020407
 80025ac:	bffdfff8 	.word	0xbffdfff8
 80025b0:	cccccccd 	.word	0xcccccccd
 80025b4:	40020000 	.word	0x40020000
 80025b8:	bffdfbf8 	.word	0xbffdfbf8
 80025bc:	40020400 	.word	0x40020400

080025c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
 80025cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ce:	2300      	movs	r3, #0
 80025d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <HAL_DMA_Start_IT+0x20>
 80025dc:	2302      	movs	r3, #2
 80025de:	e04a      	b.n	8002676 <HAL_DMA_Start_IT+0xb6>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d13a      	bne.n	8002668 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2202      	movs	r2, #2
 80025f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 0201 	bic.w	r2, r2, #1
 800260e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	68b9      	ldr	r1, [r7, #8]
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 fa6e 	bl	8002af8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002620:	2b00      	cmp	r3, #0
 8002622:	d008      	beq.n	8002636 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 020e 	orr.w	r2, r2, #14
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	e00f      	b.n	8002656 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 0204 	bic.w	r2, r2, #4
 8002644:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f042 020a 	orr.w	r2, r2, #10
 8002654:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f042 0201 	orr.w	r2, r2, #1
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	e005      	b.n	8002674 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002670:	2302      	movs	r3, #2
 8002672:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002674:	7dfb      	ldrb	r3, [r7, #23]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
	...

08002680 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	2204      	movs	r2, #4
 800269e:	409a      	lsls	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4013      	ands	r3, r2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 80d6 	beq.w	8002856 <HAL_DMA_IRQHandler+0x1d6>
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f000 80d0 	beq.w	8002856 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0320 	and.w	r3, r3, #32
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d107      	bne.n	80026d4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0204 	bic.w	r2, r2, #4
 80026d2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	461a      	mov	r2, r3
 80026da:	4b9b      	ldr	r3, [pc, #620]	; (8002948 <HAL_DMA_IRQHandler+0x2c8>)
 80026dc:	429a      	cmp	r2, r3
 80026de:	d958      	bls.n	8002792 <HAL_DMA_IRQHandler+0x112>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a99      	ldr	r2, [pc, #612]	; (800294c <HAL_DMA_IRQHandler+0x2cc>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d04f      	beq.n	800278a <HAL_DMA_IRQHandler+0x10a>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a98      	ldr	r2, [pc, #608]	; (8002950 <HAL_DMA_IRQHandler+0x2d0>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d048      	beq.n	8002786 <HAL_DMA_IRQHandler+0x106>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a96      	ldr	r2, [pc, #600]	; (8002954 <HAL_DMA_IRQHandler+0x2d4>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d040      	beq.n	8002780 <HAL_DMA_IRQHandler+0x100>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a95      	ldr	r2, [pc, #596]	; (8002958 <HAL_DMA_IRQHandler+0x2d8>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d038      	beq.n	800277a <HAL_DMA_IRQHandler+0xfa>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a93      	ldr	r2, [pc, #588]	; (800295c <HAL_DMA_IRQHandler+0x2dc>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d030      	beq.n	8002774 <HAL_DMA_IRQHandler+0xf4>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a92      	ldr	r2, [pc, #584]	; (8002960 <HAL_DMA_IRQHandler+0x2e0>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d028      	beq.n	800276e <HAL_DMA_IRQHandler+0xee>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a89      	ldr	r2, [pc, #548]	; (8002948 <HAL_DMA_IRQHandler+0x2c8>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d020      	beq.n	8002768 <HAL_DMA_IRQHandler+0xe8>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a8e      	ldr	r2, [pc, #568]	; (8002964 <HAL_DMA_IRQHandler+0x2e4>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d019      	beq.n	8002764 <HAL_DMA_IRQHandler+0xe4>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a8c      	ldr	r2, [pc, #560]	; (8002968 <HAL_DMA_IRQHandler+0x2e8>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d012      	beq.n	8002760 <HAL_DMA_IRQHandler+0xe0>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a8b      	ldr	r2, [pc, #556]	; (800296c <HAL_DMA_IRQHandler+0x2ec>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d00a      	beq.n	800275a <HAL_DMA_IRQHandler+0xda>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a89      	ldr	r2, [pc, #548]	; (8002970 <HAL_DMA_IRQHandler+0x2f0>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d102      	bne.n	8002754 <HAL_DMA_IRQHandler+0xd4>
 800274e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002752:	e01b      	b.n	800278c <HAL_DMA_IRQHandler+0x10c>
 8002754:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002758:	e018      	b.n	800278c <HAL_DMA_IRQHandler+0x10c>
 800275a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800275e:	e015      	b.n	800278c <HAL_DMA_IRQHandler+0x10c>
 8002760:	2340      	movs	r3, #64	; 0x40
 8002762:	e013      	b.n	800278c <HAL_DMA_IRQHandler+0x10c>
 8002764:	2304      	movs	r3, #4
 8002766:	e011      	b.n	800278c <HAL_DMA_IRQHandler+0x10c>
 8002768:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800276c:	e00e      	b.n	800278c <HAL_DMA_IRQHandler+0x10c>
 800276e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002772:	e00b      	b.n	800278c <HAL_DMA_IRQHandler+0x10c>
 8002774:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002778:	e008      	b.n	800278c <HAL_DMA_IRQHandler+0x10c>
 800277a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800277e:	e005      	b.n	800278c <HAL_DMA_IRQHandler+0x10c>
 8002780:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002784:	e002      	b.n	800278c <HAL_DMA_IRQHandler+0x10c>
 8002786:	2340      	movs	r3, #64	; 0x40
 8002788:	e000      	b.n	800278c <HAL_DMA_IRQHandler+0x10c>
 800278a:	2304      	movs	r3, #4
 800278c:	4a79      	ldr	r2, [pc, #484]	; (8002974 <HAL_DMA_IRQHandler+0x2f4>)
 800278e:	6053      	str	r3, [r2, #4]
 8002790:	e057      	b.n	8002842 <HAL_DMA_IRQHandler+0x1c2>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a6d      	ldr	r2, [pc, #436]	; (800294c <HAL_DMA_IRQHandler+0x2cc>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d04f      	beq.n	800283c <HAL_DMA_IRQHandler+0x1bc>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a6b      	ldr	r2, [pc, #428]	; (8002950 <HAL_DMA_IRQHandler+0x2d0>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d048      	beq.n	8002838 <HAL_DMA_IRQHandler+0x1b8>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a6a      	ldr	r2, [pc, #424]	; (8002954 <HAL_DMA_IRQHandler+0x2d4>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d040      	beq.n	8002832 <HAL_DMA_IRQHandler+0x1b2>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a68      	ldr	r2, [pc, #416]	; (8002958 <HAL_DMA_IRQHandler+0x2d8>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d038      	beq.n	800282c <HAL_DMA_IRQHandler+0x1ac>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a67      	ldr	r2, [pc, #412]	; (800295c <HAL_DMA_IRQHandler+0x2dc>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d030      	beq.n	8002826 <HAL_DMA_IRQHandler+0x1a6>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a65      	ldr	r2, [pc, #404]	; (8002960 <HAL_DMA_IRQHandler+0x2e0>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d028      	beq.n	8002820 <HAL_DMA_IRQHandler+0x1a0>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a5d      	ldr	r2, [pc, #372]	; (8002948 <HAL_DMA_IRQHandler+0x2c8>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d020      	beq.n	800281a <HAL_DMA_IRQHandler+0x19a>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a61      	ldr	r2, [pc, #388]	; (8002964 <HAL_DMA_IRQHandler+0x2e4>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d019      	beq.n	8002816 <HAL_DMA_IRQHandler+0x196>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a60      	ldr	r2, [pc, #384]	; (8002968 <HAL_DMA_IRQHandler+0x2e8>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d012      	beq.n	8002812 <HAL_DMA_IRQHandler+0x192>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a5e      	ldr	r2, [pc, #376]	; (800296c <HAL_DMA_IRQHandler+0x2ec>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d00a      	beq.n	800280c <HAL_DMA_IRQHandler+0x18c>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a5d      	ldr	r2, [pc, #372]	; (8002970 <HAL_DMA_IRQHandler+0x2f0>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d102      	bne.n	8002806 <HAL_DMA_IRQHandler+0x186>
 8002800:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002804:	e01b      	b.n	800283e <HAL_DMA_IRQHandler+0x1be>
 8002806:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800280a:	e018      	b.n	800283e <HAL_DMA_IRQHandler+0x1be>
 800280c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002810:	e015      	b.n	800283e <HAL_DMA_IRQHandler+0x1be>
 8002812:	2340      	movs	r3, #64	; 0x40
 8002814:	e013      	b.n	800283e <HAL_DMA_IRQHandler+0x1be>
 8002816:	2304      	movs	r3, #4
 8002818:	e011      	b.n	800283e <HAL_DMA_IRQHandler+0x1be>
 800281a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800281e:	e00e      	b.n	800283e <HAL_DMA_IRQHandler+0x1be>
 8002820:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002824:	e00b      	b.n	800283e <HAL_DMA_IRQHandler+0x1be>
 8002826:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800282a:	e008      	b.n	800283e <HAL_DMA_IRQHandler+0x1be>
 800282c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002830:	e005      	b.n	800283e <HAL_DMA_IRQHandler+0x1be>
 8002832:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002836:	e002      	b.n	800283e <HAL_DMA_IRQHandler+0x1be>
 8002838:	2340      	movs	r3, #64	; 0x40
 800283a:	e000      	b.n	800283e <HAL_DMA_IRQHandler+0x1be>
 800283c:	2304      	movs	r3, #4
 800283e:	4a4e      	ldr	r2, [pc, #312]	; (8002978 <HAL_DMA_IRQHandler+0x2f8>)
 8002840:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 8136 	beq.w	8002ab8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002854:	e130      	b.n	8002ab8 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	2202      	movs	r2, #2
 800285c:	409a      	lsls	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	4013      	ands	r3, r2
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 80f8 	beq.w	8002a58 <HAL_DMA_IRQHandler+0x3d8>
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 80f2 	beq.w	8002a58 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0320 	and.w	r3, r3, #32
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10b      	bne.n	800289a <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 020a 	bic.w	r2, r2, #10
 8002890:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	461a      	mov	r2, r3
 80028a0:	4b29      	ldr	r3, [pc, #164]	; (8002948 <HAL_DMA_IRQHandler+0x2c8>)
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d973      	bls.n	800298e <HAL_DMA_IRQHandler+0x30e>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a28      	ldr	r2, [pc, #160]	; (800294c <HAL_DMA_IRQHandler+0x2cc>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d06a      	beq.n	8002986 <HAL_DMA_IRQHandler+0x306>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a26      	ldr	r2, [pc, #152]	; (8002950 <HAL_DMA_IRQHandler+0x2d0>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d063      	beq.n	8002982 <HAL_DMA_IRQHandler+0x302>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a25      	ldr	r2, [pc, #148]	; (8002954 <HAL_DMA_IRQHandler+0x2d4>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d05b      	beq.n	800297c <HAL_DMA_IRQHandler+0x2fc>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a23      	ldr	r2, [pc, #140]	; (8002958 <HAL_DMA_IRQHandler+0x2d8>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d038      	beq.n	8002940 <HAL_DMA_IRQHandler+0x2c0>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a22      	ldr	r2, [pc, #136]	; (800295c <HAL_DMA_IRQHandler+0x2dc>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d030      	beq.n	800293a <HAL_DMA_IRQHandler+0x2ba>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a20      	ldr	r2, [pc, #128]	; (8002960 <HAL_DMA_IRQHandler+0x2e0>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d028      	beq.n	8002934 <HAL_DMA_IRQHandler+0x2b4>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a18      	ldr	r2, [pc, #96]	; (8002948 <HAL_DMA_IRQHandler+0x2c8>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d020      	beq.n	800292e <HAL_DMA_IRQHandler+0x2ae>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a1c      	ldr	r2, [pc, #112]	; (8002964 <HAL_DMA_IRQHandler+0x2e4>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d019      	beq.n	800292a <HAL_DMA_IRQHandler+0x2aa>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a1b      	ldr	r2, [pc, #108]	; (8002968 <HAL_DMA_IRQHandler+0x2e8>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d012      	beq.n	8002926 <HAL_DMA_IRQHandler+0x2a6>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a19      	ldr	r2, [pc, #100]	; (800296c <HAL_DMA_IRQHandler+0x2ec>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d00a      	beq.n	8002920 <HAL_DMA_IRQHandler+0x2a0>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a18      	ldr	r2, [pc, #96]	; (8002970 <HAL_DMA_IRQHandler+0x2f0>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d102      	bne.n	800291a <HAL_DMA_IRQHandler+0x29a>
 8002914:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002918:	e036      	b.n	8002988 <HAL_DMA_IRQHandler+0x308>
 800291a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800291e:	e033      	b.n	8002988 <HAL_DMA_IRQHandler+0x308>
 8002920:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002924:	e030      	b.n	8002988 <HAL_DMA_IRQHandler+0x308>
 8002926:	2320      	movs	r3, #32
 8002928:	e02e      	b.n	8002988 <HAL_DMA_IRQHandler+0x308>
 800292a:	2302      	movs	r3, #2
 800292c:	e02c      	b.n	8002988 <HAL_DMA_IRQHandler+0x308>
 800292e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002932:	e029      	b.n	8002988 <HAL_DMA_IRQHandler+0x308>
 8002934:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002938:	e026      	b.n	8002988 <HAL_DMA_IRQHandler+0x308>
 800293a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800293e:	e023      	b.n	8002988 <HAL_DMA_IRQHandler+0x308>
 8002940:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002944:	e020      	b.n	8002988 <HAL_DMA_IRQHandler+0x308>
 8002946:	bf00      	nop
 8002948:	40020080 	.word	0x40020080
 800294c:	40020008 	.word	0x40020008
 8002950:	4002001c 	.word	0x4002001c
 8002954:	40020030 	.word	0x40020030
 8002958:	40020044 	.word	0x40020044
 800295c:	40020058 	.word	0x40020058
 8002960:	4002006c 	.word	0x4002006c
 8002964:	40020408 	.word	0x40020408
 8002968:	4002041c 	.word	0x4002041c
 800296c:	40020430 	.word	0x40020430
 8002970:	40020444 	.word	0x40020444
 8002974:	40020400 	.word	0x40020400
 8002978:	40020000 	.word	0x40020000
 800297c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002980:	e002      	b.n	8002988 <HAL_DMA_IRQHandler+0x308>
 8002982:	2320      	movs	r3, #32
 8002984:	e000      	b.n	8002988 <HAL_DMA_IRQHandler+0x308>
 8002986:	2302      	movs	r3, #2
 8002988:	4a4e      	ldr	r2, [pc, #312]	; (8002ac4 <HAL_DMA_IRQHandler+0x444>)
 800298a:	6053      	str	r3, [r2, #4]
 800298c:	e057      	b.n	8002a3e <HAL_DMA_IRQHandler+0x3be>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a4d      	ldr	r2, [pc, #308]	; (8002ac8 <HAL_DMA_IRQHandler+0x448>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d04f      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x3b8>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a4b      	ldr	r2, [pc, #300]	; (8002acc <HAL_DMA_IRQHandler+0x44c>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d048      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x3b4>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a4a      	ldr	r2, [pc, #296]	; (8002ad0 <HAL_DMA_IRQHandler+0x450>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d040      	beq.n	8002a2e <HAL_DMA_IRQHandler+0x3ae>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a48      	ldr	r2, [pc, #288]	; (8002ad4 <HAL_DMA_IRQHandler+0x454>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d038      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x3a8>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a47      	ldr	r2, [pc, #284]	; (8002ad8 <HAL_DMA_IRQHandler+0x458>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d030      	beq.n	8002a22 <HAL_DMA_IRQHandler+0x3a2>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a45      	ldr	r2, [pc, #276]	; (8002adc <HAL_DMA_IRQHandler+0x45c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d028      	beq.n	8002a1c <HAL_DMA_IRQHandler+0x39c>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a44      	ldr	r2, [pc, #272]	; (8002ae0 <HAL_DMA_IRQHandler+0x460>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d020      	beq.n	8002a16 <HAL_DMA_IRQHandler+0x396>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a42      	ldr	r2, [pc, #264]	; (8002ae4 <HAL_DMA_IRQHandler+0x464>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d019      	beq.n	8002a12 <HAL_DMA_IRQHandler+0x392>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a41      	ldr	r2, [pc, #260]	; (8002ae8 <HAL_DMA_IRQHandler+0x468>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d012      	beq.n	8002a0e <HAL_DMA_IRQHandler+0x38e>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a3f      	ldr	r2, [pc, #252]	; (8002aec <HAL_DMA_IRQHandler+0x46c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d00a      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x388>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a3e      	ldr	r2, [pc, #248]	; (8002af0 <HAL_DMA_IRQHandler+0x470>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d102      	bne.n	8002a02 <HAL_DMA_IRQHandler+0x382>
 80029fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a00:	e01b      	b.n	8002a3a <HAL_DMA_IRQHandler+0x3ba>
 8002a02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a06:	e018      	b.n	8002a3a <HAL_DMA_IRQHandler+0x3ba>
 8002a08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a0c:	e015      	b.n	8002a3a <HAL_DMA_IRQHandler+0x3ba>
 8002a0e:	2320      	movs	r3, #32
 8002a10:	e013      	b.n	8002a3a <HAL_DMA_IRQHandler+0x3ba>
 8002a12:	2302      	movs	r3, #2
 8002a14:	e011      	b.n	8002a3a <HAL_DMA_IRQHandler+0x3ba>
 8002a16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a1a:	e00e      	b.n	8002a3a <HAL_DMA_IRQHandler+0x3ba>
 8002a1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a20:	e00b      	b.n	8002a3a <HAL_DMA_IRQHandler+0x3ba>
 8002a22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a26:	e008      	b.n	8002a3a <HAL_DMA_IRQHandler+0x3ba>
 8002a28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a2c:	e005      	b.n	8002a3a <HAL_DMA_IRQHandler+0x3ba>
 8002a2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a32:	e002      	b.n	8002a3a <HAL_DMA_IRQHandler+0x3ba>
 8002a34:	2320      	movs	r3, #32
 8002a36:	e000      	b.n	8002a3a <HAL_DMA_IRQHandler+0x3ba>
 8002a38:	2302      	movs	r3, #2
 8002a3a:	4a2e      	ldr	r2, [pc, #184]	; (8002af4 <HAL_DMA_IRQHandler+0x474>)
 8002a3c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d034      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002a56:	e02f      	b.n	8002ab8 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	2208      	movs	r2, #8
 8002a5e:	409a      	lsls	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4013      	ands	r3, r2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d028      	beq.n	8002aba <HAL_DMA_IRQHandler+0x43a>
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d023      	beq.n	8002aba <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 020e 	bic.w	r2, r2, #14
 8002a80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a90:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d004      	beq.n	8002aba <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	4798      	blx	r3
    }
  }
  return;
 8002ab8:	bf00      	nop
 8002aba:	bf00      	nop
}
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40020400 	.word	0x40020400
 8002ac8:	40020008 	.word	0x40020008
 8002acc:	4002001c 	.word	0x4002001c
 8002ad0:	40020030 	.word	0x40020030
 8002ad4:	40020044 	.word	0x40020044
 8002ad8:	40020058 	.word	0x40020058
 8002adc:	4002006c 	.word	0x4002006c
 8002ae0:	40020080 	.word	0x40020080
 8002ae4:	40020408 	.word	0x40020408
 8002ae8:	4002041c 	.word	0x4002041c
 8002aec:	40020430 	.word	0x40020430
 8002af0:	40020444 	.word	0x40020444
 8002af4:	40020000 	.word	0x40020000

08002af8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
 8002b04:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0e:	2101      	movs	r1, #1
 8002b10:	fa01 f202 	lsl.w	r2, r1, r2
 8002b14:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2b10      	cmp	r3, #16
 8002b24:	d108      	bne.n	8002b38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b36:	e007      	b.n	8002b48 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	60da      	str	r2, [r3, #12]
}
 8002b48:	bf00      	nop
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr
	...

08002b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b08b      	sub	sp, #44	; 0x2c
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b62:	2300      	movs	r3, #0
 8002b64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b66:	e133      	b.n	8002dd0 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b68:	2201      	movs	r2, #1
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	69fa      	ldr	r2, [r7, #28]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	f040 8122 	bne.w	8002dca <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b12      	cmp	r3, #18
 8002b8c:	d034      	beq.n	8002bf8 <HAL_GPIO_Init+0xa4>
 8002b8e:	2b12      	cmp	r3, #18
 8002b90:	d80d      	bhi.n	8002bae <HAL_GPIO_Init+0x5a>
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d02b      	beq.n	8002bee <HAL_GPIO_Init+0x9a>
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d804      	bhi.n	8002ba4 <HAL_GPIO_Init+0x50>
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d031      	beq.n	8002c02 <HAL_GPIO_Init+0xae>
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d01c      	beq.n	8002bdc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ba2:	e048      	b.n	8002c36 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	d043      	beq.n	8002c30 <HAL_GPIO_Init+0xdc>
 8002ba8:	2b11      	cmp	r3, #17
 8002baa:	d01b      	beq.n	8002be4 <HAL_GPIO_Init+0x90>
          break;
 8002bac:	e043      	b.n	8002c36 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002bae:	4a8f      	ldr	r2, [pc, #572]	; (8002dec <HAL_GPIO_Init+0x298>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d026      	beq.n	8002c02 <HAL_GPIO_Init+0xae>
 8002bb4:	4a8d      	ldr	r2, [pc, #564]	; (8002dec <HAL_GPIO_Init+0x298>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d806      	bhi.n	8002bc8 <HAL_GPIO_Init+0x74>
 8002bba:	4a8d      	ldr	r2, [pc, #564]	; (8002df0 <HAL_GPIO_Init+0x29c>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d020      	beq.n	8002c02 <HAL_GPIO_Init+0xae>
 8002bc0:	4a8c      	ldr	r2, [pc, #560]	; (8002df4 <HAL_GPIO_Init+0x2a0>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d01d      	beq.n	8002c02 <HAL_GPIO_Init+0xae>
          break;
 8002bc6:	e036      	b.n	8002c36 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002bc8:	4a8b      	ldr	r2, [pc, #556]	; (8002df8 <HAL_GPIO_Init+0x2a4>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d019      	beq.n	8002c02 <HAL_GPIO_Init+0xae>
 8002bce:	4a8b      	ldr	r2, [pc, #556]	; (8002dfc <HAL_GPIO_Init+0x2a8>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d016      	beq.n	8002c02 <HAL_GPIO_Init+0xae>
 8002bd4:	4a8a      	ldr	r2, [pc, #552]	; (8002e00 <HAL_GPIO_Init+0x2ac>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d013      	beq.n	8002c02 <HAL_GPIO_Init+0xae>
          break;
 8002bda:	e02c      	b.n	8002c36 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	623b      	str	r3, [r7, #32]
          break;
 8002be2:	e028      	b.n	8002c36 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	3304      	adds	r3, #4
 8002bea:	623b      	str	r3, [r7, #32]
          break;
 8002bec:	e023      	b.n	8002c36 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	3308      	adds	r3, #8
 8002bf4:	623b      	str	r3, [r7, #32]
          break;
 8002bf6:	e01e      	b.n	8002c36 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	330c      	adds	r3, #12
 8002bfe:	623b      	str	r3, [r7, #32]
          break;
 8002c00:	e019      	b.n	8002c36 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d102      	bne.n	8002c10 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c0a:	2304      	movs	r3, #4
 8002c0c:	623b      	str	r3, [r7, #32]
          break;
 8002c0e:	e012      	b.n	8002c36 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d105      	bne.n	8002c24 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c18:	2308      	movs	r3, #8
 8002c1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69fa      	ldr	r2, [r7, #28]
 8002c20:	611a      	str	r2, [r3, #16]
          break;
 8002c22:	e008      	b.n	8002c36 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c24:	2308      	movs	r3, #8
 8002c26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	69fa      	ldr	r2, [r7, #28]
 8002c2c:	615a      	str	r2, [r3, #20]
          break;
 8002c2e:	e002      	b.n	8002c36 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c30:	2300      	movs	r3, #0
 8002c32:	623b      	str	r3, [r7, #32]
          break;
 8002c34:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	2bff      	cmp	r3, #255	; 0xff
 8002c3a:	d801      	bhi.n	8002c40 <HAL_GPIO_Init+0xec>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	e001      	b.n	8002c44 <HAL_GPIO_Init+0xf0>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3304      	adds	r3, #4
 8002c44:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	2bff      	cmp	r3, #255	; 0xff
 8002c4a:	d802      	bhi.n	8002c52 <HAL_GPIO_Init+0xfe>
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	e002      	b.n	8002c58 <HAL_GPIO_Init+0x104>
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	3b08      	subs	r3, #8
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	210f      	movs	r1, #15
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	fa01 f303 	lsl.w	r3, r1, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	401a      	ands	r2, r3
 8002c6a:	6a39      	ldr	r1, [r7, #32]
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c72:	431a      	orrs	r2, r3
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 80a2 	beq.w	8002dca <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c86:	4b5f      	ldr	r3, [pc, #380]	; (8002e04 <HAL_GPIO_Init+0x2b0>)
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	4a5e      	ldr	r2, [pc, #376]	; (8002e04 <HAL_GPIO_Init+0x2b0>)
 8002c8c:	f043 0301 	orr.w	r3, r3, #1
 8002c90:	6193      	str	r3, [r2, #24]
 8002c92:	4b5c      	ldr	r3, [pc, #368]	; (8002e04 <HAL_GPIO_Init+0x2b0>)
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	60bb      	str	r3, [r7, #8]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c9e:	4a5a      	ldr	r2, [pc, #360]	; (8002e08 <HAL_GPIO_Init+0x2b4>)
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	089b      	lsrs	r3, r3, #2
 8002ca4:	3302      	adds	r3, #2
 8002ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002caa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	220f      	movs	r2, #15
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a51      	ldr	r2, [pc, #324]	; (8002e0c <HAL_GPIO_Init+0x2b8>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d01f      	beq.n	8002d0a <HAL_GPIO_Init+0x1b6>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a50      	ldr	r2, [pc, #320]	; (8002e10 <HAL_GPIO_Init+0x2bc>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d019      	beq.n	8002d06 <HAL_GPIO_Init+0x1b2>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a4f      	ldr	r2, [pc, #316]	; (8002e14 <HAL_GPIO_Init+0x2c0>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d013      	beq.n	8002d02 <HAL_GPIO_Init+0x1ae>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a4e      	ldr	r2, [pc, #312]	; (8002e18 <HAL_GPIO_Init+0x2c4>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d00d      	beq.n	8002cfe <HAL_GPIO_Init+0x1aa>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a4d      	ldr	r2, [pc, #308]	; (8002e1c <HAL_GPIO_Init+0x2c8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d007      	beq.n	8002cfa <HAL_GPIO_Init+0x1a6>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a4c      	ldr	r2, [pc, #304]	; (8002e20 <HAL_GPIO_Init+0x2cc>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d101      	bne.n	8002cf6 <HAL_GPIO_Init+0x1a2>
 8002cf2:	2305      	movs	r3, #5
 8002cf4:	e00a      	b.n	8002d0c <HAL_GPIO_Init+0x1b8>
 8002cf6:	2306      	movs	r3, #6
 8002cf8:	e008      	b.n	8002d0c <HAL_GPIO_Init+0x1b8>
 8002cfa:	2304      	movs	r3, #4
 8002cfc:	e006      	b.n	8002d0c <HAL_GPIO_Init+0x1b8>
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e004      	b.n	8002d0c <HAL_GPIO_Init+0x1b8>
 8002d02:	2302      	movs	r3, #2
 8002d04:	e002      	b.n	8002d0c <HAL_GPIO_Init+0x1b8>
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <HAL_GPIO_Init+0x1b8>
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d0e:	f002 0203 	and.w	r2, r2, #3
 8002d12:	0092      	lsls	r2, r2, #2
 8002d14:	4093      	lsls	r3, r2
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d1c:	493a      	ldr	r1, [pc, #232]	; (8002e08 <HAL_GPIO_Init+0x2b4>)
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	089b      	lsrs	r3, r3, #2
 8002d22:	3302      	adds	r3, #2
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d006      	beq.n	8002d44 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d36:	4b3b      	ldr	r3, [pc, #236]	; (8002e24 <HAL_GPIO_Init+0x2d0>)
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	493a      	ldr	r1, [pc, #232]	; (8002e24 <HAL_GPIO_Init+0x2d0>)
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	600b      	str	r3, [r1, #0]
 8002d42:	e006      	b.n	8002d52 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d44:	4b37      	ldr	r3, [pc, #220]	; (8002e24 <HAL_GPIO_Init+0x2d0>)
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	4935      	ldr	r1, [pc, #212]	; (8002e24 <HAL_GPIO_Init+0x2d0>)
 8002d4e:	4013      	ands	r3, r2
 8002d50:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d006      	beq.n	8002d6c <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d5e:	4b31      	ldr	r3, [pc, #196]	; (8002e24 <HAL_GPIO_Init+0x2d0>)
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	4930      	ldr	r1, [pc, #192]	; (8002e24 <HAL_GPIO_Init+0x2d0>)
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	604b      	str	r3, [r1, #4]
 8002d6a:	e006      	b.n	8002d7a <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d6c:	4b2d      	ldr	r3, [pc, #180]	; (8002e24 <HAL_GPIO_Init+0x2d0>)
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	43db      	mvns	r3, r3
 8002d74:	492b      	ldr	r1, [pc, #172]	; (8002e24 <HAL_GPIO_Init+0x2d0>)
 8002d76:	4013      	ands	r3, r2
 8002d78:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d006      	beq.n	8002d94 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d86:	4b27      	ldr	r3, [pc, #156]	; (8002e24 <HAL_GPIO_Init+0x2d0>)
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	4926      	ldr	r1, [pc, #152]	; (8002e24 <HAL_GPIO_Init+0x2d0>)
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	608b      	str	r3, [r1, #8]
 8002d92:	e006      	b.n	8002da2 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d94:	4b23      	ldr	r3, [pc, #140]	; (8002e24 <HAL_GPIO_Init+0x2d0>)
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	4921      	ldr	r1, [pc, #132]	; (8002e24 <HAL_GPIO_Init+0x2d0>)
 8002d9e:	4013      	ands	r3, r2
 8002da0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d006      	beq.n	8002dbc <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002dae:	4b1d      	ldr	r3, [pc, #116]	; (8002e24 <HAL_GPIO_Init+0x2d0>)
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	491c      	ldr	r1, [pc, #112]	; (8002e24 <HAL_GPIO_Init+0x2d0>)
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60cb      	str	r3, [r1, #12]
 8002dba:	e006      	b.n	8002dca <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002dbc:	4b19      	ldr	r3, [pc, #100]	; (8002e24 <HAL_GPIO_Init+0x2d0>)
 8002dbe:	68da      	ldr	r2, [r3, #12]
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	43db      	mvns	r3, r3
 8002dc4:	4917      	ldr	r1, [pc, #92]	; (8002e24 <HAL_GPIO_Init+0x2d0>)
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	3301      	adds	r3, #1
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f47f aec4 	bne.w	8002b68 <HAL_GPIO_Init+0x14>
  }
}
 8002de0:	bf00      	nop
 8002de2:	372c      	adds	r7, #44	; 0x2c
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bc80      	pop	{r7}
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	10210000 	.word	0x10210000
 8002df0:	10110000 	.word	0x10110000
 8002df4:	10120000 	.word	0x10120000
 8002df8:	10310000 	.word	0x10310000
 8002dfc:	10320000 	.word	0x10320000
 8002e00:	10220000 	.word	0x10220000
 8002e04:	40021000 	.word	0x40021000
 8002e08:	40010000 	.word	0x40010000
 8002e0c:	40010800 	.word	0x40010800
 8002e10:	40010c00 	.word	0x40010c00
 8002e14:	40011000 	.word	0x40011000
 8002e18:	40011400 	.word	0x40011400
 8002e1c:	40011800 	.word	0x40011800
 8002e20:	40011c00 	.word	0x40011c00
 8002e24:	40010400 	.word	0x40010400

08002e28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	807b      	strh	r3, [r7, #2]
 8002e34:	4613      	mov	r3, r2
 8002e36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e38:	787b      	ldrb	r3, [r7, #1]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e3e:	887a      	ldrh	r2, [r7, #2]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e44:	e003      	b.n	8002e4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e46:	887b      	ldrh	r3, [r7, #2]
 8002e48:	041a      	lsls	r2, r3, #16
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	611a      	str	r2, [r3, #16]
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr

08002e58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	4603      	mov	r3, r0
 8002e60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e62:	4b08      	ldr	r3, [pc, #32]	; (8002e84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e64:	695a      	ldr	r2, [r3, #20]
 8002e66:	88fb      	ldrh	r3, [r7, #6]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d006      	beq.n	8002e7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e6e:	4a05      	ldr	r2, [pc, #20]	; (8002e84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e70:	88fb      	ldrh	r3, [r7, #6]
 8002e72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e74:	88fb      	ldrh	r3, [r7, #6]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7fe fb7a 	bl	8001570 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e7c:	bf00      	nop
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40010400 	.word	0x40010400

08002e88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e26c      	b.n	8003374 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 8087 	beq.w	8002fb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ea8:	4b92      	ldr	r3, [pc, #584]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f003 030c 	and.w	r3, r3, #12
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d00c      	beq.n	8002ece <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002eb4:	4b8f      	ldr	r3, [pc, #572]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f003 030c 	and.w	r3, r3, #12
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	d112      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x5e>
 8002ec0:	4b8c      	ldr	r3, [pc, #560]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ecc:	d10b      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ece:	4b89      	ldr	r3, [pc, #548]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d06c      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x12c>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d168      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e246      	b.n	8003374 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eee:	d106      	bne.n	8002efe <HAL_RCC_OscConfig+0x76>
 8002ef0:	4b80      	ldr	r3, [pc, #512]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a7f      	ldr	r2, [pc, #508]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002ef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002efa:	6013      	str	r3, [r2, #0]
 8002efc:	e02e      	b.n	8002f5c <HAL_RCC_OscConfig+0xd4>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10c      	bne.n	8002f20 <HAL_RCC_OscConfig+0x98>
 8002f06:	4b7b      	ldr	r3, [pc, #492]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a7a      	ldr	r2, [pc, #488]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	4b78      	ldr	r3, [pc, #480]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a77      	ldr	r2, [pc, #476]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	e01d      	b.n	8002f5c <HAL_RCC_OscConfig+0xd4>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f28:	d10c      	bne.n	8002f44 <HAL_RCC_OscConfig+0xbc>
 8002f2a:	4b72      	ldr	r3, [pc, #456]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a71      	ldr	r2, [pc, #452]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	4b6f      	ldr	r3, [pc, #444]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a6e      	ldr	r2, [pc, #440]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	e00b      	b.n	8002f5c <HAL_RCC_OscConfig+0xd4>
 8002f44:	4b6b      	ldr	r3, [pc, #428]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a6a      	ldr	r2, [pc, #424]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f4e:	6013      	str	r3, [r2, #0]
 8002f50:	4b68      	ldr	r3, [pc, #416]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a67      	ldr	r2, [pc, #412]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d013      	beq.n	8002f8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f64:	f7fe fe08 	bl	8001b78 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f6c:	f7fe fe04 	bl	8001b78 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b64      	cmp	r3, #100	; 0x64
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e1fa      	b.n	8003374 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7e:	4b5d      	ldr	r3, [pc, #372]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0f0      	beq.n	8002f6c <HAL_RCC_OscConfig+0xe4>
 8002f8a:	e014      	b.n	8002fb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8c:	f7fe fdf4 	bl	8001b78 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f94:	f7fe fdf0 	bl	8001b78 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b64      	cmp	r3, #100	; 0x64
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e1e6      	b.n	8003374 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fa6:	4b53      	ldr	r3, [pc, #332]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f0      	bne.n	8002f94 <HAL_RCC_OscConfig+0x10c>
 8002fb2:	e000      	b.n	8002fb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d063      	beq.n	800308a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fc2:	4b4c      	ldr	r3, [pc, #304]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f003 030c 	and.w	r3, r3, #12
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00b      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002fce:	4b49      	ldr	r3, [pc, #292]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
 8002fd6:	2b08      	cmp	r3, #8
 8002fd8:	d11c      	bne.n	8003014 <HAL_RCC_OscConfig+0x18c>
 8002fda:	4b46      	ldr	r3, [pc, #280]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d116      	bne.n	8003014 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe6:	4b43      	ldr	r3, [pc, #268]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d005      	beq.n	8002ffe <HAL_RCC_OscConfig+0x176>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d001      	beq.n	8002ffe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e1ba      	b.n	8003374 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ffe:	4b3d      	ldr	r3, [pc, #244]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	4939      	ldr	r1, [pc, #228]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 800300e:	4313      	orrs	r3, r2
 8003010:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003012:	e03a      	b.n	800308a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d020      	beq.n	800305e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800301c:	4b36      	ldr	r3, [pc, #216]	; (80030f8 <HAL_RCC_OscConfig+0x270>)
 800301e:	2201      	movs	r2, #1
 8003020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003022:	f7fe fda9 	bl	8001b78 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800302a:	f7fe fda5 	bl	8001b78 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e19b      	b.n	8003374 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800303c:	4b2d      	ldr	r3, [pc, #180]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0f0      	beq.n	800302a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003048:	4b2a      	ldr	r3, [pc, #168]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	4927      	ldr	r1, [pc, #156]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8003058:	4313      	orrs	r3, r2
 800305a:	600b      	str	r3, [r1, #0]
 800305c:	e015      	b.n	800308a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800305e:	4b26      	ldr	r3, [pc, #152]	; (80030f8 <HAL_RCC_OscConfig+0x270>)
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003064:	f7fe fd88 	bl	8001b78 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800306c:	f7fe fd84 	bl	8001b78 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e17a      	b.n	8003374 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800307e:	4b1d      	ldr	r3, [pc, #116]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f0      	bne.n	800306c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0308 	and.w	r3, r3, #8
 8003092:	2b00      	cmp	r3, #0
 8003094:	d03a      	beq.n	800310c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d019      	beq.n	80030d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800309e:	4b17      	ldr	r3, [pc, #92]	; (80030fc <HAL_RCC_OscConfig+0x274>)
 80030a0:	2201      	movs	r2, #1
 80030a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a4:	f7fe fd68 	bl	8001b78 <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ac:	f7fe fd64 	bl	8001b78 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e15a      	b.n	8003374 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030be:	4b0d      	ldr	r3, [pc, #52]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0f0      	beq.n	80030ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030ca:	2001      	movs	r0, #1
 80030cc:	f000 fb2a 	bl	8003724 <RCC_Delay>
 80030d0:	e01c      	b.n	800310c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030d2:	4b0a      	ldr	r3, [pc, #40]	; (80030fc <HAL_RCC_OscConfig+0x274>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d8:	f7fe fd4e 	bl	8001b78 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030de:	e00f      	b.n	8003100 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030e0:	f7fe fd4a 	bl	8001b78 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d908      	bls.n	8003100 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e140      	b.n	8003374 <HAL_RCC_OscConfig+0x4ec>
 80030f2:	bf00      	nop
 80030f4:	40021000 	.word	0x40021000
 80030f8:	42420000 	.word	0x42420000
 80030fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003100:	4b9e      	ldr	r3, [pc, #632]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1e9      	bne.n	80030e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 80a6 	beq.w	8003266 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800311a:	2300      	movs	r3, #0
 800311c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800311e:	4b97      	ldr	r3, [pc, #604]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10d      	bne.n	8003146 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800312a:	4b94      	ldr	r3, [pc, #592]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	4a93      	ldr	r2, [pc, #588]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 8003130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003134:	61d3      	str	r3, [r2, #28]
 8003136:	4b91      	ldr	r3, [pc, #580]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313e:	60bb      	str	r3, [r7, #8]
 8003140:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003142:	2301      	movs	r3, #1
 8003144:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003146:	4b8e      	ldr	r3, [pc, #568]	; (8003380 <HAL_RCC_OscConfig+0x4f8>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314e:	2b00      	cmp	r3, #0
 8003150:	d118      	bne.n	8003184 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003152:	4b8b      	ldr	r3, [pc, #556]	; (8003380 <HAL_RCC_OscConfig+0x4f8>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a8a      	ldr	r2, [pc, #552]	; (8003380 <HAL_RCC_OscConfig+0x4f8>)
 8003158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800315c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800315e:	f7fe fd0b 	bl	8001b78 <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003166:	f7fe fd07 	bl	8001b78 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b64      	cmp	r3, #100	; 0x64
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e0fd      	b.n	8003374 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003178:	4b81      	ldr	r3, [pc, #516]	; (8003380 <HAL_RCC_OscConfig+0x4f8>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0f0      	beq.n	8003166 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d106      	bne.n	800319a <HAL_RCC_OscConfig+0x312>
 800318c:	4b7b      	ldr	r3, [pc, #492]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	4a7a      	ldr	r2, [pc, #488]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 8003192:	f043 0301 	orr.w	r3, r3, #1
 8003196:	6213      	str	r3, [r2, #32]
 8003198:	e02d      	b.n	80031f6 <HAL_RCC_OscConfig+0x36e>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10c      	bne.n	80031bc <HAL_RCC_OscConfig+0x334>
 80031a2:	4b76      	ldr	r3, [pc, #472]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	4a75      	ldr	r2, [pc, #468]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 80031a8:	f023 0301 	bic.w	r3, r3, #1
 80031ac:	6213      	str	r3, [r2, #32]
 80031ae:	4b73      	ldr	r3, [pc, #460]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	4a72      	ldr	r2, [pc, #456]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 80031b4:	f023 0304 	bic.w	r3, r3, #4
 80031b8:	6213      	str	r3, [r2, #32]
 80031ba:	e01c      	b.n	80031f6 <HAL_RCC_OscConfig+0x36e>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	2b05      	cmp	r3, #5
 80031c2:	d10c      	bne.n	80031de <HAL_RCC_OscConfig+0x356>
 80031c4:	4b6d      	ldr	r3, [pc, #436]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	4a6c      	ldr	r2, [pc, #432]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 80031ca:	f043 0304 	orr.w	r3, r3, #4
 80031ce:	6213      	str	r3, [r2, #32]
 80031d0:	4b6a      	ldr	r3, [pc, #424]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	4a69      	ldr	r2, [pc, #420]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 80031d6:	f043 0301 	orr.w	r3, r3, #1
 80031da:	6213      	str	r3, [r2, #32]
 80031dc:	e00b      	b.n	80031f6 <HAL_RCC_OscConfig+0x36e>
 80031de:	4b67      	ldr	r3, [pc, #412]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	4a66      	ldr	r2, [pc, #408]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 80031e4:	f023 0301 	bic.w	r3, r3, #1
 80031e8:	6213      	str	r3, [r2, #32]
 80031ea:	4b64      	ldr	r3, [pc, #400]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	4a63      	ldr	r2, [pc, #396]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 80031f0:	f023 0304 	bic.w	r3, r3, #4
 80031f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d015      	beq.n	800322a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031fe:	f7fe fcbb 	bl	8001b78 <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003204:	e00a      	b.n	800321c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003206:	f7fe fcb7 	bl	8001b78 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	f241 3288 	movw	r2, #5000	; 0x1388
 8003214:	4293      	cmp	r3, r2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e0ab      	b.n	8003374 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800321c:	4b57      	ldr	r3, [pc, #348]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0ee      	beq.n	8003206 <HAL_RCC_OscConfig+0x37e>
 8003228:	e014      	b.n	8003254 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800322a:	f7fe fca5 	bl	8001b78 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003230:	e00a      	b.n	8003248 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003232:	f7fe fca1 	bl	8001b78 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003240:	4293      	cmp	r3, r2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e095      	b.n	8003374 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003248:	4b4c      	ldr	r3, [pc, #304]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1ee      	bne.n	8003232 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003254:	7dfb      	ldrb	r3, [r7, #23]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d105      	bne.n	8003266 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800325a:	4b48      	ldr	r3, [pc, #288]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	4a47      	ldr	r2, [pc, #284]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 8003260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003264:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 8081 	beq.w	8003372 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003270:	4b42      	ldr	r3, [pc, #264]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 030c 	and.w	r3, r3, #12
 8003278:	2b08      	cmp	r3, #8
 800327a:	d061      	beq.n	8003340 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	2b02      	cmp	r3, #2
 8003282:	d146      	bne.n	8003312 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003284:	4b3f      	ldr	r3, [pc, #252]	; (8003384 <HAL_RCC_OscConfig+0x4fc>)
 8003286:	2200      	movs	r2, #0
 8003288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328a:	f7fe fc75 	bl	8001b78 <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003292:	f7fe fc71 	bl	8001b78 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e067      	b.n	8003374 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032a4:	4b35      	ldr	r3, [pc, #212]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1f0      	bne.n	8003292 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032b8:	d108      	bne.n	80032cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032ba:	4b30      	ldr	r3, [pc, #192]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	492d      	ldr	r1, [pc, #180]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032cc:	4b2b      	ldr	r3, [pc, #172]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a19      	ldr	r1, [r3, #32]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	430b      	orrs	r3, r1
 80032de:	4927      	ldr	r1, [pc, #156]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032e4:	4b27      	ldr	r3, [pc, #156]	; (8003384 <HAL_RCC_OscConfig+0x4fc>)
 80032e6:	2201      	movs	r2, #1
 80032e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ea:	f7fe fc45 	bl	8001b78 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f2:	f7fe fc41 	bl	8001b78 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e037      	b.n	8003374 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003304:	4b1d      	ldr	r3, [pc, #116]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0f0      	beq.n	80032f2 <HAL_RCC_OscConfig+0x46a>
 8003310:	e02f      	b.n	8003372 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003312:	4b1c      	ldr	r3, [pc, #112]	; (8003384 <HAL_RCC_OscConfig+0x4fc>)
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003318:	f7fe fc2e 	bl	8001b78 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003320:	f7fe fc2a 	bl	8001b78 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e020      	b.n	8003374 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003332:	4b12      	ldr	r3, [pc, #72]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1f0      	bne.n	8003320 <HAL_RCC_OscConfig+0x498>
 800333e:	e018      	b.n	8003372 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d101      	bne.n	800334c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e013      	b.n	8003374 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800334c:	4b0b      	ldr	r3, [pc, #44]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	429a      	cmp	r2, r3
 800335e:	d106      	bne.n	800336e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800336a:	429a      	cmp	r2, r3
 800336c:	d001      	beq.n	8003372 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e000      	b.n	8003374 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3718      	adds	r7, #24
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40021000 	.word	0x40021000
 8003380:	40007000 	.word	0x40007000
 8003384:	42420060 	.word	0x42420060

08003388 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d101      	bne.n	800339c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e0d0      	b.n	800353e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800339c:	4b6a      	ldr	r3, [pc, #424]	; (8003548 <HAL_RCC_ClockConfig+0x1c0>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d910      	bls.n	80033cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033aa:	4b67      	ldr	r3, [pc, #412]	; (8003548 <HAL_RCC_ClockConfig+0x1c0>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f023 0207 	bic.w	r2, r3, #7
 80033b2:	4965      	ldr	r1, [pc, #404]	; (8003548 <HAL_RCC_ClockConfig+0x1c0>)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ba:	4b63      	ldr	r3, [pc, #396]	; (8003548 <HAL_RCC_ClockConfig+0x1c0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d001      	beq.n	80033cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e0b8      	b.n	800353e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d020      	beq.n	800341a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d005      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033e4:	4b59      	ldr	r3, [pc, #356]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	4a58      	ldr	r2, [pc, #352]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 80033ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0308 	and.w	r3, r3, #8
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d005      	beq.n	8003408 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033fc:	4b53      	ldr	r3, [pc, #332]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	4a52      	ldr	r2, [pc, #328]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 8003402:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003406:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003408:	4b50      	ldr	r3, [pc, #320]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	494d      	ldr	r1, [pc, #308]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 8003416:	4313      	orrs	r3, r2
 8003418:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d040      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d107      	bne.n	800343e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800342e:	4b47      	ldr	r3, [pc, #284]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d115      	bne.n	8003466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e07f      	b.n	800353e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b02      	cmp	r3, #2
 8003444:	d107      	bne.n	8003456 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003446:	4b41      	ldr	r3, [pc, #260]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d109      	bne.n	8003466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e073      	b.n	800353e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003456:	4b3d      	ldr	r3, [pc, #244]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e06b      	b.n	800353e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003466:	4b39      	ldr	r3, [pc, #228]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f023 0203 	bic.w	r2, r3, #3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	4936      	ldr	r1, [pc, #216]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 8003474:	4313      	orrs	r3, r2
 8003476:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003478:	f7fe fb7e 	bl	8001b78 <HAL_GetTick>
 800347c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347e:	e00a      	b.n	8003496 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003480:	f7fe fb7a 	bl	8001b78 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	f241 3288 	movw	r2, #5000	; 0x1388
 800348e:	4293      	cmp	r3, r2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e053      	b.n	800353e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003496:	4b2d      	ldr	r3, [pc, #180]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f003 020c 	and.w	r2, r3, #12
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d1eb      	bne.n	8003480 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034a8:	4b27      	ldr	r3, [pc, #156]	; (8003548 <HAL_RCC_ClockConfig+0x1c0>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d210      	bcs.n	80034d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b6:	4b24      	ldr	r3, [pc, #144]	; (8003548 <HAL_RCC_ClockConfig+0x1c0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f023 0207 	bic.w	r2, r3, #7
 80034be:	4922      	ldr	r1, [pc, #136]	; (8003548 <HAL_RCC_ClockConfig+0x1c0>)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c6:	4b20      	ldr	r3, [pc, #128]	; (8003548 <HAL_RCC_ClockConfig+0x1c0>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0307 	and.w	r3, r3, #7
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d001      	beq.n	80034d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e032      	b.n	800353e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d008      	beq.n	80034f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034e4:	4b19      	ldr	r3, [pc, #100]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	4916      	ldr	r1, [pc, #88]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d009      	beq.n	8003516 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003502:	4b12      	ldr	r3, [pc, #72]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	490e      	ldr	r1, [pc, #56]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 8003512:	4313      	orrs	r3, r2
 8003514:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003516:	f000 f82d 	bl	8003574 <HAL_RCC_GetSysClockFreq>
 800351a:	4601      	mov	r1, r0
 800351c:	4b0b      	ldr	r3, [pc, #44]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	091b      	lsrs	r3, r3, #4
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	4a0a      	ldr	r2, [pc, #40]	; (8003550 <HAL_RCC_ClockConfig+0x1c8>)
 8003528:	5cd3      	ldrb	r3, [r2, r3]
 800352a:	fa21 f303 	lsr.w	r3, r1, r3
 800352e:	4a09      	ldr	r2, [pc, #36]	; (8003554 <HAL_RCC_ClockConfig+0x1cc>)
 8003530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003532:	4b09      	ldr	r3, [pc, #36]	; (8003558 <HAL_RCC_ClockConfig+0x1d0>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f7fe f94a 	bl	80017d0 <HAL_InitTick>

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	40022000 	.word	0x40022000
 800354c:	40021000 	.word	0x40021000
 8003550:	08007a54 	.word	0x08007a54
 8003554:	20000000 	.word	0x20000000
 8003558:	20000004 	.word	0x20000004

0800355c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003560:	4b03      	ldr	r3, [pc, #12]	; (8003570 <HAL_RCC_EnableCSS+0x14>)
 8003562:	2201      	movs	r2, #1
 8003564:	601a      	str	r2, [r3, #0]
}
 8003566:	bf00      	nop
 8003568:	46bd      	mov	sp, r7
 800356a:	bc80      	pop	{r7}
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	4242004c 	.word	0x4242004c

08003574 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003574:	b490      	push	{r4, r7}
 8003576:	b08a      	sub	sp, #40	; 0x28
 8003578:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800357a:	4b2a      	ldr	r3, [pc, #168]	; (8003624 <HAL_RCC_GetSysClockFreq+0xb0>)
 800357c:	1d3c      	adds	r4, r7, #4
 800357e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003580:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003584:	4b28      	ldr	r3, [pc, #160]	; (8003628 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800358a:	2300      	movs	r3, #0
 800358c:	61fb      	str	r3, [r7, #28]
 800358e:	2300      	movs	r3, #0
 8003590:	61bb      	str	r3, [r7, #24]
 8003592:	2300      	movs	r3, #0
 8003594:	627b      	str	r3, [r7, #36]	; 0x24
 8003596:	2300      	movs	r3, #0
 8003598:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800359a:	2300      	movs	r3, #0
 800359c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800359e:	4b23      	ldr	r3, [pc, #140]	; (800362c <HAL_RCC_GetSysClockFreq+0xb8>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	f003 030c 	and.w	r3, r3, #12
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d002      	beq.n	80035b4 <HAL_RCC_GetSysClockFreq+0x40>
 80035ae:	2b08      	cmp	r3, #8
 80035b0:	d003      	beq.n	80035ba <HAL_RCC_GetSysClockFreq+0x46>
 80035b2:	e02d      	b.n	8003610 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035b4:	4b1e      	ldr	r3, [pc, #120]	; (8003630 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035b6:	623b      	str	r3, [r7, #32]
      break;
 80035b8:	e02d      	b.n	8003616 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	0c9b      	lsrs	r3, r3, #18
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80035c6:	4413      	add	r3, r2
 80035c8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80035cc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d013      	beq.n	8003600 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035d8:	4b14      	ldr	r3, [pc, #80]	; (800362c <HAL_RCC_GetSysClockFreq+0xb8>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	0c5b      	lsrs	r3, r3, #17
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80035e6:	4413      	add	r3, r2
 80035e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80035ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	4a0f      	ldr	r2, [pc, #60]	; (8003630 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035f2:	fb02 f203 	mul.w	r2, r2, r3
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24
 80035fe:	e004      	b.n	800360a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	4a0c      	ldr	r2, [pc, #48]	; (8003634 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003604:	fb02 f303 	mul.w	r3, r2, r3
 8003608:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	623b      	str	r3, [r7, #32]
      break;
 800360e:	e002      	b.n	8003616 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003610:	4b07      	ldr	r3, [pc, #28]	; (8003630 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003612:	623b      	str	r3, [r7, #32]
      break;
 8003614:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003616:	6a3b      	ldr	r3, [r7, #32]
}
 8003618:	4618      	mov	r0, r3
 800361a:	3728      	adds	r7, #40	; 0x28
 800361c:	46bd      	mov	sp, r7
 800361e:	bc90      	pop	{r4, r7}
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	08007a40 	.word	0x08007a40
 8003628:	08007a50 	.word	0x08007a50
 800362c:	40021000 	.word	0x40021000
 8003630:	007a1200 	.word	0x007a1200
 8003634:	003d0900 	.word	0x003d0900

08003638 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800363c:	4b02      	ldr	r3, [pc, #8]	; (8003648 <HAL_RCC_GetHCLKFreq+0x10>)
 800363e:	681b      	ldr	r3, [r3, #0]
}
 8003640:	4618      	mov	r0, r3
 8003642:	46bd      	mov	sp, r7
 8003644:	bc80      	pop	{r7}
 8003646:	4770      	bx	lr
 8003648:	20000000 	.word	0x20000000

0800364c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003650:	f7ff fff2 	bl	8003638 <HAL_RCC_GetHCLKFreq>
 8003654:	4601      	mov	r1, r0
 8003656:	4b05      	ldr	r3, [pc, #20]	; (800366c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	0a1b      	lsrs	r3, r3, #8
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	4a03      	ldr	r2, [pc, #12]	; (8003670 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003662:	5cd3      	ldrb	r3, [r2, r3]
 8003664:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003668:	4618      	mov	r0, r3
 800366a:	bd80      	pop	{r7, pc}
 800366c:	40021000 	.word	0x40021000
 8003670:	08007a64 	.word	0x08007a64

08003674 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003678:	f7ff ffde 	bl	8003638 <HAL_RCC_GetHCLKFreq>
 800367c:	4601      	mov	r1, r0
 800367e:	4b05      	ldr	r3, [pc, #20]	; (8003694 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	0adb      	lsrs	r3, r3, #11
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	4a03      	ldr	r2, [pc, #12]	; (8003698 <HAL_RCC_GetPCLK2Freq+0x24>)
 800368a:	5cd3      	ldrb	r3, [r2, r3]
 800368c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003690:	4618      	mov	r0, r3
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40021000 	.word	0x40021000
 8003698:	08007a64 	.word	0x08007a64

0800369c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	220f      	movs	r2, #15
 80036aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036ac:	4b11      	ldr	r3, [pc, #68]	; (80036f4 <HAL_RCC_GetClockConfig+0x58>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f003 0203 	and.w	r2, r3, #3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80036b8:	4b0e      	ldr	r3, [pc, #56]	; (80036f4 <HAL_RCC_GetClockConfig+0x58>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80036c4:	4b0b      	ldr	r3, [pc, #44]	; (80036f4 <HAL_RCC_GetClockConfig+0x58>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80036d0:	4b08      	ldr	r3, [pc, #32]	; (80036f4 <HAL_RCC_GetClockConfig+0x58>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	08db      	lsrs	r3, r3, #3
 80036d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80036de:	4b06      	ldr	r3, [pc, #24]	; (80036f8 <HAL_RCC_GetClockConfig+0x5c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0207 	and.w	r2, r3, #7
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bc80      	pop	{r7}
 80036f2:	4770      	bx	lr
 80036f4:	40021000 	.word	0x40021000
 80036f8:	40022000 	.word	0x40022000

080036fc <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003700:	4b06      	ldr	r3, [pc, #24]	; (800371c <HAL_RCC_NMI_IRQHandler+0x20>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003708:	2b80      	cmp	r3, #128	; 0x80
 800370a:	d104      	bne.n	8003716 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800370c:	f000 f828 	bl	8003760 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003710:	4b03      	ldr	r3, [pc, #12]	; (8003720 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003712:	2280      	movs	r2, #128	; 0x80
 8003714:	701a      	strb	r2, [r3, #0]
  }
}
 8003716:	bf00      	nop
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40021000 	.word	0x40021000
 8003720:	4002100a 	.word	0x4002100a

08003724 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800372c:	4b0a      	ldr	r3, [pc, #40]	; (8003758 <RCC_Delay+0x34>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a0a      	ldr	r2, [pc, #40]	; (800375c <RCC_Delay+0x38>)
 8003732:	fba2 2303 	umull	r2, r3, r2, r3
 8003736:	0a5b      	lsrs	r3, r3, #9
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	fb02 f303 	mul.w	r3, r2, r3
 800373e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003740:	bf00      	nop
  }
  while (Delay --);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	1e5a      	subs	r2, r3, #1
 8003746:	60fa      	str	r2, [r7, #12]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1f9      	bne.n	8003740 <RCC_Delay+0x1c>
}
 800374c:	bf00      	nop
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	bc80      	pop	{r7}
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	20000000 	.word	0x20000000
 800375c:	10624dd3 	.word	0x10624dd3

08003760 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8003764:	bf00      	nop
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr

0800376c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003774:	2300      	movs	r3, #0
 8003776:	613b      	str	r3, [r7, #16]
 8003778:	2300      	movs	r3, #0
 800377a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	2b00      	cmp	r3, #0
 8003786:	d07d      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003788:	2300      	movs	r3, #0
 800378a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800378c:	4b4f      	ldr	r3, [pc, #316]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800378e:	69db      	ldr	r3, [r3, #28]
 8003790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10d      	bne.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003798:	4b4c      	ldr	r3, [pc, #304]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800379a:	69db      	ldr	r3, [r3, #28]
 800379c:	4a4b      	ldr	r2, [pc, #300]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800379e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a2:	61d3      	str	r3, [r2, #28]
 80037a4:	4b49      	ldr	r3, [pc, #292]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037a6:	69db      	ldr	r3, [r3, #28]
 80037a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ac:	60bb      	str	r3, [r7, #8]
 80037ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037b0:	2301      	movs	r3, #1
 80037b2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b4:	4b46      	ldr	r3, [pc, #280]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d118      	bne.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037c0:	4b43      	ldr	r3, [pc, #268]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a42      	ldr	r2, [pc, #264]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037cc:	f7fe f9d4 	bl	8001b78 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d2:	e008      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037d4:	f7fe f9d0 	bl	8001b78 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b64      	cmp	r3, #100	; 0x64
 80037e0:	d901      	bls.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e06d      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e6:	4b3a      	ldr	r3, [pc, #232]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0f0      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037f2:	4b36      	ldr	r3, [pc, #216]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037fa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d02e      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	429a      	cmp	r2, r3
 800380e:	d027      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003810:	4b2e      	ldr	r3, [pc, #184]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003818:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800381a:	4b2e      	ldr	r3, [pc, #184]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800381c:	2201      	movs	r2, #1
 800381e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003820:	4b2c      	ldr	r3, [pc, #176]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003822:	2200      	movs	r2, #0
 8003824:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003826:	4a29      	ldr	r2, [pc, #164]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	d014      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003836:	f7fe f99f 	bl	8001b78 <HAL_GetTick>
 800383a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800383c:	e00a      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800383e:	f7fe f99b 	bl	8001b78 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	f241 3288 	movw	r2, #5000	; 0x1388
 800384c:	4293      	cmp	r3, r2
 800384e:	d901      	bls.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e036      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003854:	4b1d      	ldr	r3, [pc, #116]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0ee      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003860:	4b1a      	ldr	r3, [pc, #104]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	4917      	ldr	r1, [pc, #92]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800386e:	4313      	orrs	r3, r2
 8003870:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003872:	7dfb      	ldrb	r3, [r7, #23]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d105      	bne.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003878:	4b14      	ldr	r3, [pc, #80]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	4a13      	ldr	r2, [pc, #76]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800387e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003882:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d008      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003890:	4b0e      	ldr	r3, [pc, #56]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	490b      	ldr	r1, [pc, #44]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0310 	and.w	r3, r3, #16
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d008      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038ae:	4b07      	ldr	r3, [pc, #28]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	4904      	ldr	r1, [pc, #16]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3718      	adds	r7, #24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	40021000 	.word	0x40021000
 80038d0:	40007000 	.word	0x40007000
 80038d4:	42420440 	.word	0x42420440

080038d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e01d      	b.n	8003926 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d106      	bne.n	8003904 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f815 	bl	800392e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3304      	adds	r3, #4
 8003914:	4619      	mov	r1, r3
 8003916:	4610      	mov	r0, r2
 8003918:	f000 f962 	bl	8003be0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800392e:	b480      	push	{r7}
 8003930:	b083      	sub	sp, #12
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	bc80      	pop	{r7}
 800393e:	4770      	bx	lr

08003940 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0201 	orr.w	r2, r2, #1
 8003956:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 0307 	and.w	r3, r3, #7
 8003962:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2b06      	cmp	r3, #6
 8003968:	d007      	beq.n	800397a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f042 0201 	orr.w	r2, r2, #1
 8003978:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	bc80      	pop	{r7}
 8003984:	4770      	bx	lr

08003986 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b082      	sub	sp, #8
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b02      	cmp	r3, #2
 800399a:	d122      	bne.n	80039e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d11b      	bne.n	80039e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f06f 0202 	mvn.w	r2, #2
 80039b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	f003 0303 	and.w	r3, r3, #3
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d003      	beq.n	80039d0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 f8ed 	bl	8003ba8 <HAL_TIM_IC_CaptureCallback>
 80039ce:	e005      	b.n	80039dc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f8e0 	bl	8003b96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f8ef 	bl	8003bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b04      	cmp	r3, #4
 80039ee:	d122      	bne.n	8003a36 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	f003 0304 	and.w	r3, r3, #4
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	d11b      	bne.n	8003a36 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f06f 0204 	mvn.w	r2, #4
 8003a06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 f8c3 	bl	8003ba8 <HAL_TIM_IC_CaptureCallback>
 8003a22:	e005      	b.n	8003a30 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f8b6 	bl	8003b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f8c5 	bl	8003bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	f003 0308 	and.w	r3, r3, #8
 8003a40:	2b08      	cmp	r3, #8
 8003a42:	d122      	bne.n	8003a8a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	2b08      	cmp	r3, #8
 8003a50:	d11b      	bne.n	8003a8a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f06f 0208 	mvn.w	r2, #8
 8003a5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2204      	movs	r2, #4
 8003a60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	f003 0303 	and.w	r3, r3, #3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d003      	beq.n	8003a78 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f899 	bl	8003ba8 <HAL_TIM_IC_CaptureCallback>
 8003a76:	e005      	b.n	8003a84 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 f88c 	bl	8003b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f89b 	bl	8003bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	f003 0310 	and.w	r3, r3, #16
 8003a94:	2b10      	cmp	r3, #16
 8003a96:	d122      	bne.n	8003ade <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	f003 0310 	and.w	r3, r3, #16
 8003aa2:	2b10      	cmp	r3, #16
 8003aa4:	d11b      	bne.n	8003ade <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f06f 0210 	mvn.w	r2, #16
 8003aae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2208      	movs	r2, #8
 8003ab4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	69db      	ldr	r3, [r3, #28]
 8003abc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f86f 	bl	8003ba8 <HAL_TIM_IC_CaptureCallback>
 8003aca:	e005      	b.n	8003ad8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f862 	bl	8003b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f871 	bl	8003bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d10e      	bne.n	8003b0a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d107      	bne.n	8003b0a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f06f 0201 	mvn.w	r2, #1
 8003b02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f7fd fe19 	bl	800173c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b14:	2b80      	cmp	r3, #128	; 0x80
 8003b16:	d10e      	bne.n	8003b36 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b22:	2b80      	cmp	r3, #128	; 0x80
 8003b24:	d107      	bne.n	8003b36 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 f8d8 	bl	8003ce6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b40:	2b40      	cmp	r3, #64	; 0x40
 8003b42:	d10e      	bne.n	8003b62 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4e:	2b40      	cmp	r3, #64	; 0x40
 8003b50:	d107      	bne.n	8003b62 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 f835 	bl	8003bcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	f003 0320 	and.w	r3, r3, #32
 8003b6c:	2b20      	cmp	r3, #32
 8003b6e:	d10e      	bne.n	8003b8e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	f003 0320 	and.w	r3, r3, #32
 8003b7a:	2b20      	cmp	r3, #32
 8003b7c:	d107      	bne.n	8003b8e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f06f 0220 	mvn.w	r2, #32
 8003b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f8a3 	bl	8003cd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b8e:	bf00      	nop
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bc80      	pop	{r7}
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bc80      	pop	{r7}
 8003bb8:	4770      	bx	lr

08003bba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bc2:	bf00      	nop
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr

08003bcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bc80      	pop	{r7}
 8003bdc:	4770      	bx	lr
	...

08003be0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a33      	ldr	r2, [pc, #204]	; (8003cc0 <TIM_Base_SetConfig+0xe0>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d013      	beq.n	8003c20 <TIM_Base_SetConfig+0x40>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a32      	ldr	r2, [pc, #200]	; (8003cc4 <TIM_Base_SetConfig+0xe4>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d00f      	beq.n	8003c20 <TIM_Base_SetConfig+0x40>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c06:	d00b      	beq.n	8003c20 <TIM_Base_SetConfig+0x40>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a2f      	ldr	r2, [pc, #188]	; (8003cc8 <TIM_Base_SetConfig+0xe8>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d007      	beq.n	8003c20 <TIM_Base_SetConfig+0x40>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a2e      	ldr	r2, [pc, #184]	; (8003ccc <TIM_Base_SetConfig+0xec>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d003      	beq.n	8003c20 <TIM_Base_SetConfig+0x40>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a2d      	ldr	r2, [pc, #180]	; (8003cd0 <TIM_Base_SetConfig+0xf0>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d108      	bne.n	8003c32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a22      	ldr	r2, [pc, #136]	; (8003cc0 <TIM_Base_SetConfig+0xe0>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d013      	beq.n	8003c62 <TIM_Base_SetConfig+0x82>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a21      	ldr	r2, [pc, #132]	; (8003cc4 <TIM_Base_SetConfig+0xe4>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d00f      	beq.n	8003c62 <TIM_Base_SetConfig+0x82>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c48:	d00b      	beq.n	8003c62 <TIM_Base_SetConfig+0x82>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a1e      	ldr	r2, [pc, #120]	; (8003cc8 <TIM_Base_SetConfig+0xe8>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d007      	beq.n	8003c62 <TIM_Base_SetConfig+0x82>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a1d      	ldr	r2, [pc, #116]	; (8003ccc <TIM_Base_SetConfig+0xec>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d003      	beq.n	8003c62 <TIM_Base_SetConfig+0x82>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a1c      	ldr	r2, [pc, #112]	; (8003cd0 <TIM_Base_SetConfig+0xf0>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d108      	bne.n	8003c74 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a09      	ldr	r2, [pc, #36]	; (8003cc0 <TIM_Base_SetConfig+0xe0>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d003      	beq.n	8003ca8 <TIM_Base_SetConfig+0xc8>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a08      	ldr	r2, [pc, #32]	; (8003cc4 <TIM_Base_SetConfig+0xe4>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d103      	bne.n	8003cb0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	691a      	ldr	r2, [r3, #16]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	615a      	str	r2, [r3, #20]
}
 8003cb6:	bf00      	nop
 8003cb8:	3714      	adds	r7, #20
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bc80      	pop	{r7}
 8003cbe:	4770      	bx	lr
 8003cc0:	40012c00 	.word	0x40012c00
 8003cc4:	40013400 	.word	0x40013400
 8003cc8:	40000400 	.word	0x40000400
 8003ccc:	40000800 	.word	0x40000800
 8003cd0:	40000c00 	.word	0x40000c00

08003cd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bc80      	pop	{r7}
 8003ce4:	4770      	bx	lr

08003ce6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bc80      	pop	{r7}
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e03f      	b.n	8003d8a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d106      	bne.n	8003d24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7fd fe90 	bl	8001a44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2224      	movs	r2, #36	; 0x24
 8003d28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f829 	bl	8003d94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	691a      	ldr	r2, [r3, #16]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	695a      	ldr	r2, [r3, #20]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68da      	ldr	r2, [r3, #12]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
	...

08003d94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68da      	ldr	r2, [r3, #12]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689a      	ldr	r2, [r3, #8]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003dce:	f023 030c 	bic.w	r3, r3, #12
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6812      	ldr	r2, [r2, #0]
 8003dd6:	68f9      	ldr	r1, [r7, #12]
 8003dd8:	430b      	orrs	r3, r1
 8003dda:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	699a      	ldr	r2, [r3, #24]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a52      	ldr	r2, [pc, #328]	; (8003f40 <UART_SetConfig+0x1ac>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d14e      	bne.n	8003e9a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003dfc:	f7ff fc3a 	bl	8003674 <HAL_RCC_GetPCLK2Freq>
 8003e00:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	4613      	mov	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4413      	add	r3, r2
 8003e0a:	009a      	lsls	r2, r3, #2
 8003e0c:	441a      	add	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e18:	4a4a      	ldr	r2, [pc, #296]	; (8003f44 <UART_SetConfig+0x1b0>)
 8003e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1e:	095b      	lsrs	r3, r3, #5
 8003e20:	0119      	lsls	r1, r3, #4
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	4613      	mov	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	009a      	lsls	r2, r3, #2
 8003e2c:	441a      	add	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e38:	4b42      	ldr	r3, [pc, #264]	; (8003f44 <UART_SetConfig+0x1b0>)
 8003e3a:	fba3 0302 	umull	r0, r3, r3, r2
 8003e3e:	095b      	lsrs	r3, r3, #5
 8003e40:	2064      	movs	r0, #100	; 0x64
 8003e42:	fb00 f303 	mul.w	r3, r0, r3
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	3332      	adds	r3, #50	; 0x32
 8003e4c:	4a3d      	ldr	r2, [pc, #244]	; (8003f44 <UART_SetConfig+0x1b0>)
 8003e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e52:	095b      	lsrs	r3, r3, #5
 8003e54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e58:	4419      	add	r1, r3
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4413      	add	r3, r2
 8003e62:	009a      	lsls	r2, r3, #2
 8003e64:	441a      	add	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e70:	4b34      	ldr	r3, [pc, #208]	; (8003f44 <UART_SetConfig+0x1b0>)
 8003e72:	fba3 0302 	umull	r0, r3, r3, r2
 8003e76:	095b      	lsrs	r3, r3, #5
 8003e78:	2064      	movs	r0, #100	; 0x64
 8003e7a:	fb00 f303 	mul.w	r3, r0, r3
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	011b      	lsls	r3, r3, #4
 8003e82:	3332      	adds	r3, #50	; 0x32
 8003e84:	4a2f      	ldr	r2, [pc, #188]	; (8003f44 <UART_SetConfig+0x1b0>)
 8003e86:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8a:	095b      	lsrs	r3, r3, #5
 8003e8c:	f003 020f 	and.w	r2, r3, #15
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	440a      	add	r2, r1
 8003e96:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003e98:	e04d      	b.n	8003f36 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e9a:	f7ff fbd7 	bl	800364c <HAL_RCC_GetPCLK1Freq>
 8003e9e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4413      	add	r3, r2
 8003ea8:	009a      	lsls	r2, r3, #2
 8003eaa:	441a      	add	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb6:	4a23      	ldr	r2, [pc, #140]	; (8003f44 <UART_SetConfig+0x1b0>)
 8003eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebc:	095b      	lsrs	r3, r3, #5
 8003ebe:	0119      	lsls	r1, r3, #4
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	009a      	lsls	r2, r3, #2
 8003eca:	441a      	add	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ed6:	4b1b      	ldr	r3, [pc, #108]	; (8003f44 <UART_SetConfig+0x1b0>)
 8003ed8:	fba3 0302 	umull	r0, r3, r3, r2
 8003edc:	095b      	lsrs	r3, r3, #5
 8003ede:	2064      	movs	r0, #100	; 0x64
 8003ee0:	fb00 f303 	mul.w	r3, r0, r3
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	011b      	lsls	r3, r3, #4
 8003ee8:	3332      	adds	r3, #50	; 0x32
 8003eea:	4a16      	ldr	r2, [pc, #88]	; (8003f44 <UART_SetConfig+0x1b0>)
 8003eec:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef0:	095b      	lsrs	r3, r3, #5
 8003ef2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ef6:	4419      	add	r1, r3
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	4613      	mov	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	009a      	lsls	r2, r3, #2
 8003f02:	441a      	add	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f0e:	4b0d      	ldr	r3, [pc, #52]	; (8003f44 <UART_SetConfig+0x1b0>)
 8003f10:	fba3 0302 	umull	r0, r3, r3, r2
 8003f14:	095b      	lsrs	r3, r3, #5
 8003f16:	2064      	movs	r0, #100	; 0x64
 8003f18:	fb00 f303 	mul.w	r3, r0, r3
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	011b      	lsls	r3, r3, #4
 8003f20:	3332      	adds	r3, #50	; 0x32
 8003f22:	4a08      	ldr	r2, [pc, #32]	; (8003f44 <UART_SetConfig+0x1b0>)
 8003f24:	fba2 2303 	umull	r2, r3, r2, r3
 8003f28:	095b      	lsrs	r3, r3, #5
 8003f2a:	f003 020f 	and.w	r2, r3, #15
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	440a      	add	r2, r1
 8003f34:	609a      	str	r2, [r3, #8]
}
 8003f36:	bf00      	nop
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	40013800 	.word	0x40013800
 8003f44:	51eb851f 	.word	0x51eb851f

08003f48 <__errno>:
 8003f48:	4b01      	ldr	r3, [pc, #4]	; (8003f50 <__errno+0x8>)
 8003f4a:	6818      	ldr	r0, [r3, #0]
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	2000000c 	.word	0x2000000c

08003f54 <__libc_init_array>:
 8003f54:	b570      	push	{r4, r5, r6, lr}
 8003f56:	2500      	movs	r5, #0
 8003f58:	4e0c      	ldr	r6, [pc, #48]	; (8003f8c <__libc_init_array+0x38>)
 8003f5a:	4c0d      	ldr	r4, [pc, #52]	; (8003f90 <__libc_init_array+0x3c>)
 8003f5c:	1ba4      	subs	r4, r4, r6
 8003f5e:	10a4      	asrs	r4, r4, #2
 8003f60:	42a5      	cmp	r5, r4
 8003f62:	d109      	bne.n	8003f78 <__libc_init_array+0x24>
 8003f64:	f003 fd5e 	bl	8007a24 <_init>
 8003f68:	2500      	movs	r5, #0
 8003f6a:	4e0a      	ldr	r6, [pc, #40]	; (8003f94 <__libc_init_array+0x40>)
 8003f6c:	4c0a      	ldr	r4, [pc, #40]	; (8003f98 <__libc_init_array+0x44>)
 8003f6e:	1ba4      	subs	r4, r4, r6
 8003f70:	10a4      	asrs	r4, r4, #2
 8003f72:	42a5      	cmp	r5, r4
 8003f74:	d105      	bne.n	8003f82 <__libc_init_array+0x2e>
 8003f76:	bd70      	pop	{r4, r5, r6, pc}
 8003f78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f7c:	4798      	blx	r3
 8003f7e:	3501      	adds	r5, #1
 8003f80:	e7ee      	b.n	8003f60 <__libc_init_array+0xc>
 8003f82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f86:	4798      	blx	r3
 8003f88:	3501      	adds	r5, #1
 8003f8a:	e7f2      	b.n	8003f72 <__libc_init_array+0x1e>
 8003f8c:	08007d20 	.word	0x08007d20
 8003f90:	08007d20 	.word	0x08007d20
 8003f94:	08007d20 	.word	0x08007d20
 8003f98:	08007d24 	.word	0x08007d24

08003f9c <memset>:
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	4402      	add	r2, r0
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d100      	bne.n	8003fa6 <memset+0xa>
 8003fa4:	4770      	bx	lr
 8003fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8003faa:	e7f9      	b.n	8003fa0 <memset+0x4>

08003fac <__cvt>:
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fb2:	461e      	mov	r6, r3
 8003fb4:	bfbb      	ittet	lt
 8003fb6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003fba:	461e      	movlt	r6, r3
 8003fbc:	2300      	movge	r3, #0
 8003fbe:	232d      	movlt	r3, #45	; 0x2d
 8003fc0:	b088      	sub	sp, #32
 8003fc2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003fc4:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8003fc8:	f027 0720 	bic.w	r7, r7, #32
 8003fcc:	2f46      	cmp	r7, #70	; 0x46
 8003fce:	4614      	mov	r4, r2
 8003fd0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003fd2:	700b      	strb	r3, [r1, #0]
 8003fd4:	d004      	beq.n	8003fe0 <__cvt+0x34>
 8003fd6:	2f45      	cmp	r7, #69	; 0x45
 8003fd8:	d100      	bne.n	8003fdc <__cvt+0x30>
 8003fda:	3501      	adds	r5, #1
 8003fdc:	2302      	movs	r3, #2
 8003fde:	e000      	b.n	8003fe2 <__cvt+0x36>
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	aa07      	add	r2, sp, #28
 8003fe4:	9204      	str	r2, [sp, #16]
 8003fe6:	aa06      	add	r2, sp, #24
 8003fe8:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003fec:	e9cd 3500 	strd	r3, r5, [sp]
 8003ff0:	4622      	mov	r2, r4
 8003ff2:	4633      	mov	r3, r6
 8003ff4:	f001 fd7c 	bl	8005af0 <_dtoa_r>
 8003ff8:	2f47      	cmp	r7, #71	; 0x47
 8003ffa:	4680      	mov	r8, r0
 8003ffc:	d102      	bne.n	8004004 <__cvt+0x58>
 8003ffe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004000:	07db      	lsls	r3, r3, #31
 8004002:	d526      	bpl.n	8004052 <__cvt+0xa6>
 8004004:	2f46      	cmp	r7, #70	; 0x46
 8004006:	eb08 0905 	add.w	r9, r8, r5
 800400a:	d111      	bne.n	8004030 <__cvt+0x84>
 800400c:	f898 3000 	ldrb.w	r3, [r8]
 8004010:	2b30      	cmp	r3, #48	; 0x30
 8004012:	d10a      	bne.n	800402a <__cvt+0x7e>
 8004014:	2200      	movs	r2, #0
 8004016:	2300      	movs	r3, #0
 8004018:	4620      	mov	r0, r4
 800401a:	4631      	mov	r1, r6
 800401c:	f7fc fd30 	bl	8000a80 <__aeabi_dcmpeq>
 8004020:	b918      	cbnz	r0, 800402a <__cvt+0x7e>
 8004022:	f1c5 0501 	rsb	r5, r5, #1
 8004026:	f8ca 5000 	str.w	r5, [sl]
 800402a:	f8da 3000 	ldr.w	r3, [sl]
 800402e:	4499      	add	r9, r3
 8004030:	2200      	movs	r2, #0
 8004032:	2300      	movs	r3, #0
 8004034:	4620      	mov	r0, r4
 8004036:	4631      	mov	r1, r6
 8004038:	f7fc fd22 	bl	8000a80 <__aeabi_dcmpeq>
 800403c:	b938      	cbnz	r0, 800404e <__cvt+0xa2>
 800403e:	2230      	movs	r2, #48	; 0x30
 8004040:	9b07      	ldr	r3, [sp, #28]
 8004042:	454b      	cmp	r3, r9
 8004044:	d205      	bcs.n	8004052 <__cvt+0xa6>
 8004046:	1c59      	adds	r1, r3, #1
 8004048:	9107      	str	r1, [sp, #28]
 800404a:	701a      	strb	r2, [r3, #0]
 800404c:	e7f8      	b.n	8004040 <__cvt+0x94>
 800404e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004052:	4640      	mov	r0, r8
 8004054:	9b07      	ldr	r3, [sp, #28]
 8004056:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004058:	eba3 0308 	sub.w	r3, r3, r8
 800405c:	6013      	str	r3, [r2, #0]
 800405e:	b008      	add	sp, #32
 8004060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004064 <__exponent>:
 8004064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004066:	2900      	cmp	r1, #0
 8004068:	bfb4      	ite	lt
 800406a:	232d      	movlt	r3, #45	; 0x2d
 800406c:	232b      	movge	r3, #43	; 0x2b
 800406e:	4604      	mov	r4, r0
 8004070:	bfb8      	it	lt
 8004072:	4249      	neglt	r1, r1
 8004074:	2909      	cmp	r1, #9
 8004076:	f804 2b02 	strb.w	r2, [r4], #2
 800407a:	7043      	strb	r3, [r0, #1]
 800407c:	dd21      	ble.n	80040c2 <__exponent+0x5e>
 800407e:	f10d 0307 	add.w	r3, sp, #7
 8004082:	461f      	mov	r7, r3
 8004084:	260a      	movs	r6, #10
 8004086:	fb91 f5f6 	sdiv	r5, r1, r6
 800408a:	fb06 1115 	mls	r1, r6, r5, r1
 800408e:	2d09      	cmp	r5, #9
 8004090:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004094:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004098:	f103 32ff 	add.w	r2, r3, #4294967295
 800409c:	4629      	mov	r1, r5
 800409e:	dc09      	bgt.n	80040b4 <__exponent+0x50>
 80040a0:	3130      	adds	r1, #48	; 0x30
 80040a2:	3b02      	subs	r3, #2
 80040a4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80040a8:	42bb      	cmp	r3, r7
 80040aa:	4622      	mov	r2, r4
 80040ac:	d304      	bcc.n	80040b8 <__exponent+0x54>
 80040ae:	1a10      	subs	r0, r2, r0
 80040b0:	b003      	add	sp, #12
 80040b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040b4:	4613      	mov	r3, r2
 80040b6:	e7e6      	b.n	8004086 <__exponent+0x22>
 80040b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040bc:	f804 2b01 	strb.w	r2, [r4], #1
 80040c0:	e7f2      	b.n	80040a8 <__exponent+0x44>
 80040c2:	2330      	movs	r3, #48	; 0x30
 80040c4:	4419      	add	r1, r3
 80040c6:	7083      	strb	r3, [r0, #2]
 80040c8:	1d02      	adds	r2, r0, #4
 80040ca:	70c1      	strb	r1, [r0, #3]
 80040cc:	e7ef      	b.n	80040ae <__exponent+0x4a>
	...

080040d0 <_printf_float>:
 80040d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040d4:	b091      	sub	sp, #68	; 0x44
 80040d6:	460c      	mov	r4, r1
 80040d8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80040da:	4693      	mov	fp, r2
 80040dc:	461e      	mov	r6, r3
 80040de:	4605      	mov	r5, r0
 80040e0:	f002 fde8 	bl	8006cb4 <_localeconv_r>
 80040e4:	6803      	ldr	r3, [r0, #0]
 80040e6:	4618      	mov	r0, r3
 80040e8:	9309      	str	r3, [sp, #36]	; 0x24
 80040ea:	f7fc f89d 	bl	8000228 <strlen>
 80040ee:	2300      	movs	r3, #0
 80040f0:	930e      	str	r3, [sp, #56]	; 0x38
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	900a      	str	r0, [sp, #40]	; 0x28
 80040f6:	3307      	adds	r3, #7
 80040f8:	f023 0307 	bic.w	r3, r3, #7
 80040fc:	f103 0208 	add.w	r2, r3, #8
 8004100:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004104:	f8d4 a000 	ldr.w	sl, [r4]
 8004108:	603a      	str	r2, [r7, #0]
 800410a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004112:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8004116:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800411a:	930b      	str	r3, [sp, #44]	; 0x2c
 800411c:	f04f 32ff 	mov.w	r2, #4294967295
 8004120:	4ba6      	ldr	r3, [pc, #664]	; (80043bc <_printf_float+0x2ec>)
 8004122:	4638      	mov	r0, r7
 8004124:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004126:	f7fc fcdd 	bl	8000ae4 <__aeabi_dcmpun>
 800412a:	bb68      	cbnz	r0, 8004188 <_printf_float+0xb8>
 800412c:	f04f 32ff 	mov.w	r2, #4294967295
 8004130:	4ba2      	ldr	r3, [pc, #648]	; (80043bc <_printf_float+0x2ec>)
 8004132:	4638      	mov	r0, r7
 8004134:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004136:	f7fc fcb7 	bl	8000aa8 <__aeabi_dcmple>
 800413a:	bb28      	cbnz	r0, 8004188 <_printf_float+0xb8>
 800413c:	2200      	movs	r2, #0
 800413e:	2300      	movs	r3, #0
 8004140:	4638      	mov	r0, r7
 8004142:	4649      	mov	r1, r9
 8004144:	f7fc fca6 	bl	8000a94 <__aeabi_dcmplt>
 8004148:	b110      	cbz	r0, 8004150 <_printf_float+0x80>
 800414a:	232d      	movs	r3, #45	; 0x2d
 800414c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004150:	4f9b      	ldr	r7, [pc, #620]	; (80043c0 <_printf_float+0x2f0>)
 8004152:	4b9c      	ldr	r3, [pc, #624]	; (80043c4 <_printf_float+0x2f4>)
 8004154:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004158:	bf98      	it	ls
 800415a:	461f      	movls	r7, r3
 800415c:	2303      	movs	r3, #3
 800415e:	f04f 0900 	mov.w	r9, #0
 8004162:	6123      	str	r3, [r4, #16]
 8004164:	f02a 0304 	bic.w	r3, sl, #4
 8004168:	6023      	str	r3, [r4, #0]
 800416a:	9600      	str	r6, [sp, #0]
 800416c:	465b      	mov	r3, fp
 800416e:	aa0f      	add	r2, sp, #60	; 0x3c
 8004170:	4621      	mov	r1, r4
 8004172:	4628      	mov	r0, r5
 8004174:	f000 f9e2 	bl	800453c <_printf_common>
 8004178:	3001      	adds	r0, #1
 800417a:	f040 8090 	bne.w	800429e <_printf_float+0x1ce>
 800417e:	f04f 30ff 	mov.w	r0, #4294967295
 8004182:	b011      	add	sp, #68	; 0x44
 8004184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004188:	463a      	mov	r2, r7
 800418a:	464b      	mov	r3, r9
 800418c:	4638      	mov	r0, r7
 800418e:	4649      	mov	r1, r9
 8004190:	f7fc fca8 	bl	8000ae4 <__aeabi_dcmpun>
 8004194:	b110      	cbz	r0, 800419c <_printf_float+0xcc>
 8004196:	4f8c      	ldr	r7, [pc, #560]	; (80043c8 <_printf_float+0x2f8>)
 8004198:	4b8c      	ldr	r3, [pc, #560]	; (80043cc <_printf_float+0x2fc>)
 800419a:	e7db      	b.n	8004154 <_printf_float+0x84>
 800419c:	6863      	ldr	r3, [r4, #4]
 800419e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80041a2:	1c59      	adds	r1, r3, #1
 80041a4:	a80d      	add	r0, sp, #52	; 0x34
 80041a6:	a90e      	add	r1, sp, #56	; 0x38
 80041a8:	d140      	bne.n	800422c <_printf_float+0x15c>
 80041aa:	2306      	movs	r3, #6
 80041ac:	6063      	str	r3, [r4, #4]
 80041ae:	f04f 0c00 	mov.w	ip, #0
 80041b2:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80041b6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80041ba:	6863      	ldr	r3, [r4, #4]
 80041bc:	6022      	str	r2, [r4, #0]
 80041be:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	463a      	mov	r2, r7
 80041c6:	464b      	mov	r3, r9
 80041c8:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80041cc:	4628      	mov	r0, r5
 80041ce:	f7ff feed 	bl	8003fac <__cvt>
 80041d2:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80041d6:	2b47      	cmp	r3, #71	; 0x47
 80041d8:	4607      	mov	r7, r0
 80041da:	d109      	bne.n	80041f0 <_printf_float+0x120>
 80041dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80041de:	1cd8      	adds	r0, r3, #3
 80041e0:	db02      	blt.n	80041e8 <_printf_float+0x118>
 80041e2:	6862      	ldr	r2, [r4, #4]
 80041e4:	4293      	cmp	r3, r2
 80041e6:	dd47      	ble.n	8004278 <_printf_float+0x1a8>
 80041e8:	f1a8 0802 	sub.w	r8, r8, #2
 80041ec:	fa5f f888 	uxtb.w	r8, r8
 80041f0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80041f4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80041f6:	d824      	bhi.n	8004242 <_printf_float+0x172>
 80041f8:	3901      	subs	r1, #1
 80041fa:	4642      	mov	r2, r8
 80041fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004200:	910d      	str	r1, [sp, #52]	; 0x34
 8004202:	f7ff ff2f 	bl	8004064 <__exponent>
 8004206:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004208:	4681      	mov	r9, r0
 800420a:	1813      	adds	r3, r2, r0
 800420c:	2a01      	cmp	r2, #1
 800420e:	6123      	str	r3, [r4, #16]
 8004210:	dc02      	bgt.n	8004218 <_printf_float+0x148>
 8004212:	6822      	ldr	r2, [r4, #0]
 8004214:	07d1      	lsls	r1, r2, #31
 8004216:	d501      	bpl.n	800421c <_printf_float+0x14c>
 8004218:	3301      	adds	r3, #1
 800421a:	6123      	str	r3, [r4, #16]
 800421c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0a2      	beq.n	800416a <_printf_float+0x9a>
 8004224:	232d      	movs	r3, #45	; 0x2d
 8004226:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800422a:	e79e      	b.n	800416a <_printf_float+0x9a>
 800422c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004230:	f000 816e 	beq.w	8004510 <_printf_float+0x440>
 8004234:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004238:	d1b9      	bne.n	80041ae <_printf_float+0xde>
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1b7      	bne.n	80041ae <_printf_float+0xde>
 800423e:	2301      	movs	r3, #1
 8004240:	e7b4      	b.n	80041ac <_printf_float+0xdc>
 8004242:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8004246:	d119      	bne.n	800427c <_printf_float+0x1ac>
 8004248:	2900      	cmp	r1, #0
 800424a:	6863      	ldr	r3, [r4, #4]
 800424c:	dd0c      	ble.n	8004268 <_printf_float+0x198>
 800424e:	6121      	str	r1, [r4, #16]
 8004250:	b913      	cbnz	r3, 8004258 <_printf_float+0x188>
 8004252:	6822      	ldr	r2, [r4, #0]
 8004254:	07d2      	lsls	r2, r2, #31
 8004256:	d502      	bpl.n	800425e <_printf_float+0x18e>
 8004258:	3301      	adds	r3, #1
 800425a:	440b      	add	r3, r1
 800425c:	6123      	str	r3, [r4, #16]
 800425e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004260:	f04f 0900 	mov.w	r9, #0
 8004264:	65a3      	str	r3, [r4, #88]	; 0x58
 8004266:	e7d9      	b.n	800421c <_printf_float+0x14c>
 8004268:	b913      	cbnz	r3, 8004270 <_printf_float+0x1a0>
 800426a:	6822      	ldr	r2, [r4, #0]
 800426c:	07d0      	lsls	r0, r2, #31
 800426e:	d501      	bpl.n	8004274 <_printf_float+0x1a4>
 8004270:	3302      	adds	r3, #2
 8004272:	e7f3      	b.n	800425c <_printf_float+0x18c>
 8004274:	2301      	movs	r3, #1
 8004276:	e7f1      	b.n	800425c <_printf_float+0x18c>
 8004278:	f04f 0867 	mov.w	r8, #103	; 0x67
 800427c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004280:	4293      	cmp	r3, r2
 8004282:	db05      	blt.n	8004290 <_printf_float+0x1c0>
 8004284:	6822      	ldr	r2, [r4, #0]
 8004286:	6123      	str	r3, [r4, #16]
 8004288:	07d1      	lsls	r1, r2, #31
 800428a:	d5e8      	bpl.n	800425e <_printf_float+0x18e>
 800428c:	3301      	adds	r3, #1
 800428e:	e7e5      	b.n	800425c <_printf_float+0x18c>
 8004290:	2b00      	cmp	r3, #0
 8004292:	bfcc      	ite	gt
 8004294:	2301      	movgt	r3, #1
 8004296:	f1c3 0302 	rsble	r3, r3, #2
 800429a:	4413      	add	r3, r2
 800429c:	e7de      	b.n	800425c <_printf_float+0x18c>
 800429e:	6823      	ldr	r3, [r4, #0]
 80042a0:	055a      	lsls	r2, r3, #21
 80042a2:	d407      	bmi.n	80042b4 <_printf_float+0x1e4>
 80042a4:	6923      	ldr	r3, [r4, #16]
 80042a6:	463a      	mov	r2, r7
 80042a8:	4659      	mov	r1, fp
 80042aa:	4628      	mov	r0, r5
 80042ac:	47b0      	blx	r6
 80042ae:	3001      	adds	r0, #1
 80042b0:	d129      	bne.n	8004306 <_printf_float+0x236>
 80042b2:	e764      	b.n	800417e <_printf_float+0xae>
 80042b4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80042b8:	f240 80d7 	bls.w	800446a <_printf_float+0x39a>
 80042bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80042c0:	2200      	movs	r2, #0
 80042c2:	2300      	movs	r3, #0
 80042c4:	f7fc fbdc 	bl	8000a80 <__aeabi_dcmpeq>
 80042c8:	b388      	cbz	r0, 800432e <_printf_float+0x25e>
 80042ca:	2301      	movs	r3, #1
 80042cc:	4a40      	ldr	r2, [pc, #256]	; (80043d0 <_printf_float+0x300>)
 80042ce:	4659      	mov	r1, fp
 80042d0:	4628      	mov	r0, r5
 80042d2:	47b0      	blx	r6
 80042d4:	3001      	adds	r0, #1
 80042d6:	f43f af52 	beq.w	800417e <_printf_float+0xae>
 80042da:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80042de:	429a      	cmp	r2, r3
 80042e0:	db02      	blt.n	80042e8 <_printf_float+0x218>
 80042e2:	6823      	ldr	r3, [r4, #0]
 80042e4:	07d8      	lsls	r0, r3, #31
 80042e6:	d50e      	bpl.n	8004306 <_printf_float+0x236>
 80042e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042ec:	4659      	mov	r1, fp
 80042ee:	4628      	mov	r0, r5
 80042f0:	47b0      	blx	r6
 80042f2:	3001      	adds	r0, #1
 80042f4:	f43f af43 	beq.w	800417e <_printf_float+0xae>
 80042f8:	2700      	movs	r7, #0
 80042fa:	f104 081a 	add.w	r8, r4, #26
 80042fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004300:	3b01      	subs	r3, #1
 8004302:	42bb      	cmp	r3, r7
 8004304:	dc09      	bgt.n	800431a <_printf_float+0x24a>
 8004306:	6823      	ldr	r3, [r4, #0]
 8004308:	079f      	lsls	r7, r3, #30
 800430a:	f100 80fd 	bmi.w	8004508 <_printf_float+0x438>
 800430e:	68e0      	ldr	r0, [r4, #12]
 8004310:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004312:	4298      	cmp	r0, r3
 8004314:	bfb8      	it	lt
 8004316:	4618      	movlt	r0, r3
 8004318:	e733      	b.n	8004182 <_printf_float+0xb2>
 800431a:	2301      	movs	r3, #1
 800431c:	4642      	mov	r2, r8
 800431e:	4659      	mov	r1, fp
 8004320:	4628      	mov	r0, r5
 8004322:	47b0      	blx	r6
 8004324:	3001      	adds	r0, #1
 8004326:	f43f af2a 	beq.w	800417e <_printf_float+0xae>
 800432a:	3701      	adds	r7, #1
 800432c:	e7e7      	b.n	80042fe <_printf_float+0x22e>
 800432e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004330:	2b00      	cmp	r3, #0
 8004332:	dc2b      	bgt.n	800438c <_printf_float+0x2bc>
 8004334:	2301      	movs	r3, #1
 8004336:	4a26      	ldr	r2, [pc, #152]	; (80043d0 <_printf_float+0x300>)
 8004338:	4659      	mov	r1, fp
 800433a:	4628      	mov	r0, r5
 800433c:	47b0      	blx	r6
 800433e:	3001      	adds	r0, #1
 8004340:	f43f af1d 	beq.w	800417e <_printf_float+0xae>
 8004344:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004346:	b923      	cbnz	r3, 8004352 <_printf_float+0x282>
 8004348:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800434a:	b913      	cbnz	r3, 8004352 <_printf_float+0x282>
 800434c:	6823      	ldr	r3, [r4, #0]
 800434e:	07d9      	lsls	r1, r3, #31
 8004350:	d5d9      	bpl.n	8004306 <_printf_float+0x236>
 8004352:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004356:	4659      	mov	r1, fp
 8004358:	4628      	mov	r0, r5
 800435a:	47b0      	blx	r6
 800435c:	3001      	adds	r0, #1
 800435e:	f43f af0e 	beq.w	800417e <_printf_float+0xae>
 8004362:	f04f 0800 	mov.w	r8, #0
 8004366:	f104 091a 	add.w	r9, r4, #26
 800436a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800436c:	425b      	negs	r3, r3
 800436e:	4543      	cmp	r3, r8
 8004370:	dc01      	bgt.n	8004376 <_printf_float+0x2a6>
 8004372:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004374:	e797      	b.n	80042a6 <_printf_float+0x1d6>
 8004376:	2301      	movs	r3, #1
 8004378:	464a      	mov	r2, r9
 800437a:	4659      	mov	r1, fp
 800437c:	4628      	mov	r0, r5
 800437e:	47b0      	blx	r6
 8004380:	3001      	adds	r0, #1
 8004382:	f43f aefc 	beq.w	800417e <_printf_float+0xae>
 8004386:	f108 0801 	add.w	r8, r8, #1
 800438a:	e7ee      	b.n	800436a <_printf_float+0x29a>
 800438c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800438e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004390:	429a      	cmp	r2, r3
 8004392:	bfa8      	it	ge
 8004394:	461a      	movge	r2, r3
 8004396:	2a00      	cmp	r2, #0
 8004398:	4690      	mov	r8, r2
 800439a:	dd07      	ble.n	80043ac <_printf_float+0x2dc>
 800439c:	4613      	mov	r3, r2
 800439e:	4659      	mov	r1, fp
 80043a0:	463a      	mov	r2, r7
 80043a2:	4628      	mov	r0, r5
 80043a4:	47b0      	blx	r6
 80043a6:	3001      	adds	r0, #1
 80043a8:	f43f aee9 	beq.w	800417e <_printf_float+0xae>
 80043ac:	f104 031a 	add.w	r3, r4, #26
 80043b0:	f04f 0a00 	mov.w	sl, #0
 80043b4:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80043b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80043ba:	e015      	b.n	80043e8 <_printf_float+0x318>
 80043bc:	7fefffff 	.word	0x7fefffff
 80043c0:	08007a70 	.word	0x08007a70
 80043c4:	08007a6c 	.word	0x08007a6c
 80043c8:	08007a78 	.word	0x08007a78
 80043cc:	08007a74 	.word	0x08007a74
 80043d0:	08007a7c 	.word	0x08007a7c
 80043d4:	2301      	movs	r3, #1
 80043d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80043d8:	4659      	mov	r1, fp
 80043da:	4628      	mov	r0, r5
 80043dc:	47b0      	blx	r6
 80043de:	3001      	adds	r0, #1
 80043e0:	f43f aecd 	beq.w	800417e <_printf_float+0xae>
 80043e4:	f10a 0a01 	add.w	sl, sl, #1
 80043e8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80043ec:	eba9 0308 	sub.w	r3, r9, r8
 80043f0:	4553      	cmp	r3, sl
 80043f2:	dcef      	bgt.n	80043d4 <_printf_float+0x304>
 80043f4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80043f8:	429a      	cmp	r2, r3
 80043fa:	444f      	add	r7, r9
 80043fc:	db14      	blt.n	8004428 <_printf_float+0x358>
 80043fe:	6823      	ldr	r3, [r4, #0]
 8004400:	07da      	lsls	r2, r3, #31
 8004402:	d411      	bmi.n	8004428 <_printf_float+0x358>
 8004404:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004406:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004408:	eba3 0209 	sub.w	r2, r3, r9
 800440c:	eba3 0901 	sub.w	r9, r3, r1
 8004410:	4591      	cmp	r9, r2
 8004412:	bfa8      	it	ge
 8004414:	4691      	movge	r9, r2
 8004416:	f1b9 0f00 	cmp.w	r9, #0
 800441a:	dc0d      	bgt.n	8004438 <_printf_float+0x368>
 800441c:	2700      	movs	r7, #0
 800441e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004422:	f104 081a 	add.w	r8, r4, #26
 8004426:	e018      	b.n	800445a <_printf_float+0x38a>
 8004428:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800442c:	4659      	mov	r1, fp
 800442e:	4628      	mov	r0, r5
 8004430:	47b0      	blx	r6
 8004432:	3001      	adds	r0, #1
 8004434:	d1e6      	bne.n	8004404 <_printf_float+0x334>
 8004436:	e6a2      	b.n	800417e <_printf_float+0xae>
 8004438:	464b      	mov	r3, r9
 800443a:	463a      	mov	r2, r7
 800443c:	4659      	mov	r1, fp
 800443e:	4628      	mov	r0, r5
 8004440:	47b0      	blx	r6
 8004442:	3001      	adds	r0, #1
 8004444:	d1ea      	bne.n	800441c <_printf_float+0x34c>
 8004446:	e69a      	b.n	800417e <_printf_float+0xae>
 8004448:	2301      	movs	r3, #1
 800444a:	4642      	mov	r2, r8
 800444c:	4659      	mov	r1, fp
 800444e:	4628      	mov	r0, r5
 8004450:	47b0      	blx	r6
 8004452:	3001      	adds	r0, #1
 8004454:	f43f ae93 	beq.w	800417e <_printf_float+0xae>
 8004458:	3701      	adds	r7, #1
 800445a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800445e:	1a9b      	subs	r3, r3, r2
 8004460:	eba3 0309 	sub.w	r3, r3, r9
 8004464:	42bb      	cmp	r3, r7
 8004466:	dcef      	bgt.n	8004448 <_printf_float+0x378>
 8004468:	e74d      	b.n	8004306 <_printf_float+0x236>
 800446a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800446c:	2a01      	cmp	r2, #1
 800446e:	dc01      	bgt.n	8004474 <_printf_float+0x3a4>
 8004470:	07db      	lsls	r3, r3, #31
 8004472:	d538      	bpl.n	80044e6 <_printf_float+0x416>
 8004474:	2301      	movs	r3, #1
 8004476:	463a      	mov	r2, r7
 8004478:	4659      	mov	r1, fp
 800447a:	4628      	mov	r0, r5
 800447c:	47b0      	blx	r6
 800447e:	3001      	adds	r0, #1
 8004480:	f43f ae7d 	beq.w	800417e <_printf_float+0xae>
 8004484:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004488:	4659      	mov	r1, fp
 800448a:	4628      	mov	r0, r5
 800448c:	47b0      	blx	r6
 800448e:	3001      	adds	r0, #1
 8004490:	f107 0701 	add.w	r7, r7, #1
 8004494:	f43f ae73 	beq.w	800417e <_printf_float+0xae>
 8004498:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800449c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800449e:	2200      	movs	r2, #0
 80044a0:	f103 38ff 	add.w	r8, r3, #4294967295
 80044a4:	2300      	movs	r3, #0
 80044a6:	f7fc faeb 	bl	8000a80 <__aeabi_dcmpeq>
 80044aa:	b9c0      	cbnz	r0, 80044de <_printf_float+0x40e>
 80044ac:	4643      	mov	r3, r8
 80044ae:	463a      	mov	r2, r7
 80044b0:	4659      	mov	r1, fp
 80044b2:	4628      	mov	r0, r5
 80044b4:	47b0      	blx	r6
 80044b6:	3001      	adds	r0, #1
 80044b8:	d10d      	bne.n	80044d6 <_printf_float+0x406>
 80044ba:	e660      	b.n	800417e <_printf_float+0xae>
 80044bc:	2301      	movs	r3, #1
 80044be:	4642      	mov	r2, r8
 80044c0:	4659      	mov	r1, fp
 80044c2:	4628      	mov	r0, r5
 80044c4:	47b0      	blx	r6
 80044c6:	3001      	adds	r0, #1
 80044c8:	f43f ae59 	beq.w	800417e <_printf_float+0xae>
 80044cc:	3701      	adds	r7, #1
 80044ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044d0:	3b01      	subs	r3, #1
 80044d2:	42bb      	cmp	r3, r7
 80044d4:	dcf2      	bgt.n	80044bc <_printf_float+0x3ec>
 80044d6:	464b      	mov	r3, r9
 80044d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80044dc:	e6e4      	b.n	80042a8 <_printf_float+0x1d8>
 80044de:	2700      	movs	r7, #0
 80044e0:	f104 081a 	add.w	r8, r4, #26
 80044e4:	e7f3      	b.n	80044ce <_printf_float+0x3fe>
 80044e6:	2301      	movs	r3, #1
 80044e8:	e7e1      	b.n	80044ae <_printf_float+0x3de>
 80044ea:	2301      	movs	r3, #1
 80044ec:	4642      	mov	r2, r8
 80044ee:	4659      	mov	r1, fp
 80044f0:	4628      	mov	r0, r5
 80044f2:	47b0      	blx	r6
 80044f4:	3001      	adds	r0, #1
 80044f6:	f43f ae42 	beq.w	800417e <_printf_float+0xae>
 80044fa:	3701      	adds	r7, #1
 80044fc:	68e3      	ldr	r3, [r4, #12]
 80044fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004500:	1a9b      	subs	r3, r3, r2
 8004502:	42bb      	cmp	r3, r7
 8004504:	dcf1      	bgt.n	80044ea <_printf_float+0x41a>
 8004506:	e702      	b.n	800430e <_printf_float+0x23e>
 8004508:	2700      	movs	r7, #0
 800450a:	f104 0819 	add.w	r8, r4, #25
 800450e:	e7f5      	b.n	80044fc <_printf_float+0x42c>
 8004510:	2b00      	cmp	r3, #0
 8004512:	f43f ae94 	beq.w	800423e <_printf_float+0x16e>
 8004516:	f04f 0c00 	mov.w	ip, #0
 800451a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800451e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004522:	6022      	str	r2, [r4, #0]
 8004524:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004528:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	463a      	mov	r2, r7
 8004530:	464b      	mov	r3, r9
 8004532:	4628      	mov	r0, r5
 8004534:	f7ff fd3a 	bl	8003fac <__cvt>
 8004538:	4607      	mov	r7, r0
 800453a:	e64f      	b.n	80041dc <_printf_float+0x10c>

0800453c <_printf_common>:
 800453c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004540:	4691      	mov	r9, r2
 8004542:	461f      	mov	r7, r3
 8004544:	688a      	ldr	r2, [r1, #8]
 8004546:	690b      	ldr	r3, [r1, #16]
 8004548:	4606      	mov	r6, r0
 800454a:	4293      	cmp	r3, r2
 800454c:	bfb8      	it	lt
 800454e:	4613      	movlt	r3, r2
 8004550:	f8c9 3000 	str.w	r3, [r9]
 8004554:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004558:	460c      	mov	r4, r1
 800455a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800455e:	b112      	cbz	r2, 8004566 <_printf_common+0x2a>
 8004560:	3301      	adds	r3, #1
 8004562:	f8c9 3000 	str.w	r3, [r9]
 8004566:	6823      	ldr	r3, [r4, #0]
 8004568:	0699      	lsls	r1, r3, #26
 800456a:	bf42      	ittt	mi
 800456c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004570:	3302      	addmi	r3, #2
 8004572:	f8c9 3000 	strmi.w	r3, [r9]
 8004576:	6825      	ldr	r5, [r4, #0]
 8004578:	f015 0506 	ands.w	r5, r5, #6
 800457c:	d107      	bne.n	800458e <_printf_common+0x52>
 800457e:	f104 0a19 	add.w	sl, r4, #25
 8004582:	68e3      	ldr	r3, [r4, #12]
 8004584:	f8d9 2000 	ldr.w	r2, [r9]
 8004588:	1a9b      	subs	r3, r3, r2
 800458a:	42ab      	cmp	r3, r5
 800458c:	dc29      	bgt.n	80045e2 <_printf_common+0xa6>
 800458e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004592:	6822      	ldr	r2, [r4, #0]
 8004594:	3300      	adds	r3, #0
 8004596:	bf18      	it	ne
 8004598:	2301      	movne	r3, #1
 800459a:	0692      	lsls	r2, r2, #26
 800459c:	d42e      	bmi.n	80045fc <_printf_common+0xc0>
 800459e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045a2:	4639      	mov	r1, r7
 80045a4:	4630      	mov	r0, r6
 80045a6:	47c0      	blx	r8
 80045a8:	3001      	adds	r0, #1
 80045aa:	d021      	beq.n	80045f0 <_printf_common+0xb4>
 80045ac:	6823      	ldr	r3, [r4, #0]
 80045ae:	68e5      	ldr	r5, [r4, #12]
 80045b0:	f003 0306 	and.w	r3, r3, #6
 80045b4:	2b04      	cmp	r3, #4
 80045b6:	bf18      	it	ne
 80045b8:	2500      	movne	r5, #0
 80045ba:	f8d9 2000 	ldr.w	r2, [r9]
 80045be:	f04f 0900 	mov.w	r9, #0
 80045c2:	bf08      	it	eq
 80045c4:	1aad      	subeq	r5, r5, r2
 80045c6:	68a3      	ldr	r3, [r4, #8]
 80045c8:	6922      	ldr	r2, [r4, #16]
 80045ca:	bf08      	it	eq
 80045cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045d0:	4293      	cmp	r3, r2
 80045d2:	bfc4      	itt	gt
 80045d4:	1a9b      	subgt	r3, r3, r2
 80045d6:	18ed      	addgt	r5, r5, r3
 80045d8:	341a      	adds	r4, #26
 80045da:	454d      	cmp	r5, r9
 80045dc:	d11a      	bne.n	8004614 <_printf_common+0xd8>
 80045de:	2000      	movs	r0, #0
 80045e0:	e008      	b.n	80045f4 <_printf_common+0xb8>
 80045e2:	2301      	movs	r3, #1
 80045e4:	4652      	mov	r2, sl
 80045e6:	4639      	mov	r1, r7
 80045e8:	4630      	mov	r0, r6
 80045ea:	47c0      	blx	r8
 80045ec:	3001      	adds	r0, #1
 80045ee:	d103      	bne.n	80045f8 <_printf_common+0xbc>
 80045f0:	f04f 30ff 	mov.w	r0, #4294967295
 80045f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045f8:	3501      	adds	r5, #1
 80045fa:	e7c2      	b.n	8004582 <_printf_common+0x46>
 80045fc:	2030      	movs	r0, #48	; 0x30
 80045fe:	18e1      	adds	r1, r4, r3
 8004600:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004604:	1c5a      	adds	r2, r3, #1
 8004606:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800460a:	4422      	add	r2, r4
 800460c:	3302      	adds	r3, #2
 800460e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004612:	e7c4      	b.n	800459e <_printf_common+0x62>
 8004614:	2301      	movs	r3, #1
 8004616:	4622      	mov	r2, r4
 8004618:	4639      	mov	r1, r7
 800461a:	4630      	mov	r0, r6
 800461c:	47c0      	blx	r8
 800461e:	3001      	adds	r0, #1
 8004620:	d0e6      	beq.n	80045f0 <_printf_common+0xb4>
 8004622:	f109 0901 	add.w	r9, r9, #1
 8004626:	e7d8      	b.n	80045da <_printf_common+0x9e>

08004628 <_printf_i>:
 8004628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800462c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004630:	460c      	mov	r4, r1
 8004632:	7e09      	ldrb	r1, [r1, #24]
 8004634:	b085      	sub	sp, #20
 8004636:	296e      	cmp	r1, #110	; 0x6e
 8004638:	4617      	mov	r7, r2
 800463a:	4606      	mov	r6, r0
 800463c:	4698      	mov	r8, r3
 800463e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004640:	f000 80b3 	beq.w	80047aa <_printf_i+0x182>
 8004644:	d822      	bhi.n	800468c <_printf_i+0x64>
 8004646:	2963      	cmp	r1, #99	; 0x63
 8004648:	d036      	beq.n	80046b8 <_printf_i+0x90>
 800464a:	d80a      	bhi.n	8004662 <_printf_i+0x3a>
 800464c:	2900      	cmp	r1, #0
 800464e:	f000 80b9 	beq.w	80047c4 <_printf_i+0x19c>
 8004652:	2958      	cmp	r1, #88	; 0x58
 8004654:	f000 8083 	beq.w	800475e <_printf_i+0x136>
 8004658:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800465c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004660:	e032      	b.n	80046c8 <_printf_i+0xa0>
 8004662:	2964      	cmp	r1, #100	; 0x64
 8004664:	d001      	beq.n	800466a <_printf_i+0x42>
 8004666:	2969      	cmp	r1, #105	; 0x69
 8004668:	d1f6      	bne.n	8004658 <_printf_i+0x30>
 800466a:	6820      	ldr	r0, [r4, #0]
 800466c:	6813      	ldr	r3, [r2, #0]
 800466e:	0605      	lsls	r5, r0, #24
 8004670:	f103 0104 	add.w	r1, r3, #4
 8004674:	d52a      	bpl.n	80046cc <_printf_i+0xa4>
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6011      	str	r1, [r2, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	da03      	bge.n	8004686 <_printf_i+0x5e>
 800467e:	222d      	movs	r2, #45	; 0x2d
 8004680:	425b      	negs	r3, r3
 8004682:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004686:	486f      	ldr	r0, [pc, #444]	; (8004844 <_printf_i+0x21c>)
 8004688:	220a      	movs	r2, #10
 800468a:	e039      	b.n	8004700 <_printf_i+0xd8>
 800468c:	2973      	cmp	r1, #115	; 0x73
 800468e:	f000 809d 	beq.w	80047cc <_printf_i+0x1a4>
 8004692:	d808      	bhi.n	80046a6 <_printf_i+0x7e>
 8004694:	296f      	cmp	r1, #111	; 0x6f
 8004696:	d020      	beq.n	80046da <_printf_i+0xb2>
 8004698:	2970      	cmp	r1, #112	; 0x70
 800469a:	d1dd      	bne.n	8004658 <_printf_i+0x30>
 800469c:	6823      	ldr	r3, [r4, #0]
 800469e:	f043 0320 	orr.w	r3, r3, #32
 80046a2:	6023      	str	r3, [r4, #0]
 80046a4:	e003      	b.n	80046ae <_printf_i+0x86>
 80046a6:	2975      	cmp	r1, #117	; 0x75
 80046a8:	d017      	beq.n	80046da <_printf_i+0xb2>
 80046aa:	2978      	cmp	r1, #120	; 0x78
 80046ac:	d1d4      	bne.n	8004658 <_printf_i+0x30>
 80046ae:	2378      	movs	r3, #120	; 0x78
 80046b0:	4865      	ldr	r0, [pc, #404]	; (8004848 <_printf_i+0x220>)
 80046b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046b6:	e055      	b.n	8004764 <_printf_i+0x13c>
 80046b8:	6813      	ldr	r3, [r2, #0]
 80046ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046be:	1d19      	adds	r1, r3, #4
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6011      	str	r1, [r2, #0]
 80046c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046c8:	2301      	movs	r3, #1
 80046ca:	e08c      	b.n	80047e6 <_printf_i+0x1be>
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80046d2:	6011      	str	r1, [r2, #0]
 80046d4:	bf18      	it	ne
 80046d6:	b21b      	sxthne	r3, r3
 80046d8:	e7cf      	b.n	800467a <_printf_i+0x52>
 80046da:	6813      	ldr	r3, [r2, #0]
 80046dc:	6825      	ldr	r5, [r4, #0]
 80046de:	1d18      	adds	r0, r3, #4
 80046e0:	6010      	str	r0, [r2, #0]
 80046e2:	0628      	lsls	r0, r5, #24
 80046e4:	d501      	bpl.n	80046ea <_printf_i+0xc2>
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	e002      	b.n	80046f0 <_printf_i+0xc8>
 80046ea:	0668      	lsls	r0, r5, #25
 80046ec:	d5fb      	bpl.n	80046e6 <_printf_i+0xbe>
 80046ee:	881b      	ldrh	r3, [r3, #0]
 80046f0:	296f      	cmp	r1, #111	; 0x6f
 80046f2:	bf14      	ite	ne
 80046f4:	220a      	movne	r2, #10
 80046f6:	2208      	moveq	r2, #8
 80046f8:	4852      	ldr	r0, [pc, #328]	; (8004844 <_printf_i+0x21c>)
 80046fa:	2100      	movs	r1, #0
 80046fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004700:	6865      	ldr	r5, [r4, #4]
 8004702:	2d00      	cmp	r5, #0
 8004704:	60a5      	str	r5, [r4, #8]
 8004706:	f2c0 8095 	blt.w	8004834 <_printf_i+0x20c>
 800470a:	6821      	ldr	r1, [r4, #0]
 800470c:	f021 0104 	bic.w	r1, r1, #4
 8004710:	6021      	str	r1, [r4, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d13d      	bne.n	8004792 <_printf_i+0x16a>
 8004716:	2d00      	cmp	r5, #0
 8004718:	f040 808e 	bne.w	8004838 <_printf_i+0x210>
 800471c:	4665      	mov	r5, ip
 800471e:	2a08      	cmp	r2, #8
 8004720:	d10b      	bne.n	800473a <_printf_i+0x112>
 8004722:	6823      	ldr	r3, [r4, #0]
 8004724:	07db      	lsls	r3, r3, #31
 8004726:	d508      	bpl.n	800473a <_printf_i+0x112>
 8004728:	6923      	ldr	r3, [r4, #16]
 800472a:	6862      	ldr	r2, [r4, #4]
 800472c:	429a      	cmp	r2, r3
 800472e:	bfde      	ittt	le
 8004730:	2330      	movle	r3, #48	; 0x30
 8004732:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004736:	f105 35ff 	addle.w	r5, r5, #4294967295
 800473a:	ebac 0305 	sub.w	r3, ip, r5
 800473e:	6123      	str	r3, [r4, #16]
 8004740:	f8cd 8000 	str.w	r8, [sp]
 8004744:	463b      	mov	r3, r7
 8004746:	aa03      	add	r2, sp, #12
 8004748:	4621      	mov	r1, r4
 800474a:	4630      	mov	r0, r6
 800474c:	f7ff fef6 	bl	800453c <_printf_common>
 8004750:	3001      	adds	r0, #1
 8004752:	d14d      	bne.n	80047f0 <_printf_i+0x1c8>
 8004754:	f04f 30ff 	mov.w	r0, #4294967295
 8004758:	b005      	add	sp, #20
 800475a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800475e:	4839      	ldr	r0, [pc, #228]	; (8004844 <_printf_i+0x21c>)
 8004760:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004764:	6813      	ldr	r3, [r2, #0]
 8004766:	6821      	ldr	r1, [r4, #0]
 8004768:	1d1d      	adds	r5, r3, #4
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6015      	str	r5, [r2, #0]
 800476e:	060a      	lsls	r2, r1, #24
 8004770:	d50b      	bpl.n	800478a <_printf_i+0x162>
 8004772:	07ca      	lsls	r2, r1, #31
 8004774:	bf44      	itt	mi
 8004776:	f041 0120 	orrmi.w	r1, r1, #32
 800477a:	6021      	strmi	r1, [r4, #0]
 800477c:	b91b      	cbnz	r3, 8004786 <_printf_i+0x15e>
 800477e:	6822      	ldr	r2, [r4, #0]
 8004780:	f022 0220 	bic.w	r2, r2, #32
 8004784:	6022      	str	r2, [r4, #0]
 8004786:	2210      	movs	r2, #16
 8004788:	e7b7      	b.n	80046fa <_printf_i+0xd2>
 800478a:	064d      	lsls	r5, r1, #25
 800478c:	bf48      	it	mi
 800478e:	b29b      	uxthmi	r3, r3
 8004790:	e7ef      	b.n	8004772 <_printf_i+0x14a>
 8004792:	4665      	mov	r5, ip
 8004794:	fbb3 f1f2 	udiv	r1, r3, r2
 8004798:	fb02 3311 	mls	r3, r2, r1, r3
 800479c:	5cc3      	ldrb	r3, [r0, r3]
 800479e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80047a2:	460b      	mov	r3, r1
 80047a4:	2900      	cmp	r1, #0
 80047a6:	d1f5      	bne.n	8004794 <_printf_i+0x16c>
 80047a8:	e7b9      	b.n	800471e <_printf_i+0xf6>
 80047aa:	6813      	ldr	r3, [r2, #0]
 80047ac:	6825      	ldr	r5, [r4, #0]
 80047ae:	1d18      	adds	r0, r3, #4
 80047b0:	6961      	ldr	r1, [r4, #20]
 80047b2:	6010      	str	r0, [r2, #0]
 80047b4:	0628      	lsls	r0, r5, #24
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	d501      	bpl.n	80047be <_printf_i+0x196>
 80047ba:	6019      	str	r1, [r3, #0]
 80047bc:	e002      	b.n	80047c4 <_printf_i+0x19c>
 80047be:	066a      	lsls	r2, r5, #25
 80047c0:	d5fb      	bpl.n	80047ba <_printf_i+0x192>
 80047c2:	8019      	strh	r1, [r3, #0]
 80047c4:	2300      	movs	r3, #0
 80047c6:	4665      	mov	r5, ip
 80047c8:	6123      	str	r3, [r4, #16]
 80047ca:	e7b9      	b.n	8004740 <_printf_i+0x118>
 80047cc:	6813      	ldr	r3, [r2, #0]
 80047ce:	1d19      	adds	r1, r3, #4
 80047d0:	6011      	str	r1, [r2, #0]
 80047d2:	681d      	ldr	r5, [r3, #0]
 80047d4:	6862      	ldr	r2, [r4, #4]
 80047d6:	2100      	movs	r1, #0
 80047d8:	4628      	mov	r0, r5
 80047da:	f002 fa93 	bl	8006d04 <memchr>
 80047de:	b108      	cbz	r0, 80047e4 <_printf_i+0x1bc>
 80047e0:	1b40      	subs	r0, r0, r5
 80047e2:	6060      	str	r0, [r4, #4]
 80047e4:	6863      	ldr	r3, [r4, #4]
 80047e6:	6123      	str	r3, [r4, #16]
 80047e8:	2300      	movs	r3, #0
 80047ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047ee:	e7a7      	b.n	8004740 <_printf_i+0x118>
 80047f0:	6923      	ldr	r3, [r4, #16]
 80047f2:	462a      	mov	r2, r5
 80047f4:	4639      	mov	r1, r7
 80047f6:	4630      	mov	r0, r6
 80047f8:	47c0      	blx	r8
 80047fa:	3001      	adds	r0, #1
 80047fc:	d0aa      	beq.n	8004754 <_printf_i+0x12c>
 80047fe:	6823      	ldr	r3, [r4, #0]
 8004800:	079b      	lsls	r3, r3, #30
 8004802:	d413      	bmi.n	800482c <_printf_i+0x204>
 8004804:	68e0      	ldr	r0, [r4, #12]
 8004806:	9b03      	ldr	r3, [sp, #12]
 8004808:	4298      	cmp	r0, r3
 800480a:	bfb8      	it	lt
 800480c:	4618      	movlt	r0, r3
 800480e:	e7a3      	b.n	8004758 <_printf_i+0x130>
 8004810:	2301      	movs	r3, #1
 8004812:	464a      	mov	r2, r9
 8004814:	4639      	mov	r1, r7
 8004816:	4630      	mov	r0, r6
 8004818:	47c0      	blx	r8
 800481a:	3001      	adds	r0, #1
 800481c:	d09a      	beq.n	8004754 <_printf_i+0x12c>
 800481e:	3501      	adds	r5, #1
 8004820:	68e3      	ldr	r3, [r4, #12]
 8004822:	9a03      	ldr	r2, [sp, #12]
 8004824:	1a9b      	subs	r3, r3, r2
 8004826:	42ab      	cmp	r3, r5
 8004828:	dcf2      	bgt.n	8004810 <_printf_i+0x1e8>
 800482a:	e7eb      	b.n	8004804 <_printf_i+0x1dc>
 800482c:	2500      	movs	r5, #0
 800482e:	f104 0919 	add.w	r9, r4, #25
 8004832:	e7f5      	b.n	8004820 <_printf_i+0x1f8>
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1ac      	bne.n	8004792 <_printf_i+0x16a>
 8004838:	7803      	ldrb	r3, [r0, #0]
 800483a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800483e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004842:	e76c      	b.n	800471e <_printf_i+0xf6>
 8004844:	08007a7e 	.word	0x08007a7e
 8004848:	08007a8f 	.word	0x08007a8f

0800484c <_scanf_float>:
 800484c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004850:	469a      	mov	sl, r3
 8004852:	688b      	ldr	r3, [r1, #8]
 8004854:	4616      	mov	r6, r2
 8004856:	1e5a      	subs	r2, r3, #1
 8004858:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800485c:	bf88      	it	hi
 800485e:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8004862:	b087      	sub	sp, #28
 8004864:	bf85      	ittet	hi
 8004866:	189b      	addhi	r3, r3, r2
 8004868:	9301      	strhi	r3, [sp, #4]
 800486a:	2300      	movls	r3, #0
 800486c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004870:	4688      	mov	r8, r1
 8004872:	f04f 0b00 	mov.w	fp, #0
 8004876:	bf8c      	ite	hi
 8004878:	608b      	strhi	r3, [r1, #8]
 800487a:	9301      	strls	r3, [sp, #4]
 800487c:	680b      	ldr	r3, [r1, #0]
 800487e:	4607      	mov	r7, r0
 8004880:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004884:	f848 3b1c 	str.w	r3, [r8], #28
 8004888:	460c      	mov	r4, r1
 800488a:	4645      	mov	r5, r8
 800488c:	465a      	mov	r2, fp
 800488e:	46d9      	mov	r9, fp
 8004890:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8004894:	f8cd b008 	str.w	fp, [sp, #8]
 8004898:	68a1      	ldr	r1, [r4, #8]
 800489a:	b181      	cbz	r1, 80048be <_scanf_float+0x72>
 800489c:	6833      	ldr	r3, [r6, #0]
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	2b49      	cmp	r3, #73	; 0x49
 80048a2:	d071      	beq.n	8004988 <_scanf_float+0x13c>
 80048a4:	d84d      	bhi.n	8004942 <_scanf_float+0xf6>
 80048a6:	2b39      	cmp	r3, #57	; 0x39
 80048a8:	d840      	bhi.n	800492c <_scanf_float+0xe0>
 80048aa:	2b31      	cmp	r3, #49	; 0x31
 80048ac:	f080 8088 	bcs.w	80049c0 <_scanf_float+0x174>
 80048b0:	2b2d      	cmp	r3, #45	; 0x2d
 80048b2:	f000 8090 	beq.w	80049d6 <_scanf_float+0x18a>
 80048b6:	d815      	bhi.n	80048e4 <_scanf_float+0x98>
 80048b8:	2b2b      	cmp	r3, #43	; 0x2b
 80048ba:	f000 808c 	beq.w	80049d6 <_scanf_float+0x18a>
 80048be:	f1b9 0f00 	cmp.w	r9, #0
 80048c2:	d003      	beq.n	80048cc <_scanf_float+0x80>
 80048c4:	6823      	ldr	r3, [r4, #0]
 80048c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048ca:	6023      	str	r3, [r4, #0]
 80048cc:	3a01      	subs	r2, #1
 80048ce:	2a01      	cmp	r2, #1
 80048d0:	f200 80ea 	bhi.w	8004aa8 <_scanf_float+0x25c>
 80048d4:	4545      	cmp	r5, r8
 80048d6:	f200 80dc 	bhi.w	8004a92 <_scanf_float+0x246>
 80048da:	2601      	movs	r6, #1
 80048dc:	4630      	mov	r0, r6
 80048de:	b007      	add	sp, #28
 80048e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048e4:	2b2e      	cmp	r3, #46	; 0x2e
 80048e6:	f000 809f 	beq.w	8004a28 <_scanf_float+0x1dc>
 80048ea:	2b30      	cmp	r3, #48	; 0x30
 80048ec:	d1e7      	bne.n	80048be <_scanf_float+0x72>
 80048ee:	6820      	ldr	r0, [r4, #0]
 80048f0:	f410 7f80 	tst.w	r0, #256	; 0x100
 80048f4:	d064      	beq.n	80049c0 <_scanf_float+0x174>
 80048f6:	9b01      	ldr	r3, [sp, #4]
 80048f8:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80048fc:	6020      	str	r0, [r4, #0]
 80048fe:	f109 0901 	add.w	r9, r9, #1
 8004902:	b11b      	cbz	r3, 800490c <_scanf_float+0xc0>
 8004904:	3b01      	subs	r3, #1
 8004906:	3101      	adds	r1, #1
 8004908:	9301      	str	r3, [sp, #4]
 800490a:	60a1      	str	r1, [r4, #8]
 800490c:	68a3      	ldr	r3, [r4, #8]
 800490e:	3b01      	subs	r3, #1
 8004910:	60a3      	str	r3, [r4, #8]
 8004912:	6923      	ldr	r3, [r4, #16]
 8004914:	3301      	adds	r3, #1
 8004916:	6123      	str	r3, [r4, #16]
 8004918:	6873      	ldr	r3, [r6, #4]
 800491a:	3b01      	subs	r3, #1
 800491c:	2b00      	cmp	r3, #0
 800491e:	6073      	str	r3, [r6, #4]
 8004920:	f340 80ac 	ble.w	8004a7c <_scanf_float+0x230>
 8004924:	6833      	ldr	r3, [r6, #0]
 8004926:	3301      	adds	r3, #1
 8004928:	6033      	str	r3, [r6, #0]
 800492a:	e7b5      	b.n	8004898 <_scanf_float+0x4c>
 800492c:	2b45      	cmp	r3, #69	; 0x45
 800492e:	f000 8085 	beq.w	8004a3c <_scanf_float+0x1f0>
 8004932:	2b46      	cmp	r3, #70	; 0x46
 8004934:	d06a      	beq.n	8004a0c <_scanf_float+0x1c0>
 8004936:	2b41      	cmp	r3, #65	; 0x41
 8004938:	d1c1      	bne.n	80048be <_scanf_float+0x72>
 800493a:	2a01      	cmp	r2, #1
 800493c:	d1bf      	bne.n	80048be <_scanf_float+0x72>
 800493e:	2202      	movs	r2, #2
 8004940:	e046      	b.n	80049d0 <_scanf_float+0x184>
 8004942:	2b65      	cmp	r3, #101	; 0x65
 8004944:	d07a      	beq.n	8004a3c <_scanf_float+0x1f0>
 8004946:	d818      	bhi.n	800497a <_scanf_float+0x12e>
 8004948:	2b54      	cmp	r3, #84	; 0x54
 800494a:	d066      	beq.n	8004a1a <_scanf_float+0x1ce>
 800494c:	d811      	bhi.n	8004972 <_scanf_float+0x126>
 800494e:	2b4e      	cmp	r3, #78	; 0x4e
 8004950:	d1b5      	bne.n	80048be <_scanf_float+0x72>
 8004952:	2a00      	cmp	r2, #0
 8004954:	d146      	bne.n	80049e4 <_scanf_float+0x198>
 8004956:	f1b9 0f00 	cmp.w	r9, #0
 800495a:	d145      	bne.n	80049e8 <_scanf_float+0x19c>
 800495c:	6821      	ldr	r1, [r4, #0]
 800495e:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004962:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004966:	d13f      	bne.n	80049e8 <_scanf_float+0x19c>
 8004968:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800496c:	6021      	str	r1, [r4, #0]
 800496e:	2201      	movs	r2, #1
 8004970:	e02e      	b.n	80049d0 <_scanf_float+0x184>
 8004972:	2b59      	cmp	r3, #89	; 0x59
 8004974:	d01e      	beq.n	80049b4 <_scanf_float+0x168>
 8004976:	2b61      	cmp	r3, #97	; 0x61
 8004978:	e7de      	b.n	8004938 <_scanf_float+0xec>
 800497a:	2b6e      	cmp	r3, #110	; 0x6e
 800497c:	d0e9      	beq.n	8004952 <_scanf_float+0x106>
 800497e:	d815      	bhi.n	80049ac <_scanf_float+0x160>
 8004980:	2b66      	cmp	r3, #102	; 0x66
 8004982:	d043      	beq.n	8004a0c <_scanf_float+0x1c0>
 8004984:	2b69      	cmp	r3, #105	; 0x69
 8004986:	d19a      	bne.n	80048be <_scanf_float+0x72>
 8004988:	f1bb 0f00 	cmp.w	fp, #0
 800498c:	d138      	bne.n	8004a00 <_scanf_float+0x1b4>
 800498e:	f1b9 0f00 	cmp.w	r9, #0
 8004992:	d197      	bne.n	80048c4 <_scanf_float+0x78>
 8004994:	6821      	ldr	r1, [r4, #0]
 8004996:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800499a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800499e:	d195      	bne.n	80048cc <_scanf_float+0x80>
 80049a0:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80049a4:	6021      	str	r1, [r4, #0]
 80049a6:	f04f 0b01 	mov.w	fp, #1
 80049aa:	e011      	b.n	80049d0 <_scanf_float+0x184>
 80049ac:	2b74      	cmp	r3, #116	; 0x74
 80049ae:	d034      	beq.n	8004a1a <_scanf_float+0x1ce>
 80049b0:	2b79      	cmp	r3, #121	; 0x79
 80049b2:	d184      	bne.n	80048be <_scanf_float+0x72>
 80049b4:	f1bb 0f07 	cmp.w	fp, #7
 80049b8:	d181      	bne.n	80048be <_scanf_float+0x72>
 80049ba:	f04f 0b08 	mov.w	fp, #8
 80049be:	e007      	b.n	80049d0 <_scanf_float+0x184>
 80049c0:	eb12 0f0b 	cmn.w	r2, fp
 80049c4:	f47f af7b 	bne.w	80048be <_scanf_float+0x72>
 80049c8:	6821      	ldr	r1, [r4, #0]
 80049ca:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80049ce:	6021      	str	r1, [r4, #0]
 80049d0:	702b      	strb	r3, [r5, #0]
 80049d2:	3501      	adds	r5, #1
 80049d4:	e79a      	b.n	800490c <_scanf_float+0xc0>
 80049d6:	6821      	ldr	r1, [r4, #0]
 80049d8:	0608      	lsls	r0, r1, #24
 80049da:	f57f af70 	bpl.w	80048be <_scanf_float+0x72>
 80049de:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80049e2:	e7f4      	b.n	80049ce <_scanf_float+0x182>
 80049e4:	2a02      	cmp	r2, #2
 80049e6:	d047      	beq.n	8004a78 <_scanf_float+0x22c>
 80049e8:	f1bb 0f01 	cmp.w	fp, #1
 80049ec:	d003      	beq.n	80049f6 <_scanf_float+0x1aa>
 80049ee:	f1bb 0f04 	cmp.w	fp, #4
 80049f2:	f47f af64 	bne.w	80048be <_scanf_float+0x72>
 80049f6:	f10b 0b01 	add.w	fp, fp, #1
 80049fa:	fa5f fb8b 	uxtb.w	fp, fp
 80049fe:	e7e7      	b.n	80049d0 <_scanf_float+0x184>
 8004a00:	f1bb 0f03 	cmp.w	fp, #3
 8004a04:	d0f7      	beq.n	80049f6 <_scanf_float+0x1aa>
 8004a06:	f1bb 0f05 	cmp.w	fp, #5
 8004a0a:	e7f2      	b.n	80049f2 <_scanf_float+0x1a6>
 8004a0c:	f1bb 0f02 	cmp.w	fp, #2
 8004a10:	f47f af55 	bne.w	80048be <_scanf_float+0x72>
 8004a14:	f04f 0b03 	mov.w	fp, #3
 8004a18:	e7da      	b.n	80049d0 <_scanf_float+0x184>
 8004a1a:	f1bb 0f06 	cmp.w	fp, #6
 8004a1e:	f47f af4e 	bne.w	80048be <_scanf_float+0x72>
 8004a22:	f04f 0b07 	mov.w	fp, #7
 8004a26:	e7d3      	b.n	80049d0 <_scanf_float+0x184>
 8004a28:	6821      	ldr	r1, [r4, #0]
 8004a2a:	0588      	lsls	r0, r1, #22
 8004a2c:	f57f af47 	bpl.w	80048be <_scanf_float+0x72>
 8004a30:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8004a34:	6021      	str	r1, [r4, #0]
 8004a36:	f8cd 9008 	str.w	r9, [sp, #8]
 8004a3a:	e7c9      	b.n	80049d0 <_scanf_float+0x184>
 8004a3c:	6821      	ldr	r1, [r4, #0]
 8004a3e:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8004a42:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004a46:	d006      	beq.n	8004a56 <_scanf_float+0x20a>
 8004a48:	0548      	lsls	r0, r1, #21
 8004a4a:	f57f af38 	bpl.w	80048be <_scanf_float+0x72>
 8004a4e:	f1b9 0f00 	cmp.w	r9, #0
 8004a52:	f43f af3b 	beq.w	80048cc <_scanf_float+0x80>
 8004a56:	0588      	lsls	r0, r1, #22
 8004a58:	bf58      	it	pl
 8004a5a:	9802      	ldrpl	r0, [sp, #8]
 8004a5c:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004a60:	bf58      	it	pl
 8004a62:	eba9 0000 	subpl.w	r0, r9, r0
 8004a66:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8004a6a:	bf58      	it	pl
 8004a6c:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8004a70:	6021      	str	r1, [r4, #0]
 8004a72:	f04f 0900 	mov.w	r9, #0
 8004a76:	e7ab      	b.n	80049d0 <_scanf_float+0x184>
 8004a78:	2203      	movs	r2, #3
 8004a7a:	e7a9      	b.n	80049d0 <_scanf_float+0x184>
 8004a7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004a80:	4631      	mov	r1, r6
 8004a82:	4638      	mov	r0, r7
 8004a84:	9205      	str	r2, [sp, #20]
 8004a86:	4798      	blx	r3
 8004a88:	9a05      	ldr	r2, [sp, #20]
 8004a8a:	2800      	cmp	r0, #0
 8004a8c:	f43f af04 	beq.w	8004898 <_scanf_float+0x4c>
 8004a90:	e715      	b.n	80048be <_scanf_float+0x72>
 8004a92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a96:	4632      	mov	r2, r6
 8004a98:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004a9c:	4638      	mov	r0, r7
 8004a9e:	4798      	blx	r3
 8004aa0:	6923      	ldr	r3, [r4, #16]
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	6123      	str	r3, [r4, #16]
 8004aa6:	e715      	b.n	80048d4 <_scanf_float+0x88>
 8004aa8:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004aac:	2b06      	cmp	r3, #6
 8004aae:	d80a      	bhi.n	8004ac6 <_scanf_float+0x27a>
 8004ab0:	f1bb 0f02 	cmp.w	fp, #2
 8004ab4:	d967      	bls.n	8004b86 <_scanf_float+0x33a>
 8004ab6:	f1ab 0b03 	sub.w	fp, fp, #3
 8004aba:	fa5f fb8b 	uxtb.w	fp, fp
 8004abe:	eba5 0b0b 	sub.w	fp, r5, fp
 8004ac2:	455d      	cmp	r5, fp
 8004ac4:	d14a      	bne.n	8004b5c <_scanf_float+0x310>
 8004ac6:	6823      	ldr	r3, [r4, #0]
 8004ac8:	05da      	lsls	r2, r3, #23
 8004aca:	d51f      	bpl.n	8004b0c <_scanf_float+0x2c0>
 8004acc:	055b      	lsls	r3, r3, #21
 8004ace:	d467      	bmi.n	8004ba0 <_scanf_float+0x354>
 8004ad0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004ad4:	6923      	ldr	r3, [r4, #16]
 8004ad6:	2965      	cmp	r1, #101	; 0x65
 8004ad8:	f103 33ff 	add.w	r3, r3, #4294967295
 8004adc:	f105 3bff 	add.w	fp, r5, #4294967295
 8004ae0:	6123      	str	r3, [r4, #16]
 8004ae2:	d00d      	beq.n	8004b00 <_scanf_float+0x2b4>
 8004ae4:	2945      	cmp	r1, #69	; 0x45
 8004ae6:	d00b      	beq.n	8004b00 <_scanf_float+0x2b4>
 8004ae8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004aec:	4632      	mov	r2, r6
 8004aee:	4638      	mov	r0, r7
 8004af0:	4798      	blx	r3
 8004af2:	6923      	ldr	r3, [r4, #16]
 8004af4:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8004af8:	3b01      	subs	r3, #1
 8004afa:	f1a5 0b02 	sub.w	fp, r5, #2
 8004afe:	6123      	str	r3, [r4, #16]
 8004b00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b04:	4632      	mov	r2, r6
 8004b06:	4638      	mov	r0, r7
 8004b08:	4798      	blx	r3
 8004b0a:	465d      	mov	r5, fp
 8004b0c:	6826      	ldr	r6, [r4, #0]
 8004b0e:	f016 0610 	ands.w	r6, r6, #16
 8004b12:	d176      	bne.n	8004c02 <_scanf_float+0x3b6>
 8004b14:	702e      	strb	r6, [r5, #0]
 8004b16:	6823      	ldr	r3, [r4, #0]
 8004b18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b20:	d141      	bne.n	8004ba6 <_scanf_float+0x35a>
 8004b22:	9b02      	ldr	r3, [sp, #8]
 8004b24:	eba9 0303 	sub.w	r3, r9, r3
 8004b28:	425a      	negs	r2, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d148      	bne.n	8004bc0 <_scanf_float+0x374>
 8004b2e:	4641      	mov	r1, r8
 8004b30:	2200      	movs	r2, #0
 8004b32:	4638      	mov	r0, r7
 8004b34:	f000 feb0 	bl	8005898 <_strtod_r>
 8004b38:	6825      	ldr	r5, [r4, #0]
 8004b3a:	4680      	mov	r8, r0
 8004b3c:	f015 0f02 	tst.w	r5, #2
 8004b40:	4689      	mov	r9, r1
 8004b42:	f8da 3000 	ldr.w	r3, [sl]
 8004b46:	d046      	beq.n	8004bd6 <_scanf_float+0x38a>
 8004b48:	1d1a      	adds	r2, r3, #4
 8004b4a:	f8ca 2000 	str.w	r2, [sl]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	e9c3 8900 	strd	r8, r9, [r3]
 8004b54:	68e3      	ldr	r3, [r4, #12]
 8004b56:	3301      	adds	r3, #1
 8004b58:	60e3      	str	r3, [r4, #12]
 8004b5a:	e6bf      	b.n	80048dc <_scanf_float+0x90>
 8004b5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b60:	4632      	mov	r2, r6
 8004b62:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004b66:	4638      	mov	r0, r7
 8004b68:	4798      	blx	r3
 8004b6a:	6923      	ldr	r3, [r4, #16]
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	6123      	str	r3, [r4, #16]
 8004b70:	e7a7      	b.n	8004ac2 <_scanf_float+0x276>
 8004b72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b76:	4632      	mov	r2, r6
 8004b78:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004b7c:	4638      	mov	r0, r7
 8004b7e:	4798      	blx	r3
 8004b80:	6923      	ldr	r3, [r4, #16]
 8004b82:	3b01      	subs	r3, #1
 8004b84:	6123      	str	r3, [r4, #16]
 8004b86:	4545      	cmp	r5, r8
 8004b88:	d8f3      	bhi.n	8004b72 <_scanf_float+0x326>
 8004b8a:	e6a6      	b.n	80048da <_scanf_float+0x8e>
 8004b8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b90:	4632      	mov	r2, r6
 8004b92:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004b96:	4638      	mov	r0, r7
 8004b98:	4798      	blx	r3
 8004b9a:	6923      	ldr	r3, [r4, #16]
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	6123      	str	r3, [r4, #16]
 8004ba0:	4545      	cmp	r5, r8
 8004ba2:	d8f3      	bhi.n	8004b8c <_scanf_float+0x340>
 8004ba4:	e699      	b.n	80048da <_scanf_float+0x8e>
 8004ba6:	9b03      	ldr	r3, [sp, #12]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d0c0      	beq.n	8004b2e <_scanf_float+0x2e2>
 8004bac:	9904      	ldr	r1, [sp, #16]
 8004bae:	230a      	movs	r3, #10
 8004bb0:	4632      	mov	r2, r6
 8004bb2:	3101      	adds	r1, #1
 8004bb4:	4638      	mov	r0, r7
 8004bb6:	f000 fefb 	bl	80059b0 <_strtol_r>
 8004bba:	9b03      	ldr	r3, [sp, #12]
 8004bbc:	9d04      	ldr	r5, [sp, #16]
 8004bbe:	1ac2      	subs	r2, r0, r3
 8004bc0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004bc4:	429d      	cmp	r5, r3
 8004bc6:	bf28      	it	cs
 8004bc8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8004bcc:	490e      	ldr	r1, [pc, #56]	; (8004c08 <_scanf_float+0x3bc>)
 8004bce:	4628      	mov	r0, r5
 8004bd0:	f000 f820 	bl	8004c14 <siprintf>
 8004bd4:	e7ab      	b.n	8004b2e <_scanf_float+0x2e2>
 8004bd6:	1d1f      	adds	r7, r3, #4
 8004bd8:	f015 0504 	ands.w	r5, r5, #4
 8004bdc:	f8ca 7000 	str.w	r7, [sl]
 8004be0:	d1b5      	bne.n	8004b4e <_scanf_float+0x302>
 8004be2:	681f      	ldr	r7, [r3, #0]
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	f7fb ff7c 	bl	8000ae4 <__aeabi_dcmpun>
 8004bec:	b120      	cbz	r0, 8004bf8 <_scanf_float+0x3ac>
 8004bee:	4628      	mov	r0, r5
 8004bf0:	f000 f80c 	bl	8004c0c <nanf>
 8004bf4:	6038      	str	r0, [r7, #0]
 8004bf6:	e7ad      	b.n	8004b54 <_scanf_float+0x308>
 8004bf8:	4640      	mov	r0, r8
 8004bfa:	4649      	mov	r1, r9
 8004bfc:	f7fb ffd0 	bl	8000ba0 <__aeabi_d2f>
 8004c00:	e7f8      	b.n	8004bf4 <_scanf_float+0x3a8>
 8004c02:	2600      	movs	r6, #0
 8004c04:	e66a      	b.n	80048dc <_scanf_float+0x90>
 8004c06:	bf00      	nop
 8004c08:	08007aa0 	.word	0x08007aa0

08004c0c <nanf>:
 8004c0c:	4800      	ldr	r0, [pc, #0]	; (8004c10 <nanf+0x4>)
 8004c0e:	4770      	bx	lr
 8004c10:	7fc00000 	.word	0x7fc00000

08004c14 <siprintf>:
 8004c14:	b40e      	push	{r1, r2, r3}
 8004c16:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c1a:	b500      	push	{lr}
 8004c1c:	b09c      	sub	sp, #112	; 0x70
 8004c1e:	ab1d      	add	r3, sp, #116	; 0x74
 8004c20:	9002      	str	r0, [sp, #8]
 8004c22:	9006      	str	r0, [sp, #24]
 8004c24:	9107      	str	r1, [sp, #28]
 8004c26:	9104      	str	r1, [sp, #16]
 8004c28:	4808      	ldr	r0, [pc, #32]	; (8004c4c <siprintf+0x38>)
 8004c2a:	4909      	ldr	r1, [pc, #36]	; (8004c50 <siprintf+0x3c>)
 8004c2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c30:	9105      	str	r1, [sp, #20]
 8004c32:	6800      	ldr	r0, [r0, #0]
 8004c34:	a902      	add	r1, sp, #8
 8004c36:	9301      	str	r3, [sp, #4]
 8004c38:	f002 fd84 	bl	8007744 <_svfiprintf_r>
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	9b02      	ldr	r3, [sp, #8]
 8004c40:	701a      	strb	r2, [r3, #0]
 8004c42:	b01c      	add	sp, #112	; 0x70
 8004c44:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c48:	b003      	add	sp, #12
 8004c4a:	4770      	bx	lr
 8004c4c:	2000000c 	.word	0x2000000c
 8004c50:	ffff0208 	.word	0xffff0208

08004c54 <sulp>:
 8004c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c58:	460f      	mov	r7, r1
 8004c5a:	4690      	mov	r8, r2
 8004c5c:	f002 fb36 	bl	80072cc <__ulp>
 8004c60:	4604      	mov	r4, r0
 8004c62:	460d      	mov	r5, r1
 8004c64:	f1b8 0f00 	cmp.w	r8, #0
 8004c68:	d011      	beq.n	8004c8e <sulp+0x3a>
 8004c6a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004c6e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	dd0b      	ble.n	8004c8e <sulp+0x3a>
 8004c76:	2400      	movs	r4, #0
 8004c78:	051b      	lsls	r3, r3, #20
 8004c7a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004c7e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004c82:	4622      	mov	r2, r4
 8004c84:	462b      	mov	r3, r5
 8004c86:	f7fb fc93 	bl	80005b0 <__aeabi_dmul>
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	460d      	mov	r5, r1
 8004c8e:	4620      	mov	r0, r4
 8004c90:	4629      	mov	r1, r5
 8004c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004c98 <_strtod_l>:
 8004c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c9c:	461f      	mov	r7, r3
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	b0a1      	sub	sp, #132	; 0x84
 8004ca2:	4683      	mov	fp, r0
 8004ca4:	4638      	mov	r0, r7
 8004ca6:	460e      	mov	r6, r1
 8004ca8:	9217      	str	r2, [sp, #92]	; 0x5c
 8004caa:	931c      	str	r3, [sp, #112]	; 0x70
 8004cac:	f001 ffff 	bl	8006cae <__localeconv_l>
 8004cb0:	4680      	mov	r8, r0
 8004cb2:	6800      	ldr	r0, [r0, #0]
 8004cb4:	f7fb fab8 	bl	8000228 <strlen>
 8004cb8:	f04f 0900 	mov.w	r9, #0
 8004cbc:	4604      	mov	r4, r0
 8004cbe:	f04f 0a00 	mov.w	sl, #0
 8004cc2:	961b      	str	r6, [sp, #108]	; 0x6c
 8004cc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004cc6:	781a      	ldrb	r2, [r3, #0]
 8004cc8:	2a0d      	cmp	r2, #13
 8004cca:	d832      	bhi.n	8004d32 <_strtod_l+0x9a>
 8004ccc:	2a09      	cmp	r2, #9
 8004cce:	d236      	bcs.n	8004d3e <_strtod_l+0xa6>
 8004cd0:	2a00      	cmp	r2, #0
 8004cd2:	d03e      	beq.n	8004d52 <_strtod_l+0xba>
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	930d      	str	r3, [sp, #52]	; 0x34
 8004cd8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004cda:	782b      	ldrb	r3, [r5, #0]
 8004cdc:	2b30      	cmp	r3, #48	; 0x30
 8004cde:	f040 80ac 	bne.w	8004e3a <_strtod_l+0x1a2>
 8004ce2:	786b      	ldrb	r3, [r5, #1]
 8004ce4:	2b58      	cmp	r3, #88	; 0x58
 8004ce6:	d001      	beq.n	8004cec <_strtod_l+0x54>
 8004ce8:	2b78      	cmp	r3, #120	; 0x78
 8004cea:	d167      	bne.n	8004dbc <_strtod_l+0x124>
 8004cec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cee:	9702      	str	r7, [sp, #8]
 8004cf0:	9301      	str	r3, [sp, #4]
 8004cf2:	ab1c      	add	r3, sp, #112	; 0x70
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	4a89      	ldr	r2, [pc, #548]	; (8004f1c <_strtod_l+0x284>)
 8004cf8:	ab1d      	add	r3, sp, #116	; 0x74
 8004cfa:	a91b      	add	r1, sp, #108	; 0x6c
 8004cfc:	4658      	mov	r0, fp
 8004cfe:	f001 fcfb 	bl	80066f8 <__gethex>
 8004d02:	f010 0407 	ands.w	r4, r0, #7
 8004d06:	4606      	mov	r6, r0
 8004d08:	d005      	beq.n	8004d16 <_strtod_l+0x7e>
 8004d0a:	2c06      	cmp	r4, #6
 8004d0c:	d12b      	bne.n	8004d66 <_strtod_l+0xce>
 8004d0e:	2300      	movs	r3, #0
 8004d10:	3501      	adds	r5, #1
 8004d12:	951b      	str	r5, [sp, #108]	; 0x6c
 8004d14:	930d      	str	r3, [sp, #52]	; 0x34
 8004d16:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f040 85a6 	bne.w	800586a <_strtod_l+0xbd2>
 8004d1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d20:	b1e3      	cbz	r3, 8004d5c <_strtod_l+0xc4>
 8004d22:	464a      	mov	r2, r9
 8004d24:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8004d28:	4610      	mov	r0, r2
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	b021      	add	sp, #132	; 0x84
 8004d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d32:	2a2b      	cmp	r2, #43	; 0x2b
 8004d34:	d015      	beq.n	8004d62 <_strtod_l+0xca>
 8004d36:	2a2d      	cmp	r2, #45	; 0x2d
 8004d38:	d004      	beq.n	8004d44 <_strtod_l+0xac>
 8004d3a:	2a20      	cmp	r2, #32
 8004d3c:	d1ca      	bne.n	8004cd4 <_strtod_l+0x3c>
 8004d3e:	3301      	adds	r3, #1
 8004d40:	931b      	str	r3, [sp, #108]	; 0x6c
 8004d42:	e7bf      	b.n	8004cc4 <_strtod_l+0x2c>
 8004d44:	2201      	movs	r2, #1
 8004d46:	920d      	str	r2, [sp, #52]	; 0x34
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	921b      	str	r2, [sp, #108]	; 0x6c
 8004d4c:	785b      	ldrb	r3, [r3, #1]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1c2      	bne.n	8004cd8 <_strtod_l+0x40>
 8004d52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004d54:	961b      	str	r6, [sp, #108]	; 0x6c
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f040 8585 	bne.w	8005866 <_strtod_l+0xbce>
 8004d5c:	464a      	mov	r2, r9
 8004d5e:	4653      	mov	r3, sl
 8004d60:	e7e2      	b.n	8004d28 <_strtod_l+0x90>
 8004d62:	2200      	movs	r2, #0
 8004d64:	e7ef      	b.n	8004d46 <_strtod_l+0xae>
 8004d66:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004d68:	b13a      	cbz	r2, 8004d7a <_strtod_l+0xe2>
 8004d6a:	2135      	movs	r1, #53	; 0x35
 8004d6c:	a81e      	add	r0, sp, #120	; 0x78
 8004d6e:	f002 fba0 	bl	80074b2 <__copybits>
 8004d72:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004d74:	4658      	mov	r0, fp
 8004d76:	f002 f812 	bl	8006d9e <_Bfree>
 8004d7a:	3c01      	subs	r4, #1
 8004d7c:	2c04      	cmp	r4, #4
 8004d7e:	d806      	bhi.n	8004d8e <_strtod_l+0xf6>
 8004d80:	e8df f004 	tbb	[pc, r4]
 8004d84:	1714030a 	.word	0x1714030a
 8004d88:	0a          	.byte	0x0a
 8004d89:	00          	.byte	0x00
 8004d8a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8004d8e:	0731      	lsls	r1, r6, #28
 8004d90:	d5c1      	bpl.n	8004d16 <_strtod_l+0x7e>
 8004d92:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8004d96:	e7be      	b.n	8004d16 <_strtod_l+0x7e>
 8004d98:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004d9a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8004d9e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004da2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004da6:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8004daa:	e7f0      	b.n	8004d8e <_strtod_l+0xf6>
 8004dac:	f8df a170 	ldr.w	sl, [pc, #368]	; 8004f20 <_strtod_l+0x288>
 8004db0:	e7ed      	b.n	8004d8e <_strtod_l+0xf6>
 8004db2:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8004db6:	f04f 39ff 	mov.w	r9, #4294967295
 8004dba:	e7e8      	b.n	8004d8e <_strtod_l+0xf6>
 8004dbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004dbe:	1c5a      	adds	r2, r3, #1
 8004dc0:	921b      	str	r2, [sp, #108]	; 0x6c
 8004dc2:	785b      	ldrb	r3, [r3, #1]
 8004dc4:	2b30      	cmp	r3, #48	; 0x30
 8004dc6:	d0f9      	beq.n	8004dbc <_strtod_l+0x124>
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d0a4      	beq.n	8004d16 <_strtod_l+0x7e>
 8004dcc:	2301      	movs	r3, #1
 8004dce:	2500      	movs	r5, #0
 8004dd0:	220a      	movs	r2, #10
 8004dd2:	9307      	str	r3, [sp, #28]
 8004dd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004dd6:	9506      	str	r5, [sp, #24]
 8004dd8:	9308      	str	r3, [sp, #32]
 8004dda:	9504      	str	r5, [sp, #16]
 8004ddc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004dde:	7807      	ldrb	r7, [r0, #0]
 8004de0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8004de4:	b2d9      	uxtb	r1, r3
 8004de6:	2909      	cmp	r1, #9
 8004de8:	d929      	bls.n	8004e3e <_strtod_l+0x1a6>
 8004dea:	4622      	mov	r2, r4
 8004dec:	f8d8 1000 	ldr.w	r1, [r8]
 8004df0:	f002 fdb0 	bl	8007954 <strncmp>
 8004df4:	2800      	cmp	r0, #0
 8004df6:	d031      	beq.n	8004e5c <_strtod_l+0x1c4>
 8004df8:	2000      	movs	r0, #0
 8004dfa:	463b      	mov	r3, r7
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	9c04      	ldr	r4, [sp, #16]
 8004e00:	9005      	str	r0, [sp, #20]
 8004e02:	2b65      	cmp	r3, #101	; 0x65
 8004e04:	d001      	beq.n	8004e0a <_strtod_l+0x172>
 8004e06:	2b45      	cmp	r3, #69	; 0x45
 8004e08:	d114      	bne.n	8004e34 <_strtod_l+0x19c>
 8004e0a:	b924      	cbnz	r4, 8004e16 <_strtod_l+0x17e>
 8004e0c:	b910      	cbnz	r0, 8004e14 <_strtod_l+0x17c>
 8004e0e:	9b07      	ldr	r3, [sp, #28]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d09e      	beq.n	8004d52 <_strtod_l+0xba>
 8004e14:	2400      	movs	r4, #0
 8004e16:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004e18:	1c73      	adds	r3, r6, #1
 8004e1a:	931b      	str	r3, [sp, #108]	; 0x6c
 8004e1c:	7873      	ldrb	r3, [r6, #1]
 8004e1e:	2b2b      	cmp	r3, #43	; 0x2b
 8004e20:	d078      	beq.n	8004f14 <_strtod_l+0x27c>
 8004e22:	2b2d      	cmp	r3, #45	; 0x2d
 8004e24:	d070      	beq.n	8004f08 <_strtod_l+0x270>
 8004e26:	f04f 0c00 	mov.w	ip, #0
 8004e2a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8004e2e:	2f09      	cmp	r7, #9
 8004e30:	d97c      	bls.n	8004f2c <_strtod_l+0x294>
 8004e32:	961b      	str	r6, [sp, #108]	; 0x6c
 8004e34:	f04f 0e00 	mov.w	lr, #0
 8004e38:	e09a      	b.n	8004f70 <_strtod_l+0x2d8>
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	e7c7      	b.n	8004dce <_strtod_l+0x136>
 8004e3e:	9904      	ldr	r1, [sp, #16]
 8004e40:	3001      	adds	r0, #1
 8004e42:	2908      	cmp	r1, #8
 8004e44:	bfd7      	itett	le
 8004e46:	9906      	ldrle	r1, [sp, #24]
 8004e48:	fb02 3505 	mlagt	r5, r2, r5, r3
 8004e4c:	fb02 3301 	mlale	r3, r2, r1, r3
 8004e50:	9306      	strle	r3, [sp, #24]
 8004e52:	9b04      	ldr	r3, [sp, #16]
 8004e54:	901b      	str	r0, [sp, #108]	; 0x6c
 8004e56:	3301      	adds	r3, #1
 8004e58:	9304      	str	r3, [sp, #16]
 8004e5a:	e7bf      	b.n	8004ddc <_strtod_l+0x144>
 8004e5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004e5e:	191a      	adds	r2, r3, r4
 8004e60:	921b      	str	r2, [sp, #108]	; 0x6c
 8004e62:	9a04      	ldr	r2, [sp, #16]
 8004e64:	5d1b      	ldrb	r3, [r3, r4]
 8004e66:	2a00      	cmp	r2, #0
 8004e68:	d037      	beq.n	8004eda <_strtod_l+0x242>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	9c04      	ldr	r4, [sp, #16]
 8004e6e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004e72:	2909      	cmp	r1, #9
 8004e74:	d913      	bls.n	8004e9e <_strtod_l+0x206>
 8004e76:	2101      	movs	r1, #1
 8004e78:	9105      	str	r1, [sp, #20]
 8004e7a:	e7c2      	b.n	8004e02 <_strtod_l+0x16a>
 8004e7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004e7e:	3001      	adds	r0, #1
 8004e80:	1c5a      	adds	r2, r3, #1
 8004e82:	921b      	str	r2, [sp, #108]	; 0x6c
 8004e84:	785b      	ldrb	r3, [r3, #1]
 8004e86:	2b30      	cmp	r3, #48	; 0x30
 8004e88:	d0f8      	beq.n	8004e7c <_strtod_l+0x1e4>
 8004e8a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004e8e:	2a08      	cmp	r2, #8
 8004e90:	f200 84f0 	bhi.w	8005874 <_strtod_l+0xbdc>
 8004e94:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004e96:	9208      	str	r2, [sp, #32]
 8004e98:	4602      	mov	r2, r0
 8004e9a:	2000      	movs	r0, #0
 8004e9c:	4604      	mov	r4, r0
 8004e9e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8004ea2:	f100 0101 	add.w	r1, r0, #1
 8004ea6:	d012      	beq.n	8004ece <_strtod_l+0x236>
 8004ea8:	440a      	add	r2, r1
 8004eaa:	270a      	movs	r7, #10
 8004eac:	4621      	mov	r1, r4
 8004eae:	eb00 0c04 	add.w	ip, r0, r4
 8004eb2:	458c      	cmp	ip, r1
 8004eb4:	d113      	bne.n	8004ede <_strtod_l+0x246>
 8004eb6:	1821      	adds	r1, r4, r0
 8004eb8:	2908      	cmp	r1, #8
 8004eba:	f104 0401 	add.w	r4, r4, #1
 8004ebe:	4404      	add	r4, r0
 8004ec0:	dc19      	bgt.n	8004ef6 <_strtod_l+0x25e>
 8004ec2:	210a      	movs	r1, #10
 8004ec4:	9b06      	ldr	r3, [sp, #24]
 8004ec6:	fb01 e303 	mla	r3, r1, r3, lr
 8004eca:	9306      	str	r3, [sp, #24]
 8004ecc:	2100      	movs	r1, #0
 8004ece:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004ed0:	1c58      	adds	r0, r3, #1
 8004ed2:	901b      	str	r0, [sp, #108]	; 0x6c
 8004ed4:	785b      	ldrb	r3, [r3, #1]
 8004ed6:	4608      	mov	r0, r1
 8004ed8:	e7c9      	b.n	8004e6e <_strtod_l+0x1d6>
 8004eda:	9804      	ldr	r0, [sp, #16]
 8004edc:	e7d3      	b.n	8004e86 <_strtod_l+0x1ee>
 8004ede:	2908      	cmp	r1, #8
 8004ee0:	f101 0101 	add.w	r1, r1, #1
 8004ee4:	dc03      	bgt.n	8004eee <_strtod_l+0x256>
 8004ee6:	9b06      	ldr	r3, [sp, #24]
 8004ee8:	437b      	muls	r3, r7
 8004eea:	9306      	str	r3, [sp, #24]
 8004eec:	e7e1      	b.n	8004eb2 <_strtod_l+0x21a>
 8004eee:	2910      	cmp	r1, #16
 8004ef0:	bfd8      	it	le
 8004ef2:	437d      	mulle	r5, r7
 8004ef4:	e7dd      	b.n	8004eb2 <_strtod_l+0x21a>
 8004ef6:	2c10      	cmp	r4, #16
 8004ef8:	bfdc      	itt	le
 8004efa:	210a      	movle	r1, #10
 8004efc:	fb01 e505 	mlale	r5, r1, r5, lr
 8004f00:	e7e4      	b.n	8004ecc <_strtod_l+0x234>
 8004f02:	2301      	movs	r3, #1
 8004f04:	9305      	str	r3, [sp, #20]
 8004f06:	e781      	b.n	8004e0c <_strtod_l+0x174>
 8004f08:	f04f 0c01 	mov.w	ip, #1
 8004f0c:	1cb3      	adds	r3, r6, #2
 8004f0e:	931b      	str	r3, [sp, #108]	; 0x6c
 8004f10:	78b3      	ldrb	r3, [r6, #2]
 8004f12:	e78a      	b.n	8004e2a <_strtod_l+0x192>
 8004f14:	f04f 0c00 	mov.w	ip, #0
 8004f18:	e7f8      	b.n	8004f0c <_strtod_l+0x274>
 8004f1a:	bf00      	nop
 8004f1c:	08007aa8 	.word	0x08007aa8
 8004f20:	7ff00000 	.word	0x7ff00000
 8004f24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004f26:	1c5f      	adds	r7, r3, #1
 8004f28:	971b      	str	r7, [sp, #108]	; 0x6c
 8004f2a:	785b      	ldrb	r3, [r3, #1]
 8004f2c:	2b30      	cmp	r3, #48	; 0x30
 8004f2e:	d0f9      	beq.n	8004f24 <_strtod_l+0x28c>
 8004f30:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8004f34:	2f08      	cmp	r7, #8
 8004f36:	f63f af7d 	bhi.w	8004e34 <_strtod_l+0x19c>
 8004f3a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8004f3e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004f40:	9309      	str	r3, [sp, #36]	; 0x24
 8004f42:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004f44:	1c5f      	adds	r7, r3, #1
 8004f46:	971b      	str	r7, [sp, #108]	; 0x6c
 8004f48:	785b      	ldrb	r3, [r3, #1]
 8004f4a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8004f4e:	f1b8 0f09 	cmp.w	r8, #9
 8004f52:	d937      	bls.n	8004fc4 <_strtod_l+0x32c>
 8004f54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f56:	1a7f      	subs	r7, r7, r1
 8004f58:	2f08      	cmp	r7, #8
 8004f5a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8004f5e:	dc37      	bgt.n	8004fd0 <_strtod_l+0x338>
 8004f60:	45be      	cmp	lr, r7
 8004f62:	bfa8      	it	ge
 8004f64:	46be      	movge	lr, r7
 8004f66:	f1bc 0f00 	cmp.w	ip, #0
 8004f6a:	d001      	beq.n	8004f70 <_strtod_l+0x2d8>
 8004f6c:	f1ce 0e00 	rsb	lr, lr, #0
 8004f70:	2c00      	cmp	r4, #0
 8004f72:	d151      	bne.n	8005018 <_strtod_l+0x380>
 8004f74:	2800      	cmp	r0, #0
 8004f76:	f47f aece 	bne.w	8004d16 <_strtod_l+0x7e>
 8004f7a:	9a07      	ldr	r2, [sp, #28]
 8004f7c:	2a00      	cmp	r2, #0
 8004f7e:	f47f aeca 	bne.w	8004d16 <_strtod_l+0x7e>
 8004f82:	9a05      	ldr	r2, [sp, #20]
 8004f84:	2a00      	cmp	r2, #0
 8004f86:	f47f aee4 	bne.w	8004d52 <_strtod_l+0xba>
 8004f8a:	2b4e      	cmp	r3, #78	; 0x4e
 8004f8c:	d027      	beq.n	8004fde <_strtod_l+0x346>
 8004f8e:	dc21      	bgt.n	8004fd4 <_strtod_l+0x33c>
 8004f90:	2b49      	cmp	r3, #73	; 0x49
 8004f92:	f47f aede 	bne.w	8004d52 <_strtod_l+0xba>
 8004f96:	49a4      	ldr	r1, [pc, #656]	; (8005228 <_strtod_l+0x590>)
 8004f98:	a81b      	add	r0, sp, #108	; 0x6c
 8004f9a:	f001 fde1 	bl	8006b60 <__match>
 8004f9e:	2800      	cmp	r0, #0
 8004fa0:	f43f aed7 	beq.w	8004d52 <_strtod_l+0xba>
 8004fa4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004fa6:	49a1      	ldr	r1, [pc, #644]	; (800522c <_strtod_l+0x594>)
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	a81b      	add	r0, sp, #108	; 0x6c
 8004fac:	931b      	str	r3, [sp, #108]	; 0x6c
 8004fae:	f001 fdd7 	bl	8006b60 <__match>
 8004fb2:	b910      	cbnz	r0, 8004fba <_strtod_l+0x322>
 8004fb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	931b      	str	r3, [sp, #108]	; 0x6c
 8004fba:	f8df a284 	ldr.w	sl, [pc, #644]	; 8005240 <_strtod_l+0x5a8>
 8004fbe:	f04f 0900 	mov.w	r9, #0
 8004fc2:	e6a8      	b.n	8004d16 <_strtod_l+0x7e>
 8004fc4:	210a      	movs	r1, #10
 8004fc6:	fb01 3e0e 	mla	lr, r1, lr, r3
 8004fca:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004fce:	e7b8      	b.n	8004f42 <_strtod_l+0x2aa>
 8004fd0:	46be      	mov	lr, r7
 8004fd2:	e7c8      	b.n	8004f66 <_strtod_l+0x2ce>
 8004fd4:	2b69      	cmp	r3, #105	; 0x69
 8004fd6:	d0de      	beq.n	8004f96 <_strtod_l+0x2fe>
 8004fd8:	2b6e      	cmp	r3, #110	; 0x6e
 8004fda:	f47f aeba 	bne.w	8004d52 <_strtod_l+0xba>
 8004fde:	4994      	ldr	r1, [pc, #592]	; (8005230 <_strtod_l+0x598>)
 8004fe0:	a81b      	add	r0, sp, #108	; 0x6c
 8004fe2:	f001 fdbd 	bl	8006b60 <__match>
 8004fe6:	2800      	cmp	r0, #0
 8004fe8:	f43f aeb3 	beq.w	8004d52 <_strtod_l+0xba>
 8004fec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	2b28      	cmp	r3, #40	; 0x28
 8004ff2:	d10e      	bne.n	8005012 <_strtod_l+0x37a>
 8004ff4:	aa1e      	add	r2, sp, #120	; 0x78
 8004ff6:	498f      	ldr	r1, [pc, #572]	; (8005234 <_strtod_l+0x59c>)
 8004ff8:	a81b      	add	r0, sp, #108	; 0x6c
 8004ffa:	f001 fdc5 	bl	8006b88 <__hexnan>
 8004ffe:	2805      	cmp	r0, #5
 8005000:	d107      	bne.n	8005012 <_strtod_l+0x37a>
 8005002:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005004:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8005008:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800500c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8005010:	e681      	b.n	8004d16 <_strtod_l+0x7e>
 8005012:	f8df a234 	ldr.w	sl, [pc, #564]	; 8005248 <_strtod_l+0x5b0>
 8005016:	e7d2      	b.n	8004fbe <_strtod_l+0x326>
 8005018:	ebae 0302 	sub.w	r3, lr, r2
 800501c:	9307      	str	r3, [sp, #28]
 800501e:	9b04      	ldr	r3, [sp, #16]
 8005020:	9806      	ldr	r0, [sp, #24]
 8005022:	2b00      	cmp	r3, #0
 8005024:	bf08      	it	eq
 8005026:	4623      	moveq	r3, r4
 8005028:	2c10      	cmp	r4, #16
 800502a:	9304      	str	r3, [sp, #16]
 800502c:	46a0      	mov	r8, r4
 800502e:	bfa8      	it	ge
 8005030:	f04f 0810 	movge.w	r8, #16
 8005034:	f7fb fa42 	bl	80004bc <__aeabi_ui2d>
 8005038:	2c09      	cmp	r4, #9
 800503a:	4681      	mov	r9, r0
 800503c:	468a      	mov	sl, r1
 800503e:	dc13      	bgt.n	8005068 <_strtod_l+0x3d0>
 8005040:	9b07      	ldr	r3, [sp, #28]
 8005042:	2b00      	cmp	r3, #0
 8005044:	f43f ae67 	beq.w	8004d16 <_strtod_l+0x7e>
 8005048:	9b07      	ldr	r3, [sp, #28]
 800504a:	dd7e      	ble.n	800514a <_strtod_l+0x4b2>
 800504c:	2b16      	cmp	r3, #22
 800504e:	dc65      	bgt.n	800511c <_strtod_l+0x484>
 8005050:	4a79      	ldr	r2, [pc, #484]	; (8005238 <_strtod_l+0x5a0>)
 8005052:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8005056:	464a      	mov	r2, r9
 8005058:	e9de 0100 	ldrd	r0, r1, [lr]
 800505c:	4653      	mov	r3, sl
 800505e:	f7fb faa7 	bl	80005b0 <__aeabi_dmul>
 8005062:	4681      	mov	r9, r0
 8005064:	468a      	mov	sl, r1
 8005066:	e656      	b.n	8004d16 <_strtod_l+0x7e>
 8005068:	4b73      	ldr	r3, [pc, #460]	; (8005238 <_strtod_l+0x5a0>)
 800506a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800506e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005072:	f7fb fa9d 	bl	80005b0 <__aeabi_dmul>
 8005076:	4606      	mov	r6, r0
 8005078:	4628      	mov	r0, r5
 800507a:	460f      	mov	r7, r1
 800507c:	f7fb fa1e 	bl	80004bc <__aeabi_ui2d>
 8005080:	4602      	mov	r2, r0
 8005082:	460b      	mov	r3, r1
 8005084:	4630      	mov	r0, r6
 8005086:	4639      	mov	r1, r7
 8005088:	f7fb f8dc 	bl	8000244 <__adddf3>
 800508c:	2c0f      	cmp	r4, #15
 800508e:	4681      	mov	r9, r0
 8005090:	468a      	mov	sl, r1
 8005092:	ddd5      	ble.n	8005040 <_strtod_l+0x3a8>
 8005094:	9b07      	ldr	r3, [sp, #28]
 8005096:	eba4 0808 	sub.w	r8, r4, r8
 800509a:	4498      	add	r8, r3
 800509c:	f1b8 0f00 	cmp.w	r8, #0
 80050a0:	f340 809a 	ble.w	80051d8 <_strtod_l+0x540>
 80050a4:	f018 030f 	ands.w	r3, r8, #15
 80050a8:	d00a      	beq.n	80050c0 <_strtod_l+0x428>
 80050aa:	4963      	ldr	r1, [pc, #396]	; (8005238 <_strtod_l+0x5a0>)
 80050ac:	464a      	mov	r2, r9
 80050ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80050b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050b6:	4653      	mov	r3, sl
 80050b8:	f7fb fa7a 	bl	80005b0 <__aeabi_dmul>
 80050bc:	4681      	mov	r9, r0
 80050be:	468a      	mov	sl, r1
 80050c0:	f038 080f 	bics.w	r8, r8, #15
 80050c4:	d077      	beq.n	80051b6 <_strtod_l+0x51e>
 80050c6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80050ca:	dd4b      	ble.n	8005164 <_strtod_l+0x4cc>
 80050cc:	f04f 0800 	mov.w	r8, #0
 80050d0:	f8cd 8010 	str.w	r8, [sp, #16]
 80050d4:	f8cd 8020 	str.w	r8, [sp, #32]
 80050d8:	f8cd 8018 	str.w	r8, [sp, #24]
 80050dc:	2322      	movs	r3, #34	; 0x22
 80050de:	f04f 0900 	mov.w	r9, #0
 80050e2:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8005240 <_strtod_l+0x5a8>
 80050e6:	f8cb 3000 	str.w	r3, [fp]
 80050ea:	9b08      	ldr	r3, [sp, #32]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f43f ae12 	beq.w	8004d16 <_strtod_l+0x7e>
 80050f2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80050f4:	4658      	mov	r0, fp
 80050f6:	f001 fe52 	bl	8006d9e <_Bfree>
 80050fa:	9906      	ldr	r1, [sp, #24]
 80050fc:	4658      	mov	r0, fp
 80050fe:	f001 fe4e 	bl	8006d9e <_Bfree>
 8005102:	9904      	ldr	r1, [sp, #16]
 8005104:	4658      	mov	r0, fp
 8005106:	f001 fe4a 	bl	8006d9e <_Bfree>
 800510a:	9908      	ldr	r1, [sp, #32]
 800510c:	4658      	mov	r0, fp
 800510e:	f001 fe46 	bl	8006d9e <_Bfree>
 8005112:	4641      	mov	r1, r8
 8005114:	4658      	mov	r0, fp
 8005116:	f001 fe42 	bl	8006d9e <_Bfree>
 800511a:	e5fc      	b.n	8004d16 <_strtod_l+0x7e>
 800511c:	9a07      	ldr	r2, [sp, #28]
 800511e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005122:	4293      	cmp	r3, r2
 8005124:	dbb6      	blt.n	8005094 <_strtod_l+0x3fc>
 8005126:	4d44      	ldr	r5, [pc, #272]	; (8005238 <_strtod_l+0x5a0>)
 8005128:	f1c4 040f 	rsb	r4, r4, #15
 800512c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005130:	464a      	mov	r2, r9
 8005132:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005136:	4653      	mov	r3, sl
 8005138:	f7fb fa3a 	bl	80005b0 <__aeabi_dmul>
 800513c:	9b07      	ldr	r3, [sp, #28]
 800513e:	1b1c      	subs	r4, r3, r4
 8005140:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005144:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005148:	e789      	b.n	800505e <_strtod_l+0x3c6>
 800514a:	f113 0f16 	cmn.w	r3, #22
 800514e:	dba1      	blt.n	8005094 <_strtod_l+0x3fc>
 8005150:	4a39      	ldr	r2, [pc, #228]	; (8005238 <_strtod_l+0x5a0>)
 8005152:	4648      	mov	r0, r9
 8005154:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8005158:	e9d2 2300 	ldrd	r2, r3, [r2]
 800515c:	4651      	mov	r1, sl
 800515e:	f7fb fb51 	bl	8000804 <__aeabi_ddiv>
 8005162:	e77e      	b.n	8005062 <_strtod_l+0x3ca>
 8005164:	2300      	movs	r3, #0
 8005166:	4648      	mov	r0, r9
 8005168:	4651      	mov	r1, sl
 800516a:	461d      	mov	r5, r3
 800516c:	4e33      	ldr	r6, [pc, #204]	; (800523c <_strtod_l+0x5a4>)
 800516e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005172:	f1b8 0f01 	cmp.w	r8, #1
 8005176:	dc21      	bgt.n	80051bc <_strtod_l+0x524>
 8005178:	b10b      	cbz	r3, 800517e <_strtod_l+0x4e6>
 800517a:	4681      	mov	r9, r0
 800517c:	468a      	mov	sl, r1
 800517e:	4b2f      	ldr	r3, [pc, #188]	; (800523c <_strtod_l+0x5a4>)
 8005180:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8005184:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005188:	464a      	mov	r2, r9
 800518a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800518e:	4653      	mov	r3, sl
 8005190:	f7fb fa0e 	bl	80005b0 <__aeabi_dmul>
 8005194:	4b2a      	ldr	r3, [pc, #168]	; (8005240 <_strtod_l+0x5a8>)
 8005196:	460a      	mov	r2, r1
 8005198:	400b      	ands	r3, r1
 800519a:	492a      	ldr	r1, [pc, #168]	; (8005244 <_strtod_l+0x5ac>)
 800519c:	4681      	mov	r9, r0
 800519e:	428b      	cmp	r3, r1
 80051a0:	d894      	bhi.n	80050cc <_strtod_l+0x434>
 80051a2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80051a6:	428b      	cmp	r3, r1
 80051a8:	bf86      	itte	hi
 80051aa:	f04f 39ff 	movhi.w	r9, #4294967295
 80051ae:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800524c <_strtod_l+0x5b4>
 80051b2:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 80051b6:	2300      	movs	r3, #0
 80051b8:	9305      	str	r3, [sp, #20]
 80051ba:	e07b      	b.n	80052b4 <_strtod_l+0x61c>
 80051bc:	f018 0f01 	tst.w	r8, #1
 80051c0:	d006      	beq.n	80051d0 <_strtod_l+0x538>
 80051c2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80051c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ca:	f7fb f9f1 	bl	80005b0 <__aeabi_dmul>
 80051ce:	2301      	movs	r3, #1
 80051d0:	3501      	adds	r5, #1
 80051d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80051d6:	e7cc      	b.n	8005172 <_strtod_l+0x4da>
 80051d8:	d0ed      	beq.n	80051b6 <_strtod_l+0x51e>
 80051da:	f1c8 0800 	rsb	r8, r8, #0
 80051de:	f018 020f 	ands.w	r2, r8, #15
 80051e2:	d00a      	beq.n	80051fa <_strtod_l+0x562>
 80051e4:	4b14      	ldr	r3, [pc, #80]	; (8005238 <_strtod_l+0x5a0>)
 80051e6:	4648      	mov	r0, r9
 80051e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051ec:	4651      	mov	r1, sl
 80051ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f2:	f7fb fb07 	bl	8000804 <__aeabi_ddiv>
 80051f6:	4681      	mov	r9, r0
 80051f8:	468a      	mov	sl, r1
 80051fa:	ea5f 1828 	movs.w	r8, r8, asr #4
 80051fe:	d0da      	beq.n	80051b6 <_strtod_l+0x51e>
 8005200:	f1b8 0f1f 	cmp.w	r8, #31
 8005204:	dd24      	ble.n	8005250 <_strtod_l+0x5b8>
 8005206:	f04f 0800 	mov.w	r8, #0
 800520a:	f8cd 8010 	str.w	r8, [sp, #16]
 800520e:	f8cd 8020 	str.w	r8, [sp, #32]
 8005212:	f8cd 8018 	str.w	r8, [sp, #24]
 8005216:	2322      	movs	r3, #34	; 0x22
 8005218:	f04f 0900 	mov.w	r9, #0
 800521c:	f04f 0a00 	mov.w	sl, #0
 8005220:	f8cb 3000 	str.w	r3, [fp]
 8005224:	e761      	b.n	80050ea <_strtod_l+0x452>
 8005226:	bf00      	nop
 8005228:	08007a71 	.word	0x08007a71
 800522c:	08007afb 	.word	0x08007afb
 8005230:	08007a79 	.word	0x08007a79
 8005234:	08007abc 	.word	0x08007abc
 8005238:	08007b38 	.word	0x08007b38
 800523c:	08007b10 	.word	0x08007b10
 8005240:	7ff00000 	.word	0x7ff00000
 8005244:	7ca00000 	.word	0x7ca00000
 8005248:	fff80000 	.word	0xfff80000
 800524c:	7fefffff 	.word	0x7fefffff
 8005250:	f018 0310 	ands.w	r3, r8, #16
 8005254:	bf18      	it	ne
 8005256:	236a      	movne	r3, #106	; 0x6a
 8005258:	4648      	mov	r0, r9
 800525a:	9305      	str	r3, [sp, #20]
 800525c:	4651      	mov	r1, sl
 800525e:	2300      	movs	r3, #0
 8005260:	4da1      	ldr	r5, [pc, #644]	; (80054e8 <_strtod_l+0x850>)
 8005262:	f1b8 0f00 	cmp.w	r8, #0
 8005266:	f300 8113 	bgt.w	8005490 <_strtod_l+0x7f8>
 800526a:	b10b      	cbz	r3, 8005270 <_strtod_l+0x5d8>
 800526c:	4681      	mov	r9, r0
 800526e:	468a      	mov	sl, r1
 8005270:	9b05      	ldr	r3, [sp, #20]
 8005272:	b1bb      	cbz	r3, 80052a4 <_strtod_l+0x60c>
 8005274:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8005278:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800527c:	2b00      	cmp	r3, #0
 800527e:	4651      	mov	r1, sl
 8005280:	dd10      	ble.n	80052a4 <_strtod_l+0x60c>
 8005282:	2b1f      	cmp	r3, #31
 8005284:	f340 8110 	ble.w	80054a8 <_strtod_l+0x810>
 8005288:	2b34      	cmp	r3, #52	; 0x34
 800528a:	bfd8      	it	le
 800528c:	f04f 32ff 	movle.w	r2, #4294967295
 8005290:	f04f 0900 	mov.w	r9, #0
 8005294:	bfcf      	iteee	gt
 8005296:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800529a:	3b20      	suble	r3, #32
 800529c:	fa02 f303 	lslle.w	r3, r2, r3
 80052a0:	ea03 0a01 	andle.w	sl, r3, r1
 80052a4:	2200      	movs	r2, #0
 80052a6:	2300      	movs	r3, #0
 80052a8:	4648      	mov	r0, r9
 80052aa:	4651      	mov	r1, sl
 80052ac:	f7fb fbe8 	bl	8000a80 <__aeabi_dcmpeq>
 80052b0:	2800      	cmp	r0, #0
 80052b2:	d1a8      	bne.n	8005206 <_strtod_l+0x56e>
 80052b4:	9b06      	ldr	r3, [sp, #24]
 80052b6:	9a04      	ldr	r2, [sp, #16]
 80052b8:	9300      	str	r3, [sp, #0]
 80052ba:	9908      	ldr	r1, [sp, #32]
 80052bc:	4623      	mov	r3, r4
 80052be:	4658      	mov	r0, fp
 80052c0:	f001 fdbf 	bl	8006e42 <__s2b>
 80052c4:	9008      	str	r0, [sp, #32]
 80052c6:	2800      	cmp	r0, #0
 80052c8:	f43f af00 	beq.w	80050cc <_strtod_l+0x434>
 80052cc:	9a07      	ldr	r2, [sp, #28]
 80052ce:	9b07      	ldr	r3, [sp, #28]
 80052d0:	2a00      	cmp	r2, #0
 80052d2:	f1c3 0300 	rsb	r3, r3, #0
 80052d6:	bfa8      	it	ge
 80052d8:	2300      	movge	r3, #0
 80052da:	f04f 0800 	mov.w	r8, #0
 80052de:	930e      	str	r3, [sp, #56]	; 0x38
 80052e0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80052e4:	9316      	str	r3, [sp, #88]	; 0x58
 80052e6:	f8cd 8010 	str.w	r8, [sp, #16]
 80052ea:	9b08      	ldr	r3, [sp, #32]
 80052ec:	4658      	mov	r0, fp
 80052ee:	6859      	ldr	r1, [r3, #4]
 80052f0:	f001 fd21 	bl	8006d36 <_Balloc>
 80052f4:	9006      	str	r0, [sp, #24]
 80052f6:	2800      	cmp	r0, #0
 80052f8:	f43f aef0 	beq.w	80050dc <_strtod_l+0x444>
 80052fc:	9b08      	ldr	r3, [sp, #32]
 80052fe:	300c      	adds	r0, #12
 8005300:	691a      	ldr	r2, [r3, #16]
 8005302:	f103 010c 	add.w	r1, r3, #12
 8005306:	3202      	adds	r2, #2
 8005308:	0092      	lsls	r2, r2, #2
 800530a:	f001 fd09 	bl	8006d20 <memcpy>
 800530e:	ab1e      	add	r3, sp, #120	; 0x78
 8005310:	9301      	str	r3, [sp, #4]
 8005312:	ab1d      	add	r3, sp, #116	; 0x74
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	464a      	mov	r2, r9
 8005318:	4653      	mov	r3, sl
 800531a:	4658      	mov	r0, fp
 800531c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8005320:	f002 f84a 	bl	80073b8 <__d2b>
 8005324:	901c      	str	r0, [sp, #112]	; 0x70
 8005326:	2800      	cmp	r0, #0
 8005328:	f43f aed8 	beq.w	80050dc <_strtod_l+0x444>
 800532c:	2101      	movs	r1, #1
 800532e:	4658      	mov	r0, fp
 8005330:	f001 fe13 	bl	8006f5a <__i2b>
 8005334:	9004      	str	r0, [sp, #16]
 8005336:	4603      	mov	r3, r0
 8005338:	2800      	cmp	r0, #0
 800533a:	f43f aecf 	beq.w	80050dc <_strtod_l+0x444>
 800533e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8005340:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005342:	2d00      	cmp	r5, #0
 8005344:	bfab      	itete	ge
 8005346:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005348:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800534a:	18ee      	addge	r6, r5, r3
 800534c:	1b5c      	sublt	r4, r3, r5
 800534e:	9b05      	ldr	r3, [sp, #20]
 8005350:	bfa8      	it	ge
 8005352:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8005354:	eba5 0503 	sub.w	r5, r5, r3
 8005358:	4415      	add	r5, r2
 800535a:	4b64      	ldr	r3, [pc, #400]	; (80054ec <_strtod_l+0x854>)
 800535c:	f105 35ff 	add.w	r5, r5, #4294967295
 8005360:	bfb8      	it	lt
 8005362:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005364:	429d      	cmp	r5, r3
 8005366:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800536a:	f280 80af 	bge.w	80054cc <_strtod_l+0x834>
 800536e:	1b5b      	subs	r3, r3, r5
 8005370:	2b1f      	cmp	r3, #31
 8005372:	eba2 0203 	sub.w	r2, r2, r3
 8005376:	f04f 0701 	mov.w	r7, #1
 800537a:	f300 809c 	bgt.w	80054b6 <_strtod_l+0x81e>
 800537e:	2500      	movs	r5, #0
 8005380:	fa07 f303 	lsl.w	r3, r7, r3
 8005384:	930f      	str	r3, [sp, #60]	; 0x3c
 8005386:	18b7      	adds	r7, r6, r2
 8005388:	9b05      	ldr	r3, [sp, #20]
 800538a:	42be      	cmp	r6, r7
 800538c:	4414      	add	r4, r2
 800538e:	441c      	add	r4, r3
 8005390:	4633      	mov	r3, r6
 8005392:	bfa8      	it	ge
 8005394:	463b      	movge	r3, r7
 8005396:	42a3      	cmp	r3, r4
 8005398:	bfa8      	it	ge
 800539a:	4623      	movge	r3, r4
 800539c:	2b00      	cmp	r3, #0
 800539e:	bfc2      	ittt	gt
 80053a0:	1aff      	subgt	r7, r7, r3
 80053a2:	1ae4      	subgt	r4, r4, r3
 80053a4:	1af6      	subgt	r6, r6, r3
 80053a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053a8:	b1bb      	cbz	r3, 80053da <_strtod_l+0x742>
 80053aa:	461a      	mov	r2, r3
 80053ac:	9904      	ldr	r1, [sp, #16]
 80053ae:	4658      	mov	r0, fp
 80053b0:	f001 fe72 	bl	8007098 <__pow5mult>
 80053b4:	9004      	str	r0, [sp, #16]
 80053b6:	2800      	cmp	r0, #0
 80053b8:	f43f ae90 	beq.w	80050dc <_strtod_l+0x444>
 80053bc:	4601      	mov	r1, r0
 80053be:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80053c0:	4658      	mov	r0, fp
 80053c2:	f001 fdd3 	bl	8006f6c <__multiply>
 80053c6:	9009      	str	r0, [sp, #36]	; 0x24
 80053c8:	2800      	cmp	r0, #0
 80053ca:	f43f ae87 	beq.w	80050dc <_strtod_l+0x444>
 80053ce:	991c      	ldr	r1, [sp, #112]	; 0x70
 80053d0:	4658      	mov	r0, fp
 80053d2:	f001 fce4 	bl	8006d9e <_Bfree>
 80053d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053d8:	931c      	str	r3, [sp, #112]	; 0x70
 80053da:	2f00      	cmp	r7, #0
 80053dc:	dc7a      	bgt.n	80054d4 <_strtod_l+0x83c>
 80053de:	9b07      	ldr	r3, [sp, #28]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	dd08      	ble.n	80053f6 <_strtod_l+0x75e>
 80053e4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80053e6:	9906      	ldr	r1, [sp, #24]
 80053e8:	4658      	mov	r0, fp
 80053ea:	f001 fe55 	bl	8007098 <__pow5mult>
 80053ee:	9006      	str	r0, [sp, #24]
 80053f0:	2800      	cmp	r0, #0
 80053f2:	f43f ae73 	beq.w	80050dc <_strtod_l+0x444>
 80053f6:	2c00      	cmp	r4, #0
 80053f8:	dd08      	ble.n	800540c <_strtod_l+0x774>
 80053fa:	4622      	mov	r2, r4
 80053fc:	9906      	ldr	r1, [sp, #24]
 80053fe:	4658      	mov	r0, fp
 8005400:	f001 fe98 	bl	8007134 <__lshift>
 8005404:	9006      	str	r0, [sp, #24]
 8005406:	2800      	cmp	r0, #0
 8005408:	f43f ae68 	beq.w	80050dc <_strtod_l+0x444>
 800540c:	2e00      	cmp	r6, #0
 800540e:	dd08      	ble.n	8005422 <_strtod_l+0x78a>
 8005410:	4632      	mov	r2, r6
 8005412:	9904      	ldr	r1, [sp, #16]
 8005414:	4658      	mov	r0, fp
 8005416:	f001 fe8d 	bl	8007134 <__lshift>
 800541a:	9004      	str	r0, [sp, #16]
 800541c:	2800      	cmp	r0, #0
 800541e:	f43f ae5d 	beq.w	80050dc <_strtod_l+0x444>
 8005422:	9a06      	ldr	r2, [sp, #24]
 8005424:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005426:	4658      	mov	r0, fp
 8005428:	f001 fef2 	bl	8007210 <__mdiff>
 800542c:	4680      	mov	r8, r0
 800542e:	2800      	cmp	r0, #0
 8005430:	f43f ae54 	beq.w	80050dc <_strtod_l+0x444>
 8005434:	2400      	movs	r4, #0
 8005436:	68c3      	ldr	r3, [r0, #12]
 8005438:	9904      	ldr	r1, [sp, #16]
 800543a:	60c4      	str	r4, [r0, #12]
 800543c:	930c      	str	r3, [sp, #48]	; 0x30
 800543e:	f001 fecd 	bl	80071dc <__mcmp>
 8005442:	42a0      	cmp	r0, r4
 8005444:	da54      	bge.n	80054f0 <_strtod_l+0x858>
 8005446:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005448:	b9f3      	cbnz	r3, 8005488 <_strtod_l+0x7f0>
 800544a:	f1b9 0f00 	cmp.w	r9, #0
 800544e:	d11b      	bne.n	8005488 <_strtod_l+0x7f0>
 8005450:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8005454:	b9c3      	cbnz	r3, 8005488 <_strtod_l+0x7f0>
 8005456:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800545a:	0d1b      	lsrs	r3, r3, #20
 800545c:	051b      	lsls	r3, r3, #20
 800545e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005462:	d911      	bls.n	8005488 <_strtod_l+0x7f0>
 8005464:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005468:	b91b      	cbnz	r3, 8005472 <_strtod_l+0x7da>
 800546a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800546e:	2b01      	cmp	r3, #1
 8005470:	dd0a      	ble.n	8005488 <_strtod_l+0x7f0>
 8005472:	4641      	mov	r1, r8
 8005474:	2201      	movs	r2, #1
 8005476:	4658      	mov	r0, fp
 8005478:	f001 fe5c 	bl	8007134 <__lshift>
 800547c:	9904      	ldr	r1, [sp, #16]
 800547e:	4680      	mov	r8, r0
 8005480:	f001 feac 	bl	80071dc <__mcmp>
 8005484:	2800      	cmp	r0, #0
 8005486:	dc68      	bgt.n	800555a <_strtod_l+0x8c2>
 8005488:	9b05      	ldr	r3, [sp, #20]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d172      	bne.n	8005574 <_strtod_l+0x8dc>
 800548e:	e630      	b.n	80050f2 <_strtod_l+0x45a>
 8005490:	f018 0f01 	tst.w	r8, #1
 8005494:	d004      	beq.n	80054a0 <_strtod_l+0x808>
 8005496:	e9d5 2300 	ldrd	r2, r3, [r5]
 800549a:	f7fb f889 	bl	80005b0 <__aeabi_dmul>
 800549e:	2301      	movs	r3, #1
 80054a0:	ea4f 0868 	mov.w	r8, r8, asr #1
 80054a4:	3508      	adds	r5, #8
 80054a6:	e6dc      	b.n	8005262 <_strtod_l+0x5ca>
 80054a8:	f04f 32ff 	mov.w	r2, #4294967295
 80054ac:	fa02 f303 	lsl.w	r3, r2, r3
 80054b0:	ea03 0909 	and.w	r9, r3, r9
 80054b4:	e6f6      	b.n	80052a4 <_strtod_l+0x60c>
 80054b6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80054ba:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80054be:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80054c2:	35e2      	adds	r5, #226	; 0xe2
 80054c4:	fa07 f505 	lsl.w	r5, r7, r5
 80054c8:	970f      	str	r7, [sp, #60]	; 0x3c
 80054ca:	e75c      	b.n	8005386 <_strtod_l+0x6ee>
 80054cc:	2301      	movs	r3, #1
 80054ce:	2500      	movs	r5, #0
 80054d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80054d2:	e758      	b.n	8005386 <_strtod_l+0x6ee>
 80054d4:	463a      	mov	r2, r7
 80054d6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80054d8:	4658      	mov	r0, fp
 80054da:	f001 fe2b 	bl	8007134 <__lshift>
 80054de:	901c      	str	r0, [sp, #112]	; 0x70
 80054e0:	2800      	cmp	r0, #0
 80054e2:	f47f af7c 	bne.w	80053de <_strtod_l+0x746>
 80054e6:	e5f9      	b.n	80050dc <_strtod_l+0x444>
 80054e8:	08007ad0 	.word	0x08007ad0
 80054ec:	fffffc02 	.word	0xfffffc02
 80054f0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80054f4:	f040 8089 	bne.w	800560a <_strtod_l+0x972>
 80054f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80054fa:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80054fe:	b342      	cbz	r2, 8005552 <_strtod_l+0x8ba>
 8005500:	4aaf      	ldr	r2, [pc, #700]	; (80057c0 <_strtod_l+0xb28>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d156      	bne.n	80055b4 <_strtod_l+0x91c>
 8005506:	9b05      	ldr	r3, [sp, #20]
 8005508:	4648      	mov	r0, r9
 800550a:	b1eb      	cbz	r3, 8005548 <_strtod_l+0x8b0>
 800550c:	4653      	mov	r3, sl
 800550e:	4aad      	ldr	r2, [pc, #692]	; (80057c4 <_strtod_l+0xb2c>)
 8005510:	f04f 31ff 	mov.w	r1, #4294967295
 8005514:	401a      	ands	r2, r3
 8005516:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800551a:	d818      	bhi.n	800554e <_strtod_l+0x8b6>
 800551c:	0d12      	lsrs	r2, r2, #20
 800551e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005522:	fa01 f303 	lsl.w	r3, r1, r3
 8005526:	4298      	cmp	r0, r3
 8005528:	d144      	bne.n	80055b4 <_strtod_l+0x91c>
 800552a:	4ba7      	ldr	r3, [pc, #668]	; (80057c8 <_strtod_l+0xb30>)
 800552c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800552e:	429a      	cmp	r2, r3
 8005530:	d102      	bne.n	8005538 <_strtod_l+0x8a0>
 8005532:	3001      	adds	r0, #1
 8005534:	f43f add2 	beq.w	80050dc <_strtod_l+0x444>
 8005538:	4ba2      	ldr	r3, [pc, #648]	; (80057c4 <_strtod_l+0xb2c>)
 800553a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800553c:	f04f 0900 	mov.w	r9, #0
 8005540:	401a      	ands	r2, r3
 8005542:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8005546:	e79f      	b.n	8005488 <_strtod_l+0x7f0>
 8005548:	f04f 33ff 	mov.w	r3, #4294967295
 800554c:	e7eb      	b.n	8005526 <_strtod_l+0x88e>
 800554e:	460b      	mov	r3, r1
 8005550:	e7e9      	b.n	8005526 <_strtod_l+0x88e>
 8005552:	bb7b      	cbnz	r3, 80055b4 <_strtod_l+0x91c>
 8005554:	f1b9 0f00 	cmp.w	r9, #0
 8005558:	d12c      	bne.n	80055b4 <_strtod_l+0x91c>
 800555a:	9905      	ldr	r1, [sp, #20]
 800555c:	4653      	mov	r3, sl
 800555e:	4a99      	ldr	r2, [pc, #612]	; (80057c4 <_strtod_l+0xb2c>)
 8005560:	b1f1      	cbz	r1, 80055a0 <_strtod_l+0x908>
 8005562:	ea02 010a 	and.w	r1, r2, sl
 8005566:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800556a:	dc19      	bgt.n	80055a0 <_strtod_l+0x908>
 800556c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005570:	f77f ae51 	ble.w	8005216 <_strtod_l+0x57e>
 8005574:	2300      	movs	r3, #0
 8005576:	4a95      	ldr	r2, [pc, #596]	; (80057cc <_strtod_l+0xb34>)
 8005578:	4648      	mov	r0, r9
 800557a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800557e:	4651      	mov	r1, sl
 8005580:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005584:	f7fb f814 	bl	80005b0 <__aeabi_dmul>
 8005588:	4681      	mov	r9, r0
 800558a:	468a      	mov	sl, r1
 800558c:	2900      	cmp	r1, #0
 800558e:	f47f adb0 	bne.w	80050f2 <_strtod_l+0x45a>
 8005592:	2800      	cmp	r0, #0
 8005594:	f47f adad 	bne.w	80050f2 <_strtod_l+0x45a>
 8005598:	2322      	movs	r3, #34	; 0x22
 800559a:	f8cb 3000 	str.w	r3, [fp]
 800559e:	e5a8      	b.n	80050f2 <_strtod_l+0x45a>
 80055a0:	4013      	ands	r3, r2
 80055a2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80055a6:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 80055aa:	f04f 39ff 	mov.w	r9, #4294967295
 80055ae:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 80055b2:	e769      	b.n	8005488 <_strtod_l+0x7f0>
 80055b4:	b19d      	cbz	r5, 80055de <_strtod_l+0x946>
 80055b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055b8:	421d      	tst	r5, r3
 80055ba:	f43f af65 	beq.w	8005488 <_strtod_l+0x7f0>
 80055be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80055c0:	9a05      	ldr	r2, [sp, #20]
 80055c2:	4648      	mov	r0, r9
 80055c4:	4651      	mov	r1, sl
 80055c6:	b173      	cbz	r3, 80055e6 <_strtod_l+0x94e>
 80055c8:	f7ff fb44 	bl	8004c54 <sulp>
 80055cc:	4602      	mov	r2, r0
 80055ce:	460b      	mov	r3, r1
 80055d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80055d4:	f7fa fe36 	bl	8000244 <__adddf3>
 80055d8:	4681      	mov	r9, r0
 80055da:	468a      	mov	sl, r1
 80055dc:	e754      	b.n	8005488 <_strtod_l+0x7f0>
 80055de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80055e0:	ea13 0f09 	tst.w	r3, r9
 80055e4:	e7e9      	b.n	80055ba <_strtod_l+0x922>
 80055e6:	f7ff fb35 	bl	8004c54 <sulp>
 80055ea:	4602      	mov	r2, r0
 80055ec:	460b      	mov	r3, r1
 80055ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80055f2:	f7fa fe25 	bl	8000240 <__aeabi_dsub>
 80055f6:	2200      	movs	r2, #0
 80055f8:	2300      	movs	r3, #0
 80055fa:	4681      	mov	r9, r0
 80055fc:	468a      	mov	sl, r1
 80055fe:	f7fb fa3f 	bl	8000a80 <__aeabi_dcmpeq>
 8005602:	2800      	cmp	r0, #0
 8005604:	f47f ae07 	bne.w	8005216 <_strtod_l+0x57e>
 8005608:	e73e      	b.n	8005488 <_strtod_l+0x7f0>
 800560a:	9904      	ldr	r1, [sp, #16]
 800560c:	4640      	mov	r0, r8
 800560e:	f001 ff22 	bl	8007456 <__ratio>
 8005612:	2200      	movs	r2, #0
 8005614:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005618:	4606      	mov	r6, r0
 800561a:	460f      	mov	r7, r1
 800561c:	f7fb fa44 	bl	8000aa8 <__aeabi_dcmple>
 8005620:	2800      	cmp	r0, #0
 8005622:	d075      	beq.n	8005710 <_strtod_l+0xa78>
 8005624:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005626:	2b00      	cmp	r3, #0
 8005628:	d047      	beq.n	80056ba <_strtod_l+0xa22>
 800562a:	2600      	movs	r6, #0
 800562c:	4f68      	ldr	r7, [pc, #416]	; (80057d0 <_strtod_l+0xb38>)
 800562e:	4d68      	ldr	r5, [pc, #416]	; (80057d0 <_strtod_l+0xb38>)
 8005630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005632:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005636:	0d1b      	lsrs	r3, r3, #20
 8005638:	051b      	lsls	r3, r3, #20
 800563a:	930f      	str	r3, [sp, #60]	; 0x3c
 800563c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800563e:	4b65      	ldr	r3, [pc, #404]	; (80057d4 <_strtod_l+0xb3c>)
 8005640:	429a      	cmp	r2, r3
 8005642:	f040 80cf 	bne.w	80057e4 <_strtod_l+0xb4c>
 8005646:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800564a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800564e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005650:	4648      	mov	r0, r9
 8005652:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8005656:	4651      	mov	r1, sl
 8005658:	f001 fe38 	bl	80072cc <__ulp>
 800565c:	4602      	mov	r2, r0
 800565e:	460b      	mov	r3, r1
 8005660:	4630      	mov	r0, r6
 8005662:	4639      	mov	r1, r7
 8005664:	f7fa ffa4 	bl	80005b0 <__aeabi_dmul>
 8005668:	464a      	mov	r2, r9
 800566a:	4653      	mov	r3, sl
 800566c:	f7fa fdea 	bl	8000244 <__adddf3>
 8005670:	460b      	mov	r3, r1
 8005672:	4954      	ldr	r1, [pc, #336]	; (80057c4 <_strtod_l+0xb2c>)
 8005674:	4a58      	ldr	r2, [pc, #352]	; (80057d8 <_strtod_l+0xb40>)
 8005676:	4019      	ands	r1, r3
 8005678:	4291      	cmp	r1, r2
 800567a:	4681      	mov	r9, r0
 800567c:	d95e      	bls.n	800573c <_strtod_l+0xaa4>
 800567e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005680:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005684:	4293      	cmp	r3, r2
 8005686:	d103      	bne.n	8005690 <_strtod_l+0x9f8>
 8005688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800568a:	3301      	adds	r3, #1
 800568c:	f43f ad26 	beq.w	80050dc <_strtod_l+0x444>
 8005690:	f04f 39ff 	mov.w	r9, #4294967295
 8005694:	f8df a130 	ldr.w	sl, [pc, #304]	; 80057c8 <_strtod_l+0xb30>
 8005698:	991c      	ldr	r1, [sp, #112]	; 0x70
 800569a:	4658      	mov	r0, fp
 800569c:	f001 fb7f 	bl	8006d9e <_Bfree>
 80056a0:	9906      	ldr	r1, [sp, #24]
 80056a2:	4658      	mov	r0, fp
 80056a4:	f001 fb7b 	bl	8006d9e <_Bfree>
 80056a8:	9904      	ldr	r1, [sp, #16]
 80056aa:	4658      	mov	r0, fp
 80056ac:	f001 fb77 	bl	8006d9e <_Bfree>
 80056b0:	4641      	mov	r1, r8
 80056b2:	4658      	mov	r0, fp
 80056b4:	f001 fb73 	bl	8006d9e <_Bfree>
 80056b8:	e617      	b.n	80052ea <_strtod_l+0x652>
 80056ba:	f1b9 0f00 	cmp.w	r9, #0
 80056be:	d119      	bne.n	80056f4 <_strtod_l+0xa5c>
 80056c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056c6:	b9e3      	cbnz	r3, 8005702 <_strtod_l+0xa6a>
 80056c8:	2200      	movs	r2, #0
 80056ca:	4b41      	ldr	r3, [pc, #260]	; (80057d0 <_strtod_l+0xb38>)
 80056cc:	4630      	mov	r0, r6
 80056ce:	4639      	mov	r1, r7
 80056d0:	f7fb f9e0 	bl	8000a94 <__aeabi_dcmplt>
 80056d4:	b9c8      	cbnz	r0, 800570a <_strtod_l+0xa72>
 80056d6:	2200      	movs	r2, #0
 80056d8:	4b40      	ldr	r3, [pc, #256]	; (80057dc <_strtod_l+0xb44>)
 80056da:	4630      	mov	r0, r6
 80056dc:	4639      	mov	r1, r7
 80056de:	f7fa ff67 	bl	80005b0 <__aeabi_dmul>
 80056e2:	4604      	mov	r4, r0
 80056e4:	460d      	mov	r5, r1
 80056e6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80056ea:	9418      	str	r4, [sp, #96]	; 0x60
 80056ec:	9319      	str	r3, [sp, #100]	; 0x64
 80056ee:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80056f2:	e79d      	b.n	8005630 <_strtod_l+0x998>
 80056f4:	f1b9 0f01 	cmp.w	r9, #1
 80056f8:	d103      	bne.n	8005702 <_strtod_l+0xa6a>
 80056fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f43f ad8a 	beq.w	8005216 <_strtod_l+0x57e>
 8005702:	2600      	movs	r6, #0
 8005704:	4f36      	ldr	r7, [pc, #216]	; (80057e0 <_strtod_l+0xb48>)
 8005706:	2400      	movs	r4, #0
 8005708:	e791      	b.n	800562e <_strtod_l+0x996>
 800570a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800570c:	4d33      	ldr	r5, [pc, #204]	; (80057dc <_strtod_l+0xb44>)
 800570e:	e7ea      	b.n	80056e6 <_strtod_l+0xa4e>
 8005710:	4b32      	ldr	r3, [pc, #200]	; (80057dc <_strtod_l+0xb44>)
 8005712:	2200      	movs	r2, #0
 8005714:	4630      	mov	r0, r6
 8005716:	4639      	mov	r1, r7
 8005718:	f7fa ff4a 	bl	80005b0 <__aeabi_dmul>
 800571c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800571e:	4604      	mov	r4, r0
 8005720:	460d      	mov	r5, r1
 8005722:	b933      	cbnz	r3, 8005732 <_strtod_l+0xa9a>
 8005724:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005728:	9010      	str	r0, [sp, #64]	; 0x40
 800572a:	9311      	str	r3, [sp, #68]	; 0x44
 800572c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005730:	e77e      	b.n	8005630 <_strtod_l+0x998>
 8005732:	4602      	mov	r2, r0
 8005734:	460b      	mov	r3, r1
 8005736:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800573a:	e7f7      	b.n	800572c <_strtod_l+0xa94>
 800573c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8005740:	9b05      	ldr	r3, [sp, #20]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1a8      	bne.n	8005698 <_strtod_l+0xa00>
 8005746:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800574a:	0d1b      	lsrs	r3, r3, #20
 800574c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800574e:	051b      	lsls	r3, r3, #20
 8005750:	429a      	cmp	r2, r3
 8005752:	4656      	mov	r6, sl
 8005754:	d1a0      	bne.n	8005698 <_strtod_l+0xa00>
 8005756:	4629      	mov	r1, r5
 8005758:	4620      	mov	r0, r4
 800575a:	f7fb f9d9 	bl	8000b10 <__aeabi_d2iz>
 800575e:	f7fa febd 	bl	80004dc <__aeabi_i2d>
 8005762:	460b      	mov	r3, r1
 8005764:	4602      	mov	r2, r0
 8005766:	4629      	mov	r1, r5
 8005768:	4620      	mov	r0, r4
 800576a:	f7fa fd69 	bl	8000240 <__aeabi_dsub>
 800576e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005770:	4604      	mov	r4, r0
 8005772:	460d      	mov	r5, r1
 8005774:	b933      	cbnz	r3, 8005784 <_strtod_l+0xaec>
 8005776:	f1b9 0f00 	cmp.w	r9, #0
 800577a:	d103      	bne.n	8005784 <_strtod_l+0xaec>
 800577c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8005780:	2e00      	cmp	r6, #0
 8005782:	d06a      	beq.n	800585a <_strtod_l+0xbc2>
 8005784:	a30a      	add	r3, pc, #40	; (adr r3, 80057b0 <_strtod_l+0xb18>)
 8005786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578a:	4620      	mov	r0, r4
 800578c:	4629      	mov	r1, r5
 800578e:	f7fb f981 	bl	8000a94 <__aeabi_dcmplt>
 8005792:	2800      	cmp	r0, #0
 8005794:	f47f acad 	bne.w	80050f2 <_strtod_l+0x45a>
 8005798:	a307      	add	r3, pc, #28	; (adr r3, 80057b8 <_strtod_l+0xb20>)
 800579a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579e:	4620      	mov	r0, r4
 80057a0:	4629      	mov	r1, r5
 80057a2:	f7fb f995 	bl	8000ad0 <__aeabi_dcmpgt>
 80057a6:	2800      	cmp	r0, #0
 80057a8:	f43f af76 	beq.w	8005698 <_strtod_l+0xa00>
 80057ac:	e4a1      	b.n	80050f2 <_strtod_l+0x45a>
 80057ae:	bf00      	nop
 80057b0:	94a03595 	.word	0x94a03595
 80057b4:	3fdfffff 	.word	0x3fdfffff
 80057b8:	35afe535 	.word	0x35afe535
 80057bc:	3fe00000 	.word	0x3fe00000
 80057c0:	000fffff 	.word	0x000fffff
 80057c4:	7ff00000 	.word	0x7ff00000
 80057c8:	7fefffff 	.word	0x7fefffff
 80057cc:	39500000 	.word	0x39500000
 80057d0:	3ff00000 	.word	0x3ff00000
 80057d4:	7fe00000 	.word	0x7fe00000
 80057d8:	7c9fffff 	.word	0x7c9fffff
 80057dc:	3fe00000 	.word	0x3fe00000
 80057e0:	bff00000 	.word	0xbff00000
 80057e4:	9b05      	ldr	r3, [sp, #20]
 80057e6:	b313      	cbz	r3, 800582e <_strtod_l+0xb96>
 80057e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057ea:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80057ee:	d81e      	bhi.n	800582e <_strtod_l+0xb96>
 80057f0:	a325      	add	r3, pc, #148	; (adr r3, 8005888 <_strtod_l+0xbf0>)
 80057f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f6:	4620      	mov	r0, r4
 80057f8:	4629      	mov	r1, r5
 80057fa:	f7fb f955 	bl	8000aa8 <__aeabi_dcmple>
 80057fe:	b190      	cbz	r0, 8005826 <_strtod_l+0xb8e>
 8005800:	4629      	mov	r1, r5
 8005802:	4620      	mov	r0, r4
 8005804:	f7fb f9ac 	bl	8000b60 <__aeabi_d2uiz>
 8005808:	2800      	cmp	r0, #0
 800580a:	bf08      	it	eq
 800580c:	2001      	moveq	r0, #1
 800580e:	f7fa fe55 	bl	80004bc <__aeabi_ui2d>
 8005812:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005814:	4604      	mov	r4, r0
 8005816:	460d      	mov	r5, r1
 8005818:	b9d3      	cbnz	r3, 8005850 <_strtod_l+0xbb8>
 800581a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800581e:	9012      	str	r0, [sp, #72]	; 0x48
 8005820:	9313      	str	r3, [sp, #76]	; 0x4c
 8005822:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005826:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005828:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800582c:	1a9f      	subs	r7, r3, r2
 800582e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005832:	f001 fd4b 	bl	80072cc <__ulp>
 8005836:	4602      	mov	r2, r0
 8005838:	460b      	mov	r3, r1
 800583a:	4630      	mov	r0, r6
 800583c:	4639      	mov	r1, r7
 800583e:	f7fa feb7 	bl	80005b0 <__aeabi_dmul>
 8005842:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005846:	f7fa fcfd 	bl	8000244 <__adddf3>
 800584a:	4681      	mov	r9, r0
 800584c:	468a      	mov	sl, r1
 800584e:	e777      	b.n	8005740 <_strtod_l+0xaa8>
 8005850:	4602      	mov	r2, r0
 8005852:	460b      	mov	r3, r1
 8005854:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005858:	e7e3      	b.n	8005822 <_strtod_l+0xb8a>
 800585a:	a30d      	add	r3, pc, #52	; (adr r3, 8005890 <_strtod_l+0xbf8>)
 800585c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005860:	f7fb f918 	bl	8000a94 <__aeabi_dcmplt>
 8005864:	e79f      	b.n	80057a6 <_strtod_l+0xb0e>
 8005866:	2300      	movs	r3, #0
 8005868:	930d      	str	r3, [sp, #52]	; 0x34
 800586a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800586c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800586e:	6013      	str	r3, [r2, #0]
 8005870:	f7ff ba55 	b.w	8004d1e <_strtod_l+0x86>
 8005874:	2b65      	cmp	r3, #101	; 0x65
 8005876:	f04f 0200 	mov.w	r2, #0
 800587a:	f43f ab42 	beq.w	8004f02 <_strtod_l+0x26a>
 800587e:	2101      	movs	r1, #1
 8005880:	4614      	mov	r4, r2
 8005882:	9105      	str	r1, [sp, #20]
 8005884:	f7ff babf 	b.w	8004e06 <_strtod_l+0x16e>
 8005888:	ffc00000 	.word	0xffc00000
 800588c:	41dfffff 	.word	0x41dfffff
 8005890:	94a03595 	.word	0x94a03595
 8005894:	3fcfffff 	.word	0x3fcfffff

08005898 <_strtod_r>:
 8005898:	4b05      	ldr	r3, [pc, #20]	; (80058b0 <_strtod_r+0x18>)
 800589a:	b410      	push	{r4}
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4c05      	ldr	r4, [pc, #20]	; (80058b4 <_strtod_r+0x1c>)
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	bf08      	it	eq
 80058a6:	4623      	moveq	r3, r4
 80058a8:	bc10      	pop	{r4}
 80058aa:	f7ff b9f5 	b.w	8004c98 <_strtod_l>
 80058ae:	bf00      	nop
 80058b0:	2000000c 	.word	0x2000000c
 80058b4:	20000070 	.word	0x20000070

080058b8 <_strtol_l.isra.0>:
 80058b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058bc:	4680      	mov	r8, r0
 80058be:	4689      	mov	r9, r1
 80058c0:	4692      	mov	sl, r2
 80058c2:	461e      	mov	r6, r3
 80058c4:	460f      	mov	r7, r1
 80058c6:	463d      	mov	r5, r7
 80058c8:	9808      	ldr	r0, [sp, #32]
 80058ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80058ce:	f001 f9eb 	bl	8006ca8 <__locale_ctype_ptr_l>
 80058d2:	4420      	add	r0, r4
 80058d4:	7843      	ldrb	r3, [r0, #1]
 80058d6:	f013 0308 	ands.w	r3, r3, #8
 80058da:	d132      	bne.n	8005942 <_strtol_l.isra.0+0x8a>
 80058dc:	2c2d      	cmp	r4, #45	; 0x2d
 80058de:	d132      	bne.n	8005946 <_strtol_l.isra.0+0x8e>
 80058e0:	2201      	movs	r2, #1
 80058e2:	787c      	ldrb	r4, [r7, #1]
 80058e4:	1cbd      	adds	r5, r7, #2
 80058e6:	2e00      	cmp	r6, #0
 80058e8:	d05d      	beq.n	80059a6 <_strtol_l.isra.0+0xee>
 80058ea:	2e10      	cmp	r6, #16
 80058ec:	d109      	bne.n	8005902 <_strtol_l.isra.0+0x4a>
 80058ee:	2c30      	cmp	r4, #48	; 0x30
 80058f0:	d107      	bne.n	8005902 <_strtol_l.isra.0+0x4a>
 80058f2:	782b      	ldrb	r3, [r5, #0]
 80058f4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80058f8:	2b58      	cmp	r3, #88	; 0x58
 80058fa:	d14f      	bne.n	800599c <_strtol_l.isra.0+0xe4>
 80058fc:	2610      	movs	r6, #16
 80058fe:	786c      	ldrb	r4, [r5, #1]
 8005900:	3502      	adds	r5, #2
 8005902:	2a00      	cmp	r2, #0
 8005904:	bf14      	ite	ne
 8005906:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800590a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800590e:	2700      	movs	r7, #0
 8005910:	fbb1 fcf6 	udiv	ip, r1, r6
 8005914:	4638      	mov	r0, r7
 8005916:	fb06 1e1c 	mls	lr, r6, ip, r1
 800591a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800591e:	2b09      	cmp	r3, #9
 8005920:	d817      	bhi.n	8005952 <_strtol_l.isra.0+0x9a>
 8005922:	461c      	mov	r4, r3
 8005924:	42a6      	cmp	r6, r4
 8005926:	dd23      	ble.n	8005970 <_strtol_l.isra.0+0xb8>
 8005928:	1c7b      	adds	r3, r7, #1
 800592a:	d007      	beq.n	800593c <_strtol_l.isra.0+0x84>
 800592c:	4584      	cmp	ip, r0
 800592e:	d31c      	bcc.n	800596a <_strtol_l.isra.0+0xb2>
 8005930:	d101      	bne.n	8005936 <_strtol_l.isra.0+0x7e>
 8005932:	45a6      	cmp	lr, r4
 8005934:	db19      	blt.n	800596a <_strtol_l.isra.0+0xb2>
 8005936:	2701      	movs	r7, #1
 8005938:	fb00 4006 	mla	r0, r0, r6, r4
 800593c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005940:	e7eb      	b.n	800591a <_strtol_l.isra.0+0x62>
 8005942:	462f      	mov	r7, r5
 8005944:	e7bf      	b.n	80058c6 <_strtol_l.isra.0+0xe>
 8005946:	2c2b      	cmp	r4, #43	; 0x2b
 8005948:	bf04      	itt	eq
 800594a:	1cbd      	addeq	r5, r7, #2
 800594c:	787c      	ldrbeq	r4, [r7, #1]
 800594e:	461a      	mov	r2, r3
 8005950:	e7c9      	b.n	80058e6 <_strtol_l.isra.0+0x2e>
 8005952:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005956:	2b19      	cmp	r3, #25
 8005958:	d801      	bhi.n	800595e <_strtol_l.isra.0+0xa6>
 800595a:	3c37      	subs	r4, #55	; 0x37
 800595c:	e7e2      	b.n	8005924 <_strtol_l.isra.0+0x6c>
 800595e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005962:	2b19      	cmp	r3, #25
 8005964:	d804      	bhi.n	8005970 <_strtol_l.isra.0+0xb8>
 8005966:	3c57      	subs	r4, #87	; 0x57
 8005968:	e7dc      	b.n	8005924 <_strtol_l.isra.0+0x6c>
 800596a:	f04f 37ff 	mov.w	r7, #4294967295
 800596e:	e7e5      	b.n	800593c <_strtol_l.isra.0+0x84>
 8005970:	1c7b      	adds	r3, r7, #1
 8005972:	d108      	bne.n	8005986 <_strtol_l.isra.0+0xce>
 8005974:	2322      	movs	r3, #34	; 0x22
 8005976:	4608      	mov	r0, r1
 8005978:	f8c8 3000 	str.w	r3, [r8]
 800597c:	f1ba 0f00 	cmp.w	sl, #0
 8005980:	d107      	bne.n	8005992 <_strtol_l.isra.0+0xda>
 8005982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005986:	b102      	cbz	r2, 800598a <_strtol_l.isra.0+0xd2>
 8005988:	4240      	negs	r0, r0
 800598a:	f1ba 0f00 	cmp.w	sl, #0
 800598e:	d0f8      	beq.n	8005982 <_strtol_l.isra.0+0xca>
 8005990:	b10f      	cbz	r7, 8005996 <_strtol_l.isra.0+0xde>
 8005992:	f105 39ff 	add.w	r9, r5, #4294967295
 8005996:	f8ca 9000 	str.w	r9, [sl]
 800599a:	e7f2      	b.n	8005982 <_strtol_l.isra.0+0xca>
 800599c:	2430      	movs	r4, #48	; 0x30
 800599e:	2e00      	cmp	r6, #0
 80059a0:	d1af      	bne.n	8005902 <_strtol_l.isra.0+0x4a>
 80059a2:	2608      	movs	r6, #8
 80059a4:	e7ad      	b.n	8005902 <_strtol_l.isra.0+0x4a>
 80059a6:	2c30      	cmp	r4, #48	; 0x30
 80059a8:	d0a3      	beq.n	80058f2 <_strtol_l.isra.0+0x3a>
 80059aa:	260a      	movs	r6, #10
 80059ac:	e7a9      	b.n	8005902 <_strtol_l.isra.0+0x4a>
	...

080059b0 <_strtol_r>:
 80059b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059b2:	4c06      	ldr	r4, [pc, #24]	; (80059cc <_strtol_r+0x1c>)
 80059b4:	4d06      	ldr	r5, [pc, #24]	; (80059d0 <_strtol_r+0x20>)
 80059b6:	6824      	ldr	r4, [r4, #0]
 80059b8:	6a24      	ldr	r4, [r4, #32]
 80059ba:	2c00      	cmp	r4, #0
 80059bc:	bf08      	it	eq
 80059be:	462c      	moveq	r4, r5
 80059c0:	9400      	str	r4, [sp, #0]
 80059c2:	f7ff ff79 	bl	80058b8 <_strtol_l.isra.0>
 80059c6:	b003      	add	sp, #12
 80059c8:	bd30      	pop	{r4, r5, pc}
 80059ca:	bf00      	nop
 80059cc:	2000000c 	.word	0x2000000c
 80059d0:	20000070 	.word	0x20000070

080059d4 <quorem>:
 80059d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059d8:	6903      	ldr	r3, [r0, #16]
 80059da:	690c      	ldr	r4, [r1, #16]
 80059dc:	4680      	mov	r8, r0
 80059de:	42a3      	cmp	r3, r4
 80059e0:	f2c0 8084 	blt.w	8005aec <quorem+0x118>
 80059e4:	3c01      	subs	r4, #1
 80059e6:	f101 0714 	add.w	r7, r1, #20
 80059ea:	f100 0614 	add.w	r6, r0, #20
 80059ee:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80059f2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80059f6:	3501      	adds	r5, #1
 80059f8:	fbb0 f5f5 	udiv	r5, r0, r5
 80059fc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005a00:	eb06 030c 	add.w	r3, r6, ip
 8005a04:	eb07 090c 	add.w	r9, r7, ip
 8005a08:	9301      	str	r3, [sp, #4]
 8005a0a:	b39d      	cbz	r5, 8005a74 <quorem+0xa0>
 8005a0c:	f04f 0a00 	mov.w	sl, #0
 8005a10:	4638      	mov	r0, r7
 8005a12:	46b6      	mov	lr, r6
 8005a14:	46d3      	mov	fp, sl
 8005a16:	f850 2b04 	ldr.w	r2, [r0], #4
 8005a1a:	b293      	uxth	r3, r2
 8005a1c:	fb05 a303 	mla	r3, r5, r3, sl
 8005a20:	0c12      	lsrs	r2, r2, #16
 8005a22:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005a26:	fb05 a202 	mla	r2, r5, r2, sl
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	ebab 0303 	sub.w	r3, fp, r3
 8005a30:	f8de b000 	ldr.w	fp, [lr]
 8005a34:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005a38:	fa1f fb8b 	uxth.w	fp, fp
 8005a3c:	445b      	add	r3, fp
 8005a3e:	fa1f fb82 	uxth.w	fp, r2
 8005a42:	f8de 2000 	ldr.w	r2, [lr]
 8005a46:	4581      	cmp	r9, r0
 8005a48:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005a4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a56:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005a5a:	f84e 3b04 	str.w	r3, [lr], #4
 8005a5e:	d2da      	bcs.n	8005a16 <quorem+0x42>
 8005a60:	f856 300c 	ldr.w	r3, [r6, ip]
 8005a64:	b933      	cbnz	r3, 8005a74 <quorem+0xa0>
 8005a66:	9b01      	ldr	r3, [sp, #4]
 8005a68:	3b04      	subs	r3, #4
 8005a6a:	429e      	cmp	r6, r3
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	d331      	bcc.n	8005ad4 <quorem+0x100>
 8005a70:	f8c8 4010 	str.w	r4, [r8, #16]
 8005a74:	4640      	mov	r0, r8
 8005a76:	f001 fbb1 	bl	80071dc <__mcmp>
 8005a7a:	2800      	cmp	r0, #0
 8005a7c:	db26      	blt.n	8005acc <quorem+0xf8>
 8005a7e:	4630      	mov	r0, r6
 8005a80:	f04f 0c00 	mov.w	ip, #0
 8005a84:	3501      	adds	r5, #1
 8005a86:	f857 1b04 	ldr.w	r1, [r7], #4
 8005a8a:	f8d0 e000 	ldr.w	lr, [r0]
 8005a8e:	b28b      	uxth	r3, r1
 8005a90:	ebac 0303 	sub.w	r3, ip, r3
 8005a94:	fa1f f28e 	uxth.w	r2, lr
 8005a98:	4413      	add	r3, r2
 8005a9a:	0c0a      	lsrs	r2, r1, #16
 8005a9c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005aa0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005aaa:	45b9      	cmp	r9, r7
 8005aac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005ab0:	f840 3b04 	str.w	r3, [r0], #4
 8005ab4:	d2e7      	bcs.n	8005a86 <quorem+0xb2>
 8005ab6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005aba:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005abe:	b92a      	cbnz	r2, 8005acc <quorem+0xf8>
 8005ac0:	3b04      	subs	r3, #4
 8005ac2:	429e      	cmp	r6, r3
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	d30b      	bcc.n	8005ae0 <quorem+0x10c>
 8005ac8:	f8c8 4010 	str.w	r4, [r8, #16]
 8005acc:	4628      	mov	r0, r5
 8005ace:	b003      	add	sp, #12
 8005ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ad4:	6812      	ldr	r2, [r2, #0]
 8005ad6:	3b04      	subs	r3, #4
 8005ad8:	2a00      	cmp	r2, #0
 8005ada:	d1c9      	bne.n	8005a70 <quorem+0x9c>
 8005adc:	3c01      	subs	r4, #1
 8005ade:	e7c4      	b.n	8005a6a <quorem+0x96>
 8005ae0:	6812      	ldr	r2, [r2, #0]
 8005ae2:	3b04      	subs	r3, #4
 8005ae4:	2a00      	cmp	r2, #0
 8005ae6:	d1ef      	bne.n	8005ac8 <quorem+0xf4>
 8005ae8:	3c01      	subs	r4, #1
 8005aea:	e7ea      	b.n	8005ac2 <quorem+0xee>
 8005aec:	2000      	movs	r0, #0
 8005aee:	e7ee      	b.n	8005ace <quorem+0xfa>

08005af0 <_dtoa_r>:
 8005af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005af4:	4616      	mov	r6, r2
 8005af6:	461f      	mov	r7, r3
 8005af8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005afa:	b095      	sub	sp, #84	; 0x54
 8005afc:	4604      	mov	r4, r0
 8005afe:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8005b02:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005b06:	b93d      	cbnz	r5, 8005b18 <_dtoa_r+0x28>
 8005b08:	2010      	movs	r0, #16
 8005b0a:	f001 f8e1 	bl	8006cd0 <malloc>
 8005b0e:	6260      	str	r0, [r4, #36]	; 0x24
 8005b10:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005b14:	6005      	str	r5, [r0, #0]
 8005b16:	60c5      	str	r5, [r0, #12]
 8005b18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b1a:	6819      	ldr	r1, [r3, #0]
 8005b1c:	b151      	cbz	r1, 8005b34 <_dtoa_r+0x44>
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	2301      	movs	r3, #1
 8005b22:	4093      	lsls	r3, r2
 8005b24:	604a      	str	r2, [r1, #4]
 8005b26:	608b      	str	r3, [r1, #8]
 8005b28:	4620      	mov	r0, r4
 8005b2a:	f001 f938 	bl	8006d9e <_Bfree>
 8005b2e:	2200      	movs	r2, #0
 8005b30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	1e3b      	subs	r3, r7, #0
 8005b36:	bfaf      	iteee	ge
 8005b38:	2300      	movge	r3, #0
 8005b3a:	2201      	movlt	r2, #1
 8005b3c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005b40:	9303      	strlt	r3, [sp, #12]
 8005b42:	bfac      	ite	ge
 8005b44:	f8c8 3000 	strge.w	r3, [r8]
 8005b48:	f8c8 2000 	strlt.w	r2, [r8]
 8005b4c:	4bae      	ldr	r3, [pc, #696]	; (8005e08 <_dtoa_r+0x318>)
 8005b4e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005b52:	ea33 0308 	bics.w	r3, r3, r8
 8005b56:	d11b      	bne.n	8005b90 <_dtoa_r+0xa0>
 8005b58:	f242 730f 	movw	r3, #9999	; 0x270f
 8005b5c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005b5e:	6013      	str	r3, [r2, #0]
 8005b60:	9b02      	ldr	r3, [sp, #8]
 8005b62:	b923      	cbnz	r3, 8005b6e <_dtoa_r+0x7e>
 8005b64:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005b68:	2800      	cmp	r0, #0
 8005b6a:	f000 8545 	beq.w	80065f8 <_dtoa_r+0xb08>
 8005b6e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b70:	b953      	cbnz	r3, 8005b88 <_dtoa_r+0x98>
 8005b72:	4ba6      	ldr	r3, [pc, #664]	; (8005e0c <_dtoa_r+0x31c>)
 8005b74:	e021      	b.n	8005bba <_dtoa_r+0xca>
 8005b76:	4ba6      	ldr	r3, [pc, #664]	; (8005e10 <_dtoa_r+0x320>)
 8005b78:	9306      	str	r3, [sp, #24]
 8005b7a:	3308      	adds	r3, #8
 8005b7c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005b7e:	6013      	str	r3, [r2, #0]
 8005b80:	9806      	ldr	r0, [sp, #24]
 8005b82:	b015      	add	sp, #84	; 0x54
 8005b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b88:	4ba0      	ldr	r3, [pc, #640]	; (8005e0c <_dtoa_r+0x31c>)
 8005b8a:	9306      	str	r3, [sp, #24]
 8005b8c:	3303      	adds	r3, #3
 8005b8e:	e7f5      	b.n	8005b7c <_dtoa_r+0x8c>
 8005b90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005b94:	2200      	movs	r2, #0
 8005b96:	2300      	movs	r3, #0
 8005b98:	4630      	mov	r0, r6
 8005b9a:	4639      	mov	r1, r7
 8005b9c:	f7fa ff70 	bl	8000a80 <__aeabi_dcmpeq>
 8005ba0:	4682      	mov	sl, r0
 8005ba2:	b160      	cbz	r0, 8005bbe <_dtoa_r+0xce>
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005ba8:	6013      	str	r3, [r2, #0]
 8005baa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f000 8520 	beq.w	80065f2 <_dtoa_r+0xb02>
 8005bb2:	4b98      	ldr	r3, [pc, #608]	; (8005e14 <_dtoa_r+0x324>)
 8005bb4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005bb6:	6013      	str	r3, [r2, #0]
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	9306      	str	r3, [sp, #24]
 8005bbc:	e7e0      	b.n	8005b80 <_dtoa_r+0x90>
 8005bbe:	ab12      	add	r3, sp, #72	; 0x48
 8005bc0:	9301      	str	r3, [sp, #4]
 8005bc2:	ab13      	add	r3, sp, #76	; 0x4c
 8005bc4:	9300      	str	r3, [sp, #0]
 8005bc6:	4632      	mov	r2, r6
 8005bc8:	463b      	mov	r3, r7
 8005bca:	4620      	mov	r0, r4
 8005bcc:	f001 fbf4 	bl	80073b8 <__d2b>
 8005bd0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005bd4:	4683      	mov	fp, r0
 8005bd6:	2d00      	cmp	r5, #0
 8005bd8:	d07d      	beq.n	8005cd6 <_dtoa_r+0x1e6>
 8005bda:	46b0      	mov	r8, r6
 8005bdc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005be0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8005be4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005be8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005bec:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	4b89      	ldr	r3, [pc, #548]	; (8005e18 <_dtoa_r+0x328>)
 8005bf4:	4640      	mov	r0, r8
 8005bf6:	4649      	mov	r1, r9
 8005bf8:	f7fa fb22 	bl	8000240 <__aeabi_dsub>
 8005bfc:	a37c      	add	r3, pc, #496	; (adr r3, 8005df0 <_dtoa_r+0x300>)
 8005bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c02:	f7fa fcd5 	bl	80005b0 <__aeabi_dmul>
 8005c06:	a37c      	add	r3, pc, #496	; (adr r3, 8005df8 <_dtoa_r+0x308>)
 8005c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0c:	f7fa fb1a 	bl	8000244 <__adddf3>
 8005c10:	4606      	mov	r6, r0
 8005c12:	4628      	mov	r0, r5
 8005c14:	460f      	mov	r7, r1
 8005c16:	f7fa fc61 	bl	80004dc <__aeabi_i2d>
 8005c1a:	a379      	add	r3, pc, #484	; (adr r3, 8005e00 <_dtoa_r+0x310>)
 8005c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c20:	f7fa fcc6 	bl	80005b0 <__aeabi_dmul>
 8005c24:	4602      	mov	r2, r0
 8005c26:	460b      	mov	r3, r1
 8005c28:	4630      	mov	r0, r6
 8005c2a:	4639      	mov	r1, r7
 8005c2c:	f7fa fb0a 	bl	8000244 <__adddf3>
 8005c30:	4606      	mov	r6, r0
 8005c32:	460f      	mov	r7, r1
 8005c34:	f7fa ff6c 	bl	8000b10 <__aeabi_d2iz>
 8005c38:	2200      	movs	r2, #0
 8005c3a:	4682      	mov	sl, r0
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	4630      	mov	r0, r6
 8005c40:	4639      	mov	r1, r7
 8005c42:	f7fa ff27 	bl	8000a94 <__aeabi_dcmplt>
 8005c46:	b148      	cbz	r0, 8005c5c <_dtoa_r+0x16c>
 8005c48:	4650      	mov	r0, sl
 8005c4a:	f7fa fc47 	bl	80004dc <__aeabi_i2d>
 8005c4e:	4632      	mov	r2, r6
 8005c50:	463b      	mov	r3, r7
 8005c52:	f7fa ff15 	bl	8000a80 <__aeabi_dcmpeq>
 8005c56:	b908      	cbnz	r0, 8005c5c <_dtoa_r+0x16c>
 8005c58:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c5c:	f1ba 0f16 	cmp.w	sl, #22
 8005c60:	d85a      	bhi.n	8005d18 <_dtoa_r+0x228>
 8005c62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c66:	496d      	ldr	r1, [pc, #436]	; (8005e1c <_dtoa_r+0x32c>)
 8005c68:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005c6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c70:	f7fa ff2e 	bl	8000ad0 <__aeabi_dcmpgt>
 8005c74:	2800      	cmp	r0, #0
 8005c76:	d051      	beq.n	8005d1c <_dtoa_r+0x22c>
 8005c78:	2300      	movs	r3, #0
 8005c7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c7e:	930d      	str	r3, [sp, #52]	; 0x34
 8005c80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005c82:	1b5d      	subs	r5, r3, r5
 8005c84:	1e6b      	subs	r3, r5, #1
 8005c86:	9307      	str	r3, [sp, #28]
 8005c88:	bf43      	ittte	mi
 8005c8a:	2300      	movmi	r3, #0
 8005c8c:	f1c5 0901 	rsbmi	r9, r5, #1
 8005c90:	9307      	strmi	r3, [sp, #28]
 8005c92:	f04f 0900 	movpl.w	r9, #0
 8005c96:	f1ba 0f00 	cmp.w	sl, #0
 8005c9a:	db41      	blt.n	8005d20 <_dtoa_r+0x230>
 8005c9c:	9b07      	ldr	r3, [sp, #28]
 8005c9e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005ca2:	4453      	add	r3, sl
 8005ca4:	9307      	str	r3, [sp, #28]
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	9308      	str	r3, [sp, #32]
 8005caa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005cac:	2b09      	cmp	r3, #9
 8005cae:	f200 808f 	bhi.w	8005dd0 <_dtoa_r+0x2e0>
 8005cb2:	2b05      	cmp	r3, #5
 8005cb4:	bfc4      	itt	gt
 8005cb6:	3b04      	subgt	r3, #4
 8005cb8:	931e      	strgt	r3, [sp, #120]	; 0x78
 8005cba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005cbc:	bfc8      	it	gt
 8005cbe:	2500      	movgt	r5, #0
 8005cc0:	f1a3 0302 	sub.w	r3, r3, #2
 8005cc4:	bfd8      	it	le
 8005cc6:	2501      	movle	r5, #1
 8005cc8:	2b03      	cmp	r3, #3
 8005cca:	f200 808d 	bhi.w	8005de8 <_dtoa_r+0x2f8>
 8005cce:	e8df f003 	tbb	[pc, r3]
 8005cd2:	7d7b      	.short	0x7d7b
 8005cd4:	6f2f      	.short	0x6f2f
 8005cd6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005cda:	441d      	add	r5, r3
 8005cdc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005ce0:	2820      	cmp	r0, #32
 8005ce2:	dd13      	ble.n	8005d0c <_dtoa_r+0x21c>
 8005ce4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005ce8:	9b02      	ldr	r3, [sp, #8]
 8005cea:	fa08 f800 	lsl.w	r8, r8, r0
 8005cee:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005cf2:	fa23 f000 	lsr.w	r0, r3, r0
 8005cf6:	ea48 0000 	orr.w	r0, r8, r0
 8005cfa:	f7fa fbdf 	bl	80004bc <__aeabi_ui2d>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	4680      	mov	r8, r0
 8005d02:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8005d06:	3d01      	subs	r5, #1
 8005d08:	9310      	str	r3, [sp, #64]	; 0x40
 8005d0a:	e771      	b.n	8005bf0 <_dtoa_r+0x100>
 8005d0c:	9b02      	ldr	r3, [sp, #8]
 8005d0e:	f1c0 0020 	rsb	r0, r0, #32
 8005d12:	fa03 f000 	lsl.w	r0, r3, r0
 8005d16:	e7f0      	b.n	8005cfa <_dtoa_r+0x20a>
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e7b0      	b.n	8005c7e <_dtoa_r+0x18e>
 8005d1c:	900d      	str	r0, [sp, #52]	; 0x34
 8005d1e:	e7af      	b.n	8005c80 <_dtoa_r+0x190>
 8005d20:	f1ca 0300 	rsb	r3, sl, #0
 8005d24:	9308      	str	r3, [sp, #32]
 8005d26:	2300      	movs	r3, #0
 8005d28:	eba9 090a 	sub.w	r9, r9, sl
 8005d2c:	930c      	str	r3, [sp, #48]	; 0x30
 8005d2e:	e7bc      	b.n	8005caa <_dtoa_r+0x1ba>
 8005d30:	2301      	movs	r3, #1
 8005d32:	9309      	str	r3, [sp, #36]	; 0x24
 8005d34:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	dd74      	ble.n	8005e24 <_dtoa_r+0x334>
 8005d3a:	4698      	mov	r8, r3
 8005d3c:	9304      	str	r3, [sp, #16]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005d42:	6072      	str	r2, [r6, #4]
 8005d44:	2204      	movs	r2, #4
 8005d46:	f102 0014 	add.w	r0, r2, #20
 8005d4a:	4298      	cmp	r0, r3
 8005d4c:	6871      	ldr	r1, [r6, #4]
 8005d4e:	d96e      	bls.n	8005e2e <_dtoa_r+0x33e>
 8005d50:	4620      	mov	r0, r4
 8005d52:	f000 fff0 	bl	8006d36 <_Balloc>
 8005d56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d58:	6030      	str	r0, [r6, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f1b8 0f0e 	cmp.w	r8, #14
 8005d60:	9306      	str	r3, [sp, #24]
 8005d62:	f200 80ed 	bhi.w	8005f40 <_dtoa_r+0x450>
 8005d66:	2d00      	cmp	r5, #0
 8005d68:	f000 80ea 	beq.w	8005f40 <_dtoa_r+0x450>
 8005d6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d70:	f1ba 0f00 	cmp.w	sl, #0
 8005d74:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005d78:	dd77      	ble.n	8005e6a <_dtoa_r+0x37a>
 8005d7a:	4a28      	ldr	r2, [pc, #160]	; (8005e1c <_dtoa_r+0x32c>)
 8005d7c:	f00a 030f 	and.w	r3, sl, #15
 8005d80:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005d84:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005d88:	06f0      	lsls	r0, r6, #27
 8005d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005d92:	d568      	bpl.n	8005e66 <_dtoa_r+0x376>
 8005d94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005d98:	4b21      	ldr	r3, [pc, #132]	; (8005e20 <_dtoa_r+0x330>)
 8005d9a:	2503      	movs	r5, #3
 8005d9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005da0:	f7fa fd30 	bl	8000804 <__aeabi_ddiv>
 8005da4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005da8:	f006 060f 	and.w	r6, r6, #15
 8005dac:	4f1c      	ldr	r7, [pc, #112]	; (8005e20 <_dtoa_r+0x330>)
 8005dae:	e04f      	b.n	8005e50 <_dtoa_r+0x360>
 8005db0:	2301      	movs	r3, #1
 8005db2:	9309      	str	r3, [sp, #36]	; 0x24
 8005db4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005db6:	4453      	add	r3, sl
 8005db8:	f103 0801 	add.w	r8, r3, #1
 8005dbc:	9304      	str	r3, [sp, #16]
 8005dbe:	4643      	mov	r3, r8
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	bfb8      	it	lt
 8005dc4:	2301      	movlt	r3, #1
 8005dc6:	e7ba      	b.n	8005d3e <_dtoa_r+0x24e>
 8005dc8:	2300      	movs	r3, #0
 8005dca:	e7b2      	b.n	8005d32 <_dtoa_r+0x242>
 8005dcc:	2300      	movs	r3, #0
 8005dce:	e7f0      	b.n	8005db2 <_dtoa_r+0x2c2>
 8005dd0:	2501      	movs	r5, #1
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	9509      	str	r5, [sp, #36]	; 0x24
 8005dd6:	931e      	str	r3, [sp, #120]	; 0x78
 8005dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8005ddc:	2200      	movs	r2, #0
 8005dde:	9304      	str	r3, [sp, #16]
 8005de0:	4698      	mov	r8, r3
 8005de2:	2312      	movs	r3, #18
 8005de4:	921f      	str	r2, [sp, #124]	; 0x7c
 8005de6:	e7aa      	b.n	8005d3e <_dtoa_r+0x24e>
 8005de8:	2301      	movs	r3, #1
 8005dea:	9309      	str	r3, [sp, #36]	; 0x24
 8005dec:	e7f4      	b.n	8005dd8 <_dtoa_r+0x2e8>
 8005dee:	bf00      	nop
 8005df0:	636f4361 	.word	0x636f4361
 8005df4:	3fd287a7 	.word	0x3fd287a7
 8005df8:	8b60c8b3 	.word	0x8b60c8b3
 8005dfc:	3fc68a28 	.word	0x3fc68a28
 8005e00:	509f79fb 	.word	0x509f79fb
 8005e04:	3fd34413 	.word	0x3fd34413
 8005e08:	7ff00000 	.word	0x7ff00000
 8005e0c:	08007b01 	.word	0x08007b01
 8005e10:	08007af8 	.word	0x08007af8
 8005e14:	08007a7d 	.word	0x08007a7d
 8005e18:	3ff80000 	.word	0x3ff80000
 8005e1c:	08007b38 	.word	0x08007b38
 8005e20:	08007b10 	.word	0x08007b10
 8005e24:	2301      	movs	r3, #1
 8005e26:	9304      	str	r3, [sp, #16]
 8005e28:	4698      	mov	r8, r3
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	e7da      	b.n	8005de4 <_dtoa_r+0x2f4>
 8005e2e:	3101      	adds	r1, #1
 8005e30:	6071      	str	r1, [r6, #4]
 8005e32:	0052      	lsls	r2, r2, #1
 8005e34:	e787      	b.n	8005d46 <_dtoa_r+0x256>
 8005e36:	07f1      	lsls	r1, r6, #31
 8005e38:	d508      	bpl.n	8005e4c <_dtoa_r+0x35c>
 8005e3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005e3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e42:	f7fa fbb5 	bl	80005b0 <__aeabi_dmul>
 8005e46:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005e4a:	3501      	adds	r5, #1
 8005e4c:	1076      	asrs	r6, r6, #1
 8005e4e:	3708      	adds	r7, #8
 8005e50:	2e00      	cmp	r6, #0
 8005e52:	d1f0      	bne.n	8005e36 <_dtoa_r+0x346>
 8005e54:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005e58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e5c:	f7fa fcd2 	bl	8000804 <__aeabi_ddiv>
 8005e60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e64:	e01b      	b.n	8005e9e <_dtoa_r+0x3ae>
 8005e66:	2502      	movs	r5, #2
 8005e68:	e7a0      	b.n	8005dac <_dtoa_r+0x2bc>
 8005e6a:	f000 80a4 	beq.w	8005fb6 <_dtoa_r+0x4c6>
 8005e6e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005e72:	f1ca 0600 	rsb	r6, sl, #0
 8005e76:	4ba0      	ldr	r3, [pc, #640]	; (80060f8 <_dtoa_r+0x608>)
 8005e78:	f006 020f 	and.w	r2, r6, #15
 8005e7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e84:	f7fa fb94 	bl	80005b0 <__aeabi_dmul>
 8005e88:	2502      	movs	r5, #2
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e90:	4f9a      	ldr	r7, [pc, #616]	; (80060fc <_dtoa_r+0x60c>)
 8005e92:	1136      	asrs	r6, r6, #4
 8005e94:	2e00      	cmp	r6, #0
 8005e96:	f040 8083 	bne.w	8005fa0 <_dtoa_r+0x4b0>
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1e0      	bne.n	8005e60 <_dtoa_r+0x370>
 8005e9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 808a 	beq.w	8005fba <_dtoa_r+0x4ca>
 8005ea6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005eaa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005eae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	4b92      	ldr	r3, [pc, #584]	; (8006100 <_dtoa_r+0x610>)
 8005eb6:	f7fa fded 	bl	8000a94 <__aeabi_dcmplt>
 8005eba:	2800      	cmp	r0, #0
 8005ebc:	d07d      	beq.n	8005fba <_dtoa_r+0x4ca>
 8005ebe:	f1b8 0f00 	cmp.w	r8, #0
 8005ec2:	d07a      	beq.n	8005fba <_dtoa_r+0x4ca>
 8005ec4:	9b04      	ldr	r3, [sp, #16]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	dd36      	ble.n	8005f38 <_dtoa_r+0x448>
 8005eca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005ece:	2200      	movs	r2, #0
 8005ed0:	4b8c      	ldr	r3, [pc, #560]	; (8006104 <_dtoa_r+0x614>)
 8005ed2:	f7fa fb6d 	bl	80005b0 <__aeabi_dmul>
 8005ed6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005eda:	9e04      	ldr	r6, [sp, #16]
 8005edc:	f10a 37ff 	add.w	r7, sl, #4294967295
 8005ee0:	3501      	adds	r5, #1
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	f7fa fafa 	bl	80004dc <__aeabi_i2d>
 8005ee8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005eec:	f7fa fb60 	bl	80005b0 <__aeabi_dmul>
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	4b85      	ldr	r3, [pc, #532]	; (8006108 <_dtoa_r+0x618>)
 8005ef4:	f7fa f9a6 	bl	8000244 <__adddf3>
 8005ef8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005efc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005f00:	950b      	str	r5, [sp, #44]	; 0x2c
 8005f02:	2e00      	cmp	r6, #0
 8005f04:	d15c      	bne.n	8005fc0 <_dtoa_r+0x4d0>
 8005f06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	4b7f      	ldr	r3, [pc, #508]	; (800610c <_dtoa_r+0x61c>)
 8005f0e:	f7fa f997 	bl	8000240 <__aeabi_dsub>
 8005f12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f14:	462b      	mov	r3, r5
 8005f16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f1a:	f7fa fdd9 	bl	8000ad0 <__aeabi_dcmpgt>
 8005f1e:	2800      	cmp	r0, #0
 8005f20:	f040 8281 	bne.w	8006426 <_dtoa_r+0x936>
 8005f24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f2a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005f2e:	f7fa fdb1 	bl	8000a94 <__aeabi_dcmplt>
 8005f32:	2800      	cmp	r0, #0
 8005f34:	f040 8275 	bne.w	8006422 <_dtoa_r+0x932>
 8005f38:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005f3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005f40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f2c0 814b 	blt.w	80061de <_dtoa_r+0x6ee>
 8005f48:	f1ba 0f0e 	cmp.w	sl, #14
 8005f4c:	f300 8147 	bgt.w	80061de <_dtoa_r+0x6ee>
 8005f50:	4b69      	ldr	r3, [pc, #420]	; (80060f8 <_dtoa_r+0x608>)
 8005f52:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005f5e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f280 80d7 	bge.w	8006114 <_dtoa_r+0x624>
 8005f66:	f1b8 0f00 	cmp.w	r8, #0
 8005f6a:	f300 80d3 	bgt.w	8006114 <_dtoa_r+0x624>
 8005f6e:	f040 8257 	bne.w	8006420 <_dtoa_r+0x930>
 8005f72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f76:	2200      	movs	r2, #0
 8005f78:	4b64      	ldr	r3, [pc, #400]	; (800610c <_dtoa_r+0x61c>)
 8005f7a:	f7fa fb19 	bl	80005b0 <__aeabi_dmul>
 8005f7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f82:	f7fa fd9b 	bl	8000abc <__aeabi_dcmpge>
 8005f86:	4646      	mov	r6, r8
 8005f88:	4647      	mov	r7, r8
 8005f8a:	2800      	cmp	r0, #0
 8005f8c:	f040 822d 	bne.w	80063ea <_dtoa_r+0x8fa>
 8005f90:	9b06      	ldr	r3, [sp, #24]
 8005f92:	9a06      	ldr	r2, [sp, #24]
 8005f94:	1c5d      	adds	r5, r3, #1
 8005f96:	2331      	movs	r3, #49	; 0x31
 8005f98:	f10a 0a01 	add.w	sl, sl, #1
 8005f9c:	7013      	strb	r3, [r2, #0]
 8005f9e:	e228      	b.n	80063f2 <_dtoa_r+0x902>
 8005fa0:	07f2      	lsls	r2, r6, #31
 8005fa2:	d505      	bpl.n	8005fb0 <_dtoa_r+0x4c0>
 8005fa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fa8:	f7fa fb02 	bl	80005b0 <__aeabi_dmul>
 8005fac:	2301      	movs	r3, #1
 8005fae:	3501      	adds	r5, #1
 8005fb0:	1076      	asrs	r6, r6, #1
 8005fb2:	3708      	adds	r7, #8
 8005fb4:	e76e      	b.n	8005e94 <_dtoa_r+0x3a4>
 8005fb6:	2502      	movs	r5, #2
 8005fb8:	e771      	b.n	8005e9e <_dtoa_r+0x3ae>
 8005fba:	4657      	mov	r7, sl
 8005fbc:	4646      	mov	r6, r8
 8005fbe:	e790      	b.n	8005ee2 <_dtoa_r+0x3f2>
 8005fc0:	4b4d      	ldr	r3, [pc, #308]	; (80060f8 <_dtoa_r+0x608>)
 8005fc2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005fc6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d048      	beq.n	8006062 <_dtoa_r+0x572>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	2000      	movs	r0, #0
 8005fd6:	494e      	ldr	r1, [pc, #312]	; (8006110 <_dtoa_r+0x620>)
 8005fd8:	f7fa fc14 	bl	8000804 <__aeabi_ddiv>
 8005fdc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005fe0:	f7fa f92e 	bl	8000240 <__aeabi_dsub>
 8005fe4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005fe8:	9d06      	ldr	r5, [sp, #24]
 8005fea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fee:	f7fa fd8f 	bl	8000b10 <__aeabi_d2iz>
 8005ff2:	9011      	str	r0, [sp, #68]	; 0x44
 8005ff4:	f7fa fa72 	bl	80004dc <__aeabi_i2d>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006000:	f7fa f91e 	bl	8000240 <__aeabi_dsub>
 8006004:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006006:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800600a:	3330      	adds	r3, #48	; 0x30
 800600c:	f805 3b01 	strb.w	r3, [r5], #1
 8006010:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006014:	f7fa fd3e 	bl	8000a94 <__aeabi_dcmplt>
 8006018:	2800      	cmp	r0, #0
 800601a:	d163      	bne.n	80060e4 <_dtoa_r+0x5f4>
 800601c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006020:	2000      	movs	r0, #0
 8006022:	4937      	ldr	r1, [pc, #220]	; (8006100 <_dtoa_r+0x610>)
 8006024:	f7fa f90c 	bl	8000240 <__aeabi_dsub>
 8006028:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800602c:	f7fa fd32 	bl	8000a94 <__aeabi_dcmplt>
 8006030:	2800      	cmp	r0, #0
 8006032:	f040 80b5 	bne.w	80061a0 <_dtoa_r+0x6b0>
 8006036:	9b06      	ldr	r3, [sp, #24]
 8006038:	1aeb      	subs	r3, r5, r3
 800603a:	429e      	cmp	r6, r3
 800603c:	f77f af7c 	ble.w	8005f38 <_dtoa_r+0x448>
 8006040:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006044:	2200      	movs	r2, #0
 8006046:	4b2f      	ldr	r3, [pc, #188]	; (8006104 <_dtoa_r+0x614>)
 8006048:	f7fa fab2 	bl	80005b0 <__aeabi_dmul>
 800604c:	2200      	movs	r2, #0
 800604e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006052:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006056:	4b2b      	ldr	r3, [pc, #172]	; (8006104 <_dtoa_r+0x614>)
 8006058:	f7fa faaa 	bl	80005b0 <__aeabi_dmul>
 800605c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006060:	e7c3      	b.n	8005fea <_dtoa_r+0x4fa>
 8006062:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006066:	f7fa faa3 	bl	80005b0 <__aeabi_dmul>
 800606a:	9b06      	ldr	r3, [sp, #24]
 800606c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006070:	199d      	adds	r5, r3, r6
 8006072:	461e      	mov	r6, r3
 8006074:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006078:	f7fa fd4a 	bl	8000b10 <__aeabi_d2iz>
 800607c:	9011      	str	r0, [sp, #68]	; 0x44
 800607e:	f7fa fa2d 	bl	80004dc <__aeabi_i2d>
 8006082:	4602      	mov	r2, r0
 8006084:	460b      	mov	r3, r1
 8006086:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800608a:	f7fa f8d9 	bl	8000240 <__aeabi_dsub>
 800608e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006090:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006094:	3330      	adds	r3, #48	; 0x30
 8006096:	f806 3b01 	strb.w	r3, [r6], #1
 800609a:	42ae      	cmp	r6, r5
 800609c:	f04f 0200 	mov.w	r2, #0
 80060a0:	d124      	bne.n	80060ec <_dtoa_r+0x5fc>
 80060a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80060a6:	4b1a      	ldr	r3, [pc, #104]	; (8006110 <_dtoa_r+0x620>)
 80060a8:	f7fa f8cc 	bl	8000244 <__adddf3>
 80060ac:	4602      	mov	r2, r0
 80060ae:	460b      	mov	r3, r1
 80060b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060b4:	f7fa fd0c 	bl	8000ad0 <__aeabi_dcmpgt>
 80060b8:	2800      	cmp	r0, #0
 80060ba:	d171      	bne.n	80061a0 <_dtoa_r+0x6b0>
 80060bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80060c0:	2000      	movs	r0, #0
 80060c2:	4913      	ldr	r1, [pc, #76]	; (8006110 <_dtoa_r+0x620>)
 80060c4:	f7fa f8bc 	bl	8000240 <__aeabi_dsub>
 80060c8:	4602      	mov	r2, r0
 80060ca:	460b      	mov	r3, r1
 80060cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060d0:	f7fa fce0 	bl	8000a94 <__aeabi_dcmplt>
 80060d4:	2800      	cmp	r0, #0
 80060d6:	f43f af2f 	beq.w	8005f38 <_dtoa_r+0x448>
 80060da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80060de:	1e6a      	subs	r2, r5, #1
 80060e0:	2b30      	cmp	r3, #48	; 0x30
 80060e2:	d001      	beq.n	80060e8 <_dtoa_r+0x5f8>
 80060e4:	46ba      	mov	sl, r7
 80060e6:	e04a      	b.n	800617e <_dtoa_r+0x68e>
 80060e8:	4615      	mov	r5, r2
 80060ea:	e7f6      	b.n	80060da <_dtoa_r+0x5ea>
 80060ec:	4b05      	ldr	r3, [pc, #20]	; (8006104 <_dtoa_r+0x614>)
 80060ee:	f7fa fa5f 	bl	80005b0 <__aeabi_dmul>
 80060f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060f6:	e7bd      	b.n	8006074 <_dtoa_r+0x584>
 80060f8:	08007b38 	.word	0x08007b38
 80060fc:	08007b10 	.word	0x08007b10
 8006100:	3ff00000 	.word	0x3ff00000
 8006104:	40240000 	.word	0x40240000
 8006108:	401c0000 	.word	0x401c0000
 800610c:	40140000 	.word	0x40140000
 8006110:	3fe00000 	.word	0x3fe00000
 8006114:	9d06      	ldr	r5, [sp, #24]
 8006116:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800611a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800611e:	4630      	mov	r0, r6
 8006120:	4639      	mov	r1, r7
 8006122:	f7fa fb6f 	bl	8000804 <__aeabi_ddiv>
 8006126:	f7fa fcf3 	bl	8000b10 <__aeabi_d2iz>
 800612a:	4681      	mov	r9, r0
 800612c:	f7fa f9d6 	bl	80004dc <__aeabi_i2d>
 8006130:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006134:	f7fa fa3c 	bl	80005b0 <__aeabi_dmul>
 8006138:	4602      	mov	r2, r0
 800613a:	460b      	mov	r3, r1
 800613c:	4630      	mov	r0, r6
 800613e:	4639      	mov	r1, r7
 8006140:	f7fa f87e 	bl	8000240 <__aeabi_dsub>
 8006144:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8006148:	f805 6b01 	strb.w	r6, [r5], #1
 800614c:	9e06      	ldr	r6, [sp, #24]
 800614e:	4602      	mov	r2, r0
 8006150:	1bae      	subs	r6, r5, r6
 8006152:	45b0      	cmp	r8, r6
 8006154:	460b      	mov	r3, r1
 8006156:	d135      	bne.n	80061c4 <_dtoa_r+0x6d4>
 8006158:	f7fa f874 	bl	8000244 <__adddf3>
 800615c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006160:	4606      	mov	r6, r0
 8006162:	460f      	mov	r7, r1
 8006164:	f7fa fcb4 	bl	8000ad0 <__aeabi_dcmpgt>
 8006168:	b9c8      	cbnz	r0, 800619e <_dtoa_r+0x6ae>
 800616a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800616e:	4630      	mov	r0, r6
 8006170:	4639      	mov	r1, r7
 8006172:	f7fa fc85 	bl	8000a80 <__aeabi_dcmpeq>
 8006176:	b110      	cbz	r0, 800617e <_dtoa_r+0x68e>
 8006178:	f019 0f01 	tst.w	r9, #1
 800617c:	d10f      	bne.n	800619e <_dtoa_r+0x6ae>
 800617e:	4659      	mov	r1, fp
 8006180:	4620      	mov	r0, r4
 8006182:	f000 fe0c 	bl	8006d9e <_Bfree>
 8006186:	2300      	movs	r3, #0
 8006188:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800618a:	702b      	strb	r3, [r5, #0]
 800618c:	f10a 0301 	add.w	r3, sl, #1
 8006190:	6013      	str	r3, [r2, #0]
 8006192:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006194:	2b00      	cmp	r3, #0
 8006196:	f43f acf3 	beq.w	8005b80 <_dtoa_r+0x90>
 800619a:	601d      	str	r5, [r3, #0]
 800619c:	e4f0      	b.n	8005b80 <_dtoa_r+0x90>
 800619e:	4657      	mov	r7, sl
 80061a0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80061a4:	1e6b      	subs	r3, r5, #1
 80061a6:	2a39      	cmp	r2, #57	; 0x39
 80061a8:	d106      	bne.n	80061b8 <_dtoa_r+0x6c8>
 80061aa:	9a06      	ldr	r2, [sp, #24]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d107      	bne.n	80061c0 <_dtoa_r+0x6d0>
 80061b0:	2330      	movs	r3, #48	; 0x30
 80061b2:	7013      	strb	r3, [r2, #0]
 80061b4:	4613      	mov	r3, r2
 80061b6:	3701      	adds	r7, #1
 80061b8:	781a      	ldrb	r2, [r3, #0]
 80061ba:	3201      	adds	r2, #1
 80061bc:	701a      	strb	r2, [r3, #0]
 80061be:	e791      	b.n	80060e4 <_dtoa_r+0x5f4>
 80061c0:	461d      	mov	r5, r3
 80061c2:	e7ed      	b.n	80061a0 <_dtoa_r+0x6b0>
 80061c4:	2200      	movs	r2, #0
 80061c6:	4b99      	ldr	r3, [pc, #612]	; (800642c <_dtoa_r+0x93c>)
 80061c8:	f7fa f9f2 	bl	80005b0 <__aeabi_dmul>
 80061cc:	2200      	movs	r2, #0
 80061ce:	2300      	movs	r3, #0
 80061d0:	4606      	mov	r6, r0
 80061d2:	460f      	mov	r7, r1
 80061d4:	f7fa fc54 	bl	8000a80 <__aeabi_dcmpeq>
 80061d8:	2800      	cmp	r0, #0
 80061da:	d09e      	beq.n	800611a <_dtoa_r+0x62a>
 80061dc:	e7cf      	b.n	800617e <_dtoa_r+0x68e>
 80061de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061e0:	2a00      	cmp	r2, #0
 80061e2:	f000 8088 	beq.w	80062f6 <_dtoa_r+0x806>
 80061e6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80061e8:	2a01      	cmp	r2, #1
 80061ea:	dc6d      	bgt.n	80062c8 <_dtoa_r+0x7d8>
 80061ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80061ee:	2a00      	cmp	r2, #0
 80061f0:	d066      	beq.n	80062c0 <_dtoa_r+0x7d0>
 80061f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80061f6:	464d      	mov	r5, r9
 80061f8:	9e08      	ldr	r6, [sp, #32]
 80061fa:	9a07      	ldr	r2, [sp, #28]
 80061fc:	2101      	movs	r1, #1
 80061fe:	441a      	add	r2, r3
 8006200:	4620      	mov	r0, r4
 8006202:	4499      	add	r9, r3
 8006204:	9207      	str	r2, [sp, #28]
 8006206:	f000 fea8 	bl	8006f5a <__i2b>
 800620a:	4607      	mov	r7, r0
 800620c:	2d00      	cmp	r5, #0
 800620e:	dd0b      	ble.n	8006228 <_dtoa_r+0x738>
 8006210:	9b07      	ldr	r3, [sp, #28]
 8006212:	2b00      	cmp	r3, #0
 8006214:	dd08      	ble.n	8006228 <_dtoa_r+0x738>
 8006216:	42ab      	cmp	r3, r5
 8006218:	bfa8      	it	ge
 800621a:	462b      	movge	r3, r5
 800621c:	9a07      	ldr	r2, [sp, #28]
 800621e:	eba9 0903 	sub.w	r9, r9, r3
 8006222:	1aed      	subs	r5, r5, r3
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	9307      	str	r3, [sp, #28]
 8006228:	9b08      	ldr	r3, [sp, #32]
 800622a:	b1eb      	cbz	r3, 8006268 <_dtoa_r+0x778>
 800622c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800622e:	2b00      	cmp	r3, #0
 8006230:	d065      	beq.n	80062fe <_dtoa_r+0x80e>
 8006232:	b18e      	cbz	r6, 8006258 <_dtoa_r+0x768>
 8006234:	4639      	mov	r1, r7
 8006236:	4632      	mov	r2, r6
 8006238:	4620      	mov	r0, r4
 800623a:	f000 ff2d 	bl	8007098 <__pow5mult>
 800623e:	465a      	mov	r2, fp
 8006240:	4601      	mov	r1, r0
 8006242:	4607      	mov	r7, r0
 8006244:	4620      	mov	r0, r4
 8006246:	f000 fe91 	bl	8006f6c <__multiply>
 800624a:	4659      	mov	r1, fp
 800624c:	900a      	str	r0, [sp, #40]	; 0x28
 800624e:	4620      	mov	r0, r4
 8006250:	f000 fda5 	bl	8006d9e <_Bfree>
 8006254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006256:	469b      	mov	fp, r3
 8006258:	9b08      	ldr	r3, [sp, #32]
 800625a:	1b9a      	subs	r2, r3, r6
 800625c:	d004      	beq.n	8006268 <_dtoa_r+0x778>
 800625e:	4659      	mov	r1, fp
 8006260:	4620      	mov	r0, r4
 8006262:	f000 ff19 	bl	8007098 <__pow5mult>
 8006266:	4683      	mov	fp, r0
 8006268:	2101      	movs	r1, #1
 800626a:	4620      	mov	r0, r4
 800626c:	f000 fe75 	bl	8006f5a <__i2b>
 8006270:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006272:	4606      	mov	r6, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	f000 81c6 	beq.w	8006606 <_dtoa_r+0xb16>
 800627a:	461a      	mov	r2, r3
 800627c:	4601      	mov	r1, r0
 800627e:	4620      	mov	r0, r4
 8006280:	f000 ff0a 	bl	8007098 <__pow5mult>
 8006284:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006286:	4606      	mov	r6, r0
 8006288:	2b01      	cmp	r3, #1
 800628a:	dc3e      	bgt.n	800630a <_dtoa_r+0x81a>
 800628c:	9b02      	ldr	r3, [sp, #8]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d137      	bne.n	8006302 <_dtoa_r+0x812>
 8006292:	9b03      	ldr	r3, [sp, #12]
 8006294:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006298:	2b00      	cmp	r3, #0
 800629a:	d134      	bne.n	8006306 <_dtoa_r+0x816>
 800629c:	9b03      	ldr	r3, [sp, #12]
 800629e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062a2:	0d1b      	lsrs	r3, r3, #20
 80062a4:	051b      	lsls	r3, r3, #20
 80062a6:	b12b      	cbz	r3, 80062b4 <_dtoa_r+0x7c4>
 80062a8:	9b07      	ldr	r3, [sp, #28]
 80062aa:	f109 0901 	add.w	r9, r9, #1
 80062ae:	3301      	adds	r3, #1
 80062b0:	9307      	str	r3, [sp, #28]
 80062b2:	2301      	movs	r3, #1
 80062b4:	9308      	str	r3, [sp, #32]
 80062b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d128      	bne.n	800630e <_dtoa_r+0x81e>
 80062bc:	2001      	movs	r0, #1
 80062be:	e02e      	b.n	800631e <_dtoa_r+0x82e>
 80062c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80062c2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80062c6:	e796      	b.n	80061f6 <_dtoa_r+0x706>
 80062c8:	9b08      	ldr	r3, [sp, #32]
 80062ca:	f108 36ff 	add.w	r6, r8, #4294967295
 80062ce:	42b3      	cmp	r3, r6
 80062d0:	bfb7      	itett	lt
 80062d2:	9b08      	ldrlt	r3, [sp, #32]
 80062d4:	1b9e      	subge	r6, r3, r6
 80062d6:	1af2      	sublt	r2, r6, r3
 80062d8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80062da:	bfbf      	itttt	lt
 80062dc:	9608      	strlt	r6, [sp, #32]
 80062de:	189b      	addlt	r3, r3, r2
 80062e0:	930c      	strlt	r3, [sp, #48]	; 0x30
 80062e2:	2600      	movlt	r6, #0
 80062e4:	f1b8 0f00 	cmp.w	r8, #0
 80062e8:	bfb9      	ittee	lt
 80062ea:	eba9 0508 	sublt.w	r5, r9, r8
 80062ee:	2300      	movlt	r3, #0
 80062f0:	464d      	movge	r5, r9
 80062f2:	4643      	movge	r3, r8
 80062f4:	e781      	b.n	80061fa <_dtoa_r+0x70a>
 80062f6:	9e08      	ldr	r6, [sp, #32]
 80062f8:	464d      	mov	r5, r9
 80062fa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80062fc:	e786      	b.n	800620c <_dtoa_r+0x71c>
 80062fe:	9a08      	ldr	r2, [sp, #32]
 8006300:	e7ad      	b.n	800625e <_dtoa_r+0x76e>
 8006302:	2300      	movs	r3, #0
 8006304:	e7d6      	b.n	80062b4 <_dtoa_r+0x7c4>
 8006306:	9b02      	ldr	r3, [sp, #8]
 8006308:	e7d4      	b.n	80062b4 <_dtoa_r+0x7c4>
 800630a:	2300      	movs	r3, #0
 800630c:	9308      	str	r3, [sp, #32]
 800630e:	6933      	ldr	r3, [r6, #16]
 8006310:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006314:	6918      	ldr	r0, [r3, #16]
 8006316:	f000 fdd2 	bl	8006ebe <__hi0bits>
 800631a:	f1c0 0020 	rsb	r0, r0, #32
 800631e:	9b07      	ldr	r3, [sp, #28]
 8006320:	4418      	add	r0, r3
 8006322:	f010 001f 	ands.w	r0, r0, #31
 8006326:	d047      	beq.n	80063b8 <_dtoa_r+0x8c8>
 8006328:	f1c0 0320 	rsb	r3, r0, #32
 800632c:	2b04      	cmp	r3, #4
 800632e:	dd3b      	ble.n	80063a8 <_dtoa_r+0x8b8>
 8006330:	9b07      	ldr	r3, [sp, #28]
 8006332:	f1c0 001c 	rsb	r0, r0, #28
 8006336:	4481      	add	r9, r0
 8006338:	4405      	add	r5, r0
 800633a:	4403      	add	r3, r0
 800633c:	9307      	str	r3, [sp, #28]
 800633e:	f1b9 0f00 	cmp.w	r9, #0
 8006342:	dd05      	ble.n	8006350 <_dtoa_r+0x860>
 8006344:	4659      	mov	r1, fp
 8006346:	464a      	mov	r2, r9
 8006348:	4620      	mov	r0, r4
 800634a:	f000 fef3 	bl	8007134 <__lshift>
 800634e:	4683      	mov	fp, r0
 8006350:	9b07      	ldr	r3, [sp, #28]
 8006352:	2b00      	cmp	r3, #0
 8006354:	dd05      	ble.n	8006362 <_dtoa_r+0x872>
 8006356:	4631      	mov	r1, r6
 8006358:	461a      	mov	r2, r3
 800635a:	4620      	mov	r0, r4
 800635c:	f000 feea 	bl	8007134 <__lshift>
 8006360:	4606      	mov	r6, r0
 8006362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006364:	b353      	cbz	r3, 80063bc <_dtoa_r+0x8cc>
 8006366:	4631      	mov	r1, r6
 8006368:	4658      	mov	r0, fp
 800636a:	f000 ff37 	bl	80071dc <__mcmp>
 800636e:	2800      	cmp	r0, #0
 8006370:	da24      	bge.n	80063bc <_dtoa_r+0x8cc>
 8006372:	2300      	movs	r3, #0
 8006374:	4659      	mov	r1, fp
 8006376:	220a      	movs	r2, #10
 8006378:	4620      	mov	r0, r4
 800637a:	f000 fd27 	bl	8006dcc <__multadd>
 800637e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006380:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006384:	4683      	mov	fp, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	f000 8144 	beq.w	8006614 <_dtoa_r+0xb24>
 800638c:	2300      	movs	r3, #0
 800638e:	4639      	mov	r1, r7
 8006390:	220a      	movs	r2, #10
 8006392:	4620      	mov	r0, r4
 8006394:	f000 fd1a 	bl	8006dcc <__multadd>
 8006398:	9b04      	ldr	r3, [sp, #16]
 800639a:	4607      	mov	r7, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	dc4d      	bgt.n	800643c <_dtoa_r+0x94c>
 80063a0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	dd4a      	ble.n	800643c <_dtoa_r+0x94c>
 80063a6:	e011      	b.n	80063cc <_dtoa_r+0x8dc>
 80063a8:	d0c9      	beq.n	800633e <_dtoa_r+0x84e>
 80063aa:	9a07      	ldr	r2, [sp, #28]
 80063ac:	331c      	adds	r3, #28
 80063ae:	441a      	add	r2, r3
 80063b0:	4499      	add	r9, r3
 80063b2:	441d      	add	r5, r3
 80063b4:	4613      	mov	r3, r2
 80063b6:	e7c1      	b.n	800633c <_dtoa_r+0x84c>
 80063b8:	4603      	mov	r3, r0
 80063ba:	e7f6      	b.n	80063aa <_dtoa_r+0x8ba>
 80063bc:	f1b8 0f00 	cmp.w	r8, #0
 80063c0:	dc36      	bgt.n	8006430 <_dtoa_r+0x940>
 80063c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	dd33      	ble.n	8006430 <_dtoa_r+0x940>
 80063c8:	f8cd 8010 	str.w	r8, [sp, #16]
 80063cc:	9b04      	ldr	r3, [sp, #16]
 80063ce:	b963      	cbnz	r3, 80063ea <_dtoa_r+0x8fa>
 80063d0:	4631      	mov	r1, r6
 80063d2:	2205      	movs	r2, #5
 80063d4:	4620      	mov	r0, r4
 80063d6:	f000 fcf9 	bl	8006dcc <__multadd>
 80063da:	4601      	mov	r1, r0
 80063dc:	4606      	mov	r6, r0
 80063de:	4658      	mov	r0, fp
 80063e0:	f000 fefc 	bl	80071dc <__mcmp>
 80063e4:	2800      	cmp	r0, #0
 80063e6:	f73f add3 	bgt.w	8005f90 <_dtoa_r+0x4a0>
 80063ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80063ec:	9d06      	ldr	r5, [sp, #24]
 80063ee:	ea6f 0a03 	mvn.w	sl, r3
 80063f2:	f04f 0900 	mov.w	r9, #0
 80063f6:	4631      	mov	r1, r6
 80063f8:	4620      	mov	r0, r4
 80063fa:	f000 fcd0 	bl	8006d9e <_Bfree>
 80063fe:	2f00      	cmp	r7, #0
 8006400:	f43f aebd 	beq.w	800617e <_dtoa_r+0x68e>
 8006404:	f1b9 0f00 	cmp.w	r9, #0
 8006408:	d005      	beq.n	8006416 <_dtoa_r+0x926>
 800640a:	45b9      	cmp	r9, r7
 800640c:	d003      	beq.n	8006416 <_dtoa_r+0x926>
 800640e:	4649      	mov	r1, r9
 8006410:	4620      	mov	r0, r4
 8006412:	f000 fcc4 	bl	8006d9e <_Bfree>
 8006416:	4639      	mov	r1, r7
 8006418:	4620      	mov	r0, r4
 800641a:	f000 fcc0 	bl	8006d9e <_Bfree>
 800641e:	e6ae      	b.n	800617e <_dtoa_r+0x68e>
 8006420:	2600      	movs	r6, #0
 8006422:	4637      	mov	r7, r6
 8006424:	e7e1      	b.n	80063ea <_dtoa_r+0x8fa>
 8006426:	46ba      	mov	sl, r7
 8006428:	4637      	mov	r7, r6
 800642a:	e5b1      	b.n	8005f90 <_dtoa_r+0x4a0>
 800642c:	40240000 	.word	0x40240000
 8006430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006432:	f8cd 8010 	str.w	r8, [sp, #16]
 8006436:	2b00      	cmp	r3, #0
 8006438:	f000 80f3 	beq.w	8006622 <_dtoa_r+0xb32>
 800643c:	2d00      	cmp	r5, #0
 800643e:	dd05      	ble.n	800644c <_dtoa_r+0x95c>
 8006440:	4639      	mov	r1, r7
 8006442:	462a      	mov	r2, r5
 8006444:	4620      	mov	r0, r4
 8006446:	f000 fe75 	bl	8007134 <__lshift>
 800644a:	4607      	mov	r7, r0
 800644c:	9b08      	ldr	r3, [sp, #32]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d04c      	beq.n	80064ec <_dtoa_r+0x9fc>
 8006452:	6879      	ldr	r1, [r7, #4]
 8006454:	4620      	mov	r0, r4
 8006456:	f000 fc6e 	bl	8006d36 <_Balloc>
 800645a:	4605      	mov	r5, r0
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	f107 010c 	add.w	r1, r7, #12
 8006462:	3202      	adds	r2, #2
 8006464:	0092      	lsls	r2, r2, #2
 8006466:	300c      	adds	r0, #12
 8006468:	f000 fc5a 	bl	8006d20 <memcpy>
 800646c:	2201      	movs	r2, #1
 800646e:	4629      	mov	r1, r5
 8006470:	4620      	mov	r0, r4
 8006472:	f000 fe5f 	bl	8007134 <__lshift>
 8006476:	46b9      	mov	r9, r7
 8006478:	4607      	mov	r7, r0
 800647a:	9b06      	ldr	r3, [sp, #24]
 800647c:	9307      	str	r3, [sp, #28]
 800647e:	9b02      	ldr	r3, [sp, #8]
 8006480:	f003 0301 	and.w	r3, r3, #1
 8006484:	9308      	str	r3, [sp, #32]
 8006486:	4631      	mov	r1, r6
 8006488:	4658      	mov	r0, fp
 800648a:	f7ff faa3 	bl	80059d4 <quorem>
 800648e:	4649      	mov	r1, r9
 8006490:	4605      	mov	r5, r0
 8006492:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006496:	4658      	mov	r0, fp
 8006498:	f000 fea0 	bl	80071dc <__mcmp>
 800649c:	463a      	mov	r2, r7
 800649e:	9002      	str	r0, [sp, #8]
 80064a0:	4631      	mov	r1, r6
 80064a2:	4620      	mov	r0, r4
 80064a4:	f000 feb4 	bl	8007210 <__mdiff>
 80064a8:	68c3      	ldr	r3, [r0, #12]
 80064aa:	4602      	mov	r2, r0
 80064ac:	bb03      	cbnz	r3, 80064f0 <_dtoa_r+0xa00>
 80064ae:	4601      	mov	r1, r0
 80064b0:	9009      	str	r0, [sp, #36]	; 0x24
 80064b2:	4658      	mov	r0, fp
 80064b4:	f000 fe92 	bl	80071dc <__mcmp>
 80064b8:	4603      	mov	r3, r0
 80064ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064bc:	4611      	mov	r1, r2
 80064be:	4620      	mov	r0, r4
 80064c0:	9309      	str	r3, [sp, #36]	; 0x24
 80064c2:	f000 fc6c 	bl	8006d9e <_Bfree>
 80064c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064c8:	b9a3      	cbnz	r3, 80064f4 <_dtoa_r+0xa04>
 80064ca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80064cc:	b992      	cbnz	r2, 80064f4 <_dtoa_r+0xa04>
 80064ce:	9a08      	ldr	r2, [sp, #32]
 80064d0:	b982      	cbnz	r2, 80064f4 <_dtoa_r+0xa04>
 80064d2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80064d6:	d029      	beq.n	800652c <_dtoa_r+0xa3c>
 80064d8:	9b02      	ldr	r3, [sp, #8]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	dd01      	ble.n	80064e2 <_dtoa_r+0x9f2>
 80064de:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80064e2:	9b07      	ldr	r3, [sp, #28]
 80064e4:	1c5d      	adds	r5, r3, #1
 80064e6:	f883 8000 	strb.w	r8, [r3]
 80064ea:	e784      	b.n	80063f6 <_dtoa_r+0x906>
 80064ec:	4638      	mov	r0, r7
 80064ee:	e7c2      	b.n	8006476 <_dtoa_r+0x986>
 80064f0:	2301      	movs	r3, #1
 80064f2:	e7e3      	b.n	80064bc <_dtoa_r+0x9cc>
 80064f4:	9a02      	ldr	r2, [sp, #8]
 80064f6:	2a00      	cmp	r2, #0
 80064f8:	db04      	blt.n	8006504 <_dtoa_r+0xa14>
 80064fa:	d123      	bne.n	8006544 <_dtoa_r+0xa54>
 80064fc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80064fe:	bb0a      	cbnz	r2, 8006544 <_dtoa_r+0xa54>
 8006500:	9a08      	ldr	r2, [sp, #32]
 8006502:	b9fa      	cbnz	r2, 8006544 <_dtoa_r+0xa54>
 8006504:	2b00      	cmp	r3, #0
 8006506:	ddec      	ble.n	80064e2 <_dtoa_r+0x9f2>
 8006508:	4659      	mov	r1, fp
 800650a:	2201      	movs	r2, #1
 800650c:	4620      	mov	r0, r4
 800650e:	f000 fe11 	bl	8007134 <__lshift>
 8006512:	4631      	mov	r1, r6
 8006514:	4683      	mov	fp, r0
 8006516:	f000 fe61 	bl	80071dc <__mcmp>
 800651a:	2800      	cmp	r0, #0
 800651c:	dc03      	bgt.n	8006526 <_dtoa_r+0xa36>
 800651e:	d1e0      	bne.n	80064e2 <_dtoa_r+0x9f2>
 8006520:	f018 0f01 	tst.w	r8, #1
 8006524:	d0dd      	beq.n	80064e2 <_dtoa_r+0x9f2>
 8006526:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800652a:	d1d8      	bne.n	80064de <_dtoa_r+0x9ee>
 800652c:	9b07      	ldr	r3, [sp, #28]
 800652e:	9a07      	ldr	r2, [sp, #28]
 8006530:	1c5d      	adds	r5, r3, #1
 8006532:	2339      	movs	r3, #57	; 0x39
 8006534:	7013      	strb	r3, [r2, #0]
 8006536:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800653a:	1e6a      	subs	r2, r5, #1
 800653c:	2b39      	cmp	r3, #57	; 0x39
 800653e:	d04d      	beq.n	80065dc <_dtoa_r+0xaec>
 8006540:	3301      	adds	r3, #1
 8006542:	e052      	b.n	80065ea <_dtoa_r+0xafa>
 8006544:	9a07      	ldr	r2, [sp, #28]
 8006546:	2b00      	cmp	r3, #0
 8006548:	f102 0501 	add.w	r5, r2, #1
 800654c:	dd06      	ble.n	800655c <_dtoa_r+0xa6c>
 800654e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006552:	d0eb      	beq.n	800652c <_dtoa_r+0xa3c>
 8006554:	f108 0801 	add.w	r8, r8, #1
 8006558:	9b07      	ldr	r3, [sp, #28]
 800655a:	e7c4      	b.n	80064e6 <_dtoa_r+0x9f6>
 800655c:	9b06      	ldr	r3, [sp, #24]
 800655e:	9a04      	ldr	r2, [sp, #16]
 8006560:	1aeb      	subs	r3, r5, r3
 8006562:	4293      	cmp	r3, r2
 8006564:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006568:	d021      	beq.n	80065ae <_dtoa_r+0xabe>
 800656a:	4659      	mov	r1, fp
 800656c:	2300      	movs	r3, #0
 800656e:	220a      	movs	r2, #10
 8006570:	4620      	mov	r0, r4
 8006572:	f000 fc2b 	bl	8006dcc <__multadd>
 8006576:	45b9      	cmp	r9, r7
 8006578:	4683      	mov	fp, r0
 800657a:	f04f 0300 	mov.w	r3, #0
 800657e:	f04f 020a 	mov.w	r2, #10
 8006582:	4649      	mov	r1, r9
 8006584:	4620      	mov	r0, r4
 8006586:	d105      	bne.n	8006594 <_dtoa_r+0xaa4>
 8006588:	f000 fc20 	bl	8006dcc <__multadd>
 800658c:	4681      	mov	r9, r0
 800658e:	4607      	mov	r7, r0
 8006590:	9507      	str	r5, [sp, #28]
 8006592:	e778      	b.n	8006486 <_dtoa_r+0x996>
 8006594:	f000 fc1a 	bl	8006dcc <__multadd>
 8006598:	4639      	mov	r1, r7
 800659a:	4681      	mov	r9, r0
 800659c:	2300      	movs	r3, #0
 800659e:	220a      	movs	r2, #10
 80065a0:	4620      	mov	r0, r4
 80065a2:	f000 fc13 	bl	8006dcc <__multadd>
 80065a6:	4607      	mov	r7, r0
 80065a8:	e7f2      	b.n	8006590 <_dtoa_r+0xaa0>
 80065aa:	f04f 0900 	mov.w	r9, #0
 80065ae:	4659      	mov	r1, fp
 80065b0:	2201      	movs	r2, #1
 80065b2:	4620      	mov	r0, r4
 80065b4:	f000 fdbe 	bl	8007134 <__lshift>
 80065b8:	4631      	mov	r1, r6
 80065ba:	4683      	mov	fp, r0
 80065bc:	f000 fe0e 	bl	80071dc <__mcmp>
 80065c0:	2800      	cmp	r0, #0
 80065c2:	dcb8      	bgt.n	8006536 <_dtoa_r+0xa46>
 80065c4:	d102      	bne.n	80065cc <_dtoa_r+0xadc>
 80065c6:	f018 0f01 	tst.w	r8, #1
 80065ca:	d1b4      	bne.n	8006536 <_dtoa_r+0xa46>
 80065cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80065d0:	1e6a      	subs	r2, r5, #1
 80065d2:	2b30      	cmp	r3, #48	; 0x30
 80065d4:	f47f af0f 	bne.w	80063f6 <_dtoa_r+0x906>
 80065d8:	4615      	mov	r5, r2
 80065da:	e7f7      	b.n	80065cc <_dtoa_r+0xadc>
 80065dc:	9b06      	ldr	r3, [sp, #24]
 80065de:	4293      	cmp	r3, r2
 80065e0:	d105      	bne.n	80065ee <_dtoa_r+0xafe>
 80065e2:	2331      	movs	r3, #49	; 0x31
 80065e4:	9a06      	ldr	r2, [sp, #24]
 80065e6:	f10a 0a01 	add.w	sl, sl, #1
 80065ea:	7013      	strb	r3, [r2, #0]
 80065ec:	e703      	b.n	80063f6 <_dtoa_r+0x906>
 80065ee:	4615      	mov	r5, r2
 80065f0:	e7a1      	b.n	8006536 <_dtoa_r+0xa46>
 80065f2:	4b17      	ldr	r3, [pc, #92]	; (8006650 <_dtoa_r+0xb60>)
 80065f4:	f7ff bae1 	b.w	8005bba <_dtoa_r+0xca>
 80065f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f47f aabb 	bne.w	8005b76 <_dtoa_r+0x86>
 8006600:	4b14      	ldr	r3, [pc, #80]	; (8006654 <_dtoa_r+0xb64>)
 8006602:	f7ff bada 	b.w	8005bba <_dtoa_r+0xca>
 8006606:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006608:	2b01      	cmp	r3, #1
 800660a:	f77f ae3f 	ble.w	800628c <_dtoa_r+0x79c>
 800660e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006610:	9308      	str	r3, [sp, #32]
 8006612:	e653      	b.n	80062bc <_dtoa_r+0x7cc>
 8006614:	9b04      	ldr	r3, [sp, #16]
 8006616:	2b00      	cmp	r3, #0
 8006618:	dc03      	bgt.n	8006622 <_dtoa_r+0xb32>
 800661a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800661c:	2b02      	cmp	r3, #2
 800661e:	f73f aed5 	bgt.w	80063cc <_dtoa_r+0x8dc>
 8006622:	9d06      	ldr	r5, [sp, #24]
 8006624:	4631      	mov	r1, r6
 8006626:	4658      	mov	r0, fp
 8006628:	f7ff f9d4 	bl	80059d4 <quorem>
 800662c:	9b06      	ldr	r3, [sp, #24]
 800662e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006632:	f805 8b01 	strb.w	r8, [r5], #1
 8006636:	9a04      	ldr	r2, [sp, #16]
 8006638:	1aeb      	subs	r3, r5, r3
 800663a:	429a      	cmp	r2, r3
 800663c:	ddb5      	ble.n	80065aa <_dtoa_r+0xaba>
 800663e:	4659      	mov	r1, fp
 8006640:	2300      	movs	r3, #0
 8006642:	220a      	movs	r2, #10
 8006644:	4620      	mov	r0, r4
 8006646:	f000 fbc1 	bl	8006dcc <__multadd>
 800664a:	4683      	mov	fp, r0
 800664c:	e7ea      	b.n	8006624 <_dtoa_r+0xb34>
 800664e:	bf00      	nop
 8006650:	08007a7c 	.word	0x08007a7c
 8006654:	08007af8 	.word	0x08007af8

08006658 <rshift>:
 8006658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800665a:	6906      	ldr	r6, [r0, #16]
 800665c:	114b      	asrs	r3, r1, #5
 800665e:	429e      	cmp	r6, r3
 8006660:	f100 0414 	add.w	r4, r0, #20
 8006664:	dd31      	ble.n	80066ca <rshift+0x72>
 8006666:	f011 011f 	ands.w	r1, r1, #31
 800666a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800666e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8006672:	d108      	bne.n	8006686 <rshift+0x2e>
 8006674:	4621      	mov	r1, r4
 8006676:	42b2      	cmp	r2, r6
 8006678:	460b      	mov	r3, r1
 800667a:	d211      	bcs.n	80066a0 <rshift+0x48>
 800667c:	f852 3b04 	ldr.w	r3, [r2], #4
 8006680:	f841 3b04 	str.w	r3, [r1], #4
 8006684:	e7f7      	b.n	8006676 <rshift+0x1e>
 8006686:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800668a:	4623      	mov	r3, r4
 800668c:	f1c1 0c20 	rsb	ip, r1, #32
 8006690:	40cd      	lsrs	r5, r1
 8006692:	3204      	adds	r2, #4
 8006694:	42b2      	cmp	r2, r6
 8006696:	4617      	mov	r7, r2
 8006698:	d30d      	bcc.n	80066b6 <rshift+0x5e>
 800669a:	601d      	str	r5, [r3, #0]
 800669c:	b105      	cbz	r5, 80066a0 <rshift+0x48>
 800669e:	3304      	adds	r3, #4
 80066a0:	42a3      	cmp	r3, r4
 80066a2:	eba3 0204 	sub.w	r2, r3, r4
 80066a6:	bf08      	it	eq
 80066a8:	2300      	moveq	r3, #0
 80066aa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80066ae:	6102      	str	r2, [r0, #16]
 80066b0:	bf08      	it	eq
 80066b2:	6143      	streq	r3, [r0, #20]
 80066b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066b6:	683f      	ldr	r7, [r7, #0]
 80066b8:	fa07 f70c 	lsl.w	r7, r7, ip
 80066bc:	433d      	orrs	r5, r7
 80066be:	f843 5b04 	str.w	r5, [r3], #4
 80066c2:	f852 5b04 	ldr.w	r5, [r2], #4
 80066c6:	40cd      	lsrs	r5, r1
 80066c8:	e7e4      	b.n	8006694 <rshift+0x3c>
 80066ca:	4623      	mov	r3, r4
 80066cc:	e7e8      	b.n	80066a0 <rshift+0x48>

080066ce <__hexdig_fun>:
 80066ce:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80066d2:	2b09      	cmp	r3, #9
 80066d4:	d802      	bhi.n	80066dc <__hexdig_fun+0xe>
 80066d6:	3820      	subs	r0, #32
 80066d8:	b2c0      	uxtb	r0, r0
 80066da:	4770      	bx	lr
 80066dc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80066e0:	2b05      	cmp	r3, #5
 80066e2:	d801      	bhi.n	80066e8 <__hexdig_fun+0x1a>
 80066e4:	3847      	subs	r0, #71	; 0x47
 80066e6:	e7f7      	b.n	80066d8 <__hexdig_fun+0xa>
 80066e8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80066ec:	2b05      	cmp	r3, #5
 80066ee:	d801      	bhi.n	80066f4 <__hexdig_fun+0x26>
 80066f0:	3827      	subs	r0, #39	; 0x27
 80066f2:	e7f1      	b.n	80066d8 <__hexdig_fun+0xa>
 80066f4:	2000      	movs	r0, #0
 80066f6:	4770      	bx	lr

080066f8 <__gethex>:
 80066f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066fc:	b08b      	sub	sp, #44	; 0x2c
 80066fe:	9002      	str	r0, [sp, #8]
 8006700:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006702:	468a      	mov	sl, r1
 8006704:	4690      	mov	r8, r2
 8006706:	9306      	str	r3, [sp, #24]
 8006708:	f000 fad1 	bl	8006cae <__localeconv_l>
 800670c:	6803      	ldr	r3, [r0, #0]
 800670e:	f04f 0b00 	mov.w	fp, #0
 8006712:	4618      	mov	r0, r3
 8006714:	9303      	str	r3, [sp, #12]
 8006716:	f7f9 fd87 	bl	8000228 <strlen>
 800671a:	9b03      	ldr	r3, [sp, #12]
 800671c:	9001      	str	r0, [sp, #4]
 800671e:	4403      	add	r3, r0
 8006720:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006724:	9307      	str	r3, [sp, #28]
 8006726:	f8da 3000 	ldr.w	r3, [sl]
 800672a:	3302      	adds	r3, #2
 800672c:	461f      	mov	r7, r3
 800672e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006732:	2830      	cmp	r0, #48	; 0x30
 8006734:	d06c      	beq.n	8006810 <__gethex+0x118>
 8006736:	f7ff ffca 	bl	80066ce <__hexdig_fun>
 800673a:	4604      	mov	r4, r0
 800673c:	2800      	cmp	r0, #0
 800673e:	d16a      	bne.n	8006816 <__gethex+0x11e>
 8006740:	9a01      	ldr	r2, [sp, #4]
 8006742:	9903      	ldr	r1, [sp, #12]
 8006744:	4638      	mov	r0, r7
 8006746:	f001 f905 	bl	8007954 <strncmp>
 800674a:	2800      	cmp	r0, #0
 800674c:	d166      	bne.n	800681c <__gethex+0x124>
 800674e:	9b01      	ldr	r3, [sp, #4]
 8006750:	5cf8      	ldrb	r0, [r7, r3]
 8006752:	18fe      	adds	r6, r7, r3
 8006754:	f7ff ffbb 	bl	80066ce <__hexdig_fun>
 8006758:	2800      	cmp	r0, #0
 800675a:	d062      	beq.n	8006822 <__gethex+0x12a>
 800675c:	4633      	mov	r3, r6
 800675e:	7818      	ldrb	r0, [r3, #0]
 8006760:	461f      	mov	r7, r3
 8006762:	2830      	cmp	r0, #48	; 0x30
 8006764:	f103 0301 	add.w	r3, r3, #1
 8006768:	d0f9      	beq.n	800675e <__gethex+0x66>
 800676a:	f7ff ffb0 	bl	80066ce <__hexdig_fun>
 800676e:	fab0 f580 	clz	r5, r0
 8006772:	4634      	mov	r4, r6
 8006774:	f04f 0b01 	mov.w	fp, #1
 8006778:	096d      	lsrs	r5, r5, #5
 800677a:	463a      	mov	r2, r7
 800677c:	4616      	mov	r6, r2
 800677e:	7830      	ldrb	r0, [r6, #0]
 8006780:	3201      	adds	r2, #1
 8006782:	f7ff ffa4 	bl	80066ce <__hexdig_fun>
 8006786:	2800      	cmp	r0, #0
 8006788:	d1f8      	bne.n	800677c <__gethex+0x84>
 800678a:	9a01      	ldr	r2, [sp, #4]
 800678c:	9903      	ldr	r1, [sp, #12]
 800678e:	4630      	mov	r0, r6
 8006790:	f001 f8e0 	bl	8007954 <strncmp>
 8006794:	b950      	cbnz	r0, 80067ac <__gethex+0xb4>
 8006796:	b954      	cbnz	r4, 80067ae <__gethex+0xb6>
 8006798:	9b01      	ldr	r3, [sp, #4]
 800679a:	18f4      	adds	r4, r6, r3
 800679c:	4622      	mov	r2, r4
 800679e:	4616      	mov	r6, r2
 80067a0:	7830      	ldrb	r0, [r6, #0]
 80067a2:	3201      	adds	r2, #1
 80067a4:	f7ff ff93 	bl	80066ce <__hexdig_fun>
 80067a8:	2800      	cmp	r0, #0
 80067aa:	d1f8      	bne.n	800679e <__gethex+0xa6>
 80067ac:	b10c      	cbz	r4, 80067b2 <__gethex+0xba>
 80067ae:	1ba4      	subs	r4, r4, r6
 80067b0:	00a4      	lsls	r4, r4, #2
 80067b2:	7833      	ldrb	r3, [r6, #0]
 80067b4:	2b50      	cmp	r3, #80	; 0x50
 80067b6:	d001      	beq.n	80067bc <__gethex+0xc4>
 80067b8:	2b70      	cmp	r3, #112	; 0x70
 80067ba:	d140      	bne.n	800683e <__gethex+0x146>
 80067bc:	7873      	ldrb	r3, [r6, #1]
 80067be:	2b2b      	cmp	r3, #43	; 0x2b
 80067c0:	d031      	beq.n	8006826 <__gethex+0x12e>
 80067c2:	2b2d      	cmp	r3, #45	; 0x2d
 80067c4:	d033      	beq.n	800682e <__gethex+0x136>
 80067c6:	f04f 0900 	mov.w	r9, #0
 80067ca:	1c71      	adds	r1, r6, #1
 80067cc:	7808      	ldrb	r0, [r1, #0]
 80067ce:	f7ff ff7e 	bl	80066ce <__hexdig_fun>
 80067d2:	1e43      	subs	r3, r0, #1
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	2b18      	cmp	r3, #24
 80067d8:	d831      	bhi.n	800683e <__gethex+0x146>
 80067da:	f1a0 0210 	sub.w	r2, r0, #16
 80067de:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80067e2:	f7ff ff74 	bl	80066ce <__hexdig_fun>
 80067e6:	1e43      	subs	r3, r0, #1
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	2b18      	cmp	r3, #24
 80067ec:	d922      	bls.n	8006834 <__gethex+0x13c>
 80067ee:	f1b9 0f00 	cmp.w	r9, #0
 80067f2:	d000      	beq.n	80067f6 <__gethex+0xfe>
 80067f4:	4252      	negs	r2, r2
 80067f6:	4414      	add	r4, r2
 80067f8:	f8ca 1000 	str.w	r1, [sl]
 80067fc:	b30d      	cbz	r5, 8006842 <__gethex+0x14a>
 80067fe:	f1bb 0f00 	cmp.w	fp, #0
 8006802:	bf0c      	ite	eq
 8006804:	2706      	moveq	r7, #6
 8006806:	2700      	movne	r7, #0
 8006808:	4638      	mov	r0, r7
 800680a:	b00b      	add	sp, #44	; 0x2c
 800680c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006810:	f10b 0b01 	add.w	fp, fp, #1
 8006814:	e78a      	b.n	800672c <__gethex+0x34>
 8006816:	2500      	movs	r5, #0
 8006818:	462c      	mov	r4, r5
 800681a:	e7ae      	b.n	800677a <__gethex+0x82>
 800681c:	463e      	mov	r6, r7
 800681e:	2501      	movs	r5, #1
 8006820:	e7c7      	b.n	80067b2 <__gethex+0xba>
 8006822:	4604      	mov	r4, r0
 8006824:	e7fb      	b.n	800681e <__gethex+0x126>
 8006826:	f04f 0900 	mov.w	r9, #0
 800682a:	1cb1      	adds	r1, r6, #2
 800682c:	e7ce      	b.n	80067cc <__gethex+0xd4>
 800682e:	f04f 0901 	mov.w	r9, #1
 8006832:	e7fa      	b.n	800682a <__gethex+0x132>
 8006834:	230a      	movs	r3, #10
 8006836:	fb03 0202 	mla	r2, r3, r2, r0
 800683a:	3a10      	subs	r2, #16
 800683c:	e7cf      	b.n	80067de <__gethex+0xe6>
 800683e:	4631      	mov	r1, r6
 8006840:	e7da      	b.n	80067f8 <__gethex+0x100>
 8006842:	4629      	mov	r1, r5
 8006844:	1bf3      	subs	r3, r6, r7
 8006846:	3b01      	subs	r3, #1
 8006848:	2b07      	cmp	r3, #7
 800684a:	dc49      	bgt.n	80068e0 <__gethex+0x1e8>
 800684c:	9802      	ldr	r0, [sp, #8]
 800684e:	f000 fa72 	bl	8006d36 <_Balloc>
 8006852:	f04f 0b00 	mov.w	fp, #0
 8006856:	4605      	mov	r5, r0
 8006858:	46da      	mov	sl, fp
 800685a:	9b01      	ldr	r3, [sp, #4]
 800685c:	f100 0914 	add.w	r9, r0, #20
 8006860:	f1c3 0301 	rsb	r3, r3, #1
 8006864:	f8cd 9010 	str.w	r9, [sp, #16]
 8006868:	9308      	str	r3, [sp, #32]
 800686a:	42b7      	cmp	r7, r6
 800686c:	d33b      	bcc.n	80068e6 <__gethex+0x1ee>
 800686e:	9804      	ldr	r0, [sp, #16]
 8006870:	f840 ab04 	str.w	sl, [r0], #4
 8006874:	eba0 0009 	sub.w	r0, r0, r9
 8006878:	1080      	asrs	r0, r0, #2
 800687a:	6128      	str	r0, [r5, #16]
 800687c:	0147      	lsls	r7, r0, #5
 800687e:	4650      	mov	r0, sl
 8006880:	f000 fb1d 	bl	8006ebe <__hi0bits>
 8006884:	f8d8 6000 	ldr.w	r6, [r8]
 8006888:	1a3f      	subs	r7, r7, r0
 800688a:	42b7      	cmp	r7, r6
 800688c:	dd64      	ble.n	8006958 <__gethex+0x260>
 800688e:	1bbf      	subs	r7, r7, r6
 8006890:	4639      	mov	r1, r7
 8006892:	4628      	mov	r0, r5
 8006894:	f000 fe27 	bl	80074e6 <__any_on>
 8006898:	4682      	mov	sl, r0
 800689a:	b178      	cbz	r0, 80068bc <__gethex+0x1c4>
 800689c:	f04f 0a01 	mov.w	sl, #1
 80068a0:	1e7b      	subs	r3, r7, #1
 80068a2:	1159      	asrs	r1, r3, #5
 80068a4:	f003 021f 	and.w	r2, r3, #31
 80068a8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80068ac:	fa0a f202 	lsl.w	r2, sl, r2
 80068b0:	420a      	tst	r2, r1
 80068b2:	d003      	beq.n	80068bc <__gethex+0x1c4>
 80068b4:	4553      	cmp	r3, sl
 80068b6:	dc46      	bgt.n	8006946 <__gethex+0x24e>
 80068b8:	f04f 0a02 	mov.w	sl, #2
 80068bc:	4639      	mov	r1, r7
 80068be:	4628      	mov	r0, r5
 80068c0:	f7ff feca 	bl	8006658 <rshift>
 80068c4:	443c      	add	r4, r7
 80068c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80068ca:	42a3      	cmp	r3, r4
 80068cc:	da52      	bge.n	8006974 <__gethex+0x27c>
 80068ce:	4629      	mov	r1, r5
 80068d0:	9802      	ldr	r0, [sp, #8]
 80068d2:	f000 fa64 	bl	8006d9e <_Bfree>
 80068d6:	2300      	movs	r3, #0
 80068d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80068da:	27a3      	movs	r7, #163	; 0xa3
 80068dc:	6013      	str	r3, [r2, #0]
 80068de:	e793      	b.n	8006808 <__gethex+0x110>
 80068e0:	3101      	adds	r1, #1
 80068e2:	105b      	asrs	r3, r3, #1
 80068e4:	e7b0      	b.n	8006848 <__gethex+0x150>
 80068e6:	1e73      	subs	r3, r6, #1
 80068e8:	9305      	str	r3, [sp, #20]
 80068ea:	9a07      	ldr	r2, [sp, #28]
 80068ec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d018      	beq.n	8006926 <__gethex+0x22e>
 80068f4:	f1bb 0f20 	cmp.w	fp, #32
 80068f8:	d107      	bne.n	800690a <__gethex+0x212>
 80068fa:	9b04      	ldr	r3, [sp, #16]
 80068fc:	f8c3 a000 	str.w	sl, [r3]
 8006900:	f04f 0a00 	mov.w	sl, #0
 8006904:	46d3      	mov	fp, sl
 8006906:	3304      	adds	r3, #4
 8006908:	9304      	str	r3, [sp, #16]
 800690a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800690e:	f7ff fede 	bl	80066ce <__hexdig_fun>
 8006912:	f000 000f 	and.w	r0, r0, #15
 8006916:	fa00 f00b 	lsl.w	r0, r0, fp
 800691a:	ea4a 0a00 	orr.w	sl, sl, r0
 800691e:	f10b 0b04 	add.w	fp, fp, #4
 8006922:	9b05      	ldr	r3, [sp, #20]
 8006924:	e00d      	b.n	8006942 <__gethex+0x24a>
 8006926:	9b05      	ldr	r3, [sp, #20]
 8006928:	9a08      	ldr	r2, [sp, #32]
 800692a:	4413      	add	r3, r2
 800692c:	42bb      	cmp	r3, r7
 800692e:	d3e1      	bcc.n	80068f4 <__gethex+0x1fc>
 8006930:	4618      	mov	r0, r3
 8006932:	9a01      	ldr	r2, [sp, #4]
 8006934:	9903      	ldr	r1, [sp, #12]
 8006936:	9309      	str	r3, [sp, #36]	; 0x24
 8006938:	f001 f80c 	bl	8007954 <strncmp>
 800693c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800693e:	2800      	cmp	r0, #0
 8006940:	d1d8      	bne.n	80068f4 <__gethex+0x1fc>
 8006942:	461e      	mov	r6, r3
 8006944:	e791      	b.n	800686a <__gethex+0x172>
 8006946:	1eb9      	subs	r1, r7, #2
 8006948:	4628      	mov	r0, r5
 800694a:	f000 fdcc 	bl	80074e6 <__any_on>
 800694e:	2800      	cmp	r0, #0
 8006950:	d0b2      	beq.n	80068b8 <__gethex+0x1c0>
 8006952:	f04f 0a03 	mov.w	sl, #3
 8006956:	e7b1      	b.n	80068bc <__gethex+0x1c4>
 8006958:	da09      	bge.n	800696e <__gethex+0x276>
 800695a:	1bf7      	subs	r7, r6, r7
 800695c:	4629      	mov	r1, r5
 800695e:	463a      	mov	r2, r7
 8006960:	9802      	ldr	r0, [sp, #8]
 8006962:	f000 fbe7 	bl	8007134 <__lshift>
 8006966:	4605      	mov	r5, r0
 8006968:	1be4      	subs	r4, r4, r7
 800696a:	f100 0914 	add.w	r9, r0, #20
 800696e:	f04f 0a00 	mov.w	sl, #0
 8006972:	e7a8      	b.n	80068c6 <__gethex+0x1ce>
 8006974:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006978:	42a0      	cmp	r0, r4
 800697a:	dd6b      	ble.n	8006a54 <__gethex+0x35c>
 800697c:	1b04      	subs	r4, r0, r4
 800697e:	42a6      	cmp	r6, r4
 8006980:	dc2e      	bgt.n	80069e0 <__gethex+0x2e8>
 8006982:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006986:	2b02      	cmp	r3, #2
 8006988:	d022      	beq.n	80069d0 <__gethex+0x2d8>
 800698a:	2b03      	cmp	r3, #3
 800698c:	d024      	beq.n	80069d8 <__gethex+0x2e0>
 800698e:	2b01      	cmp	r3, #1
 8006990:	d115      	bne.n	80069be <__gethex+0x2c6>
 8006992:	42a6      	cmp	r6, r4
 8006994:	d113      	bne.n	80069be <__gethex+0x2c6>
 8006996:	2e01      	cmp	r6, #1
 8006998:	dc0b      	bgt.n	80069b2 <__gethex+0x2ba>
 800699a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800699e:	9a06      	ldr	r2, [sp, #24]
 80069a0:	2762      	movs	r7, #98	; 0x62
 80069a2:	6013      	str	r3, [r2, #0]
 80069a4:	2301      	movs	r3, #1
 80069a6:	612b      	str	r3, [r5, #16]
 80069a8:	f8c9 3000 	str.w	r3, [r9]
 80069ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80069ae:	601d      	str	r5, [r3, #0]
 80069b0:	e72a      	b.n	8006808 <__gethex+0x110>
 80069b2:	1e71      	subs	r1, r6, #1
 80069b4:	4628      	mov	r0, r5
 80069b6:	f000 fd96 	bl	80074e6 <__any_on>
 80069ba:	2800      	cmp	r0, #0
 80069bc:	d1ed      	bne.n	800699a <__gethex+0x2a2>
 80069be:	4629      	mov	r1, r5
 80069c0:	9802      	ldr	r0, [sp, #8]
 80069c2:	f000 f9ec 	bl	8006d9e <_Bfree>
 80069c6:	2300      	movs	r3, #0
 80069c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80069ca:	2750      	movs	r7, #80	; 0x50
 80069cc:	6013      	str	r3, [r2, #0]
 80069ce:	e71b      	b.n	8006808 <__gethex+0x110>
 80069d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d0e1      	beq.n	800699a <__gethex+0x2a2>
 80069d6:	e7f2      	b.n	80069be <__gethex+0x2c6>
 80069d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1dd      	bne.n	800699a <__gethex+0x2a2>
 80069de:	e7ee      	b.n	80069be <__gethex+0x2c6>
 80069e0:	1e67      	subs	r7, r4, #1
 80069e2:	f1ba 0f00 	cmp.w	sl, #0
 80069e6:	d132      	bne.n	8006a4e <__gethex+0x356>
 80069e8:	b127      	cbz	r7, 80069f4 <__gethex+0x2fc>
 80069ea:	4639      	mov	r1, r7
 80069ec:	4628      	mov	r0, r5
 80069ee:	f000 fd7a 	bl	80074e6 <__any_on>
 80069f2:	4682      	mov	sl, r0
 80069f4:	2301      	movs	r3, #1
 80069f6:	117a      	asrs	r2, r7, #5
 80069f8:	f007 071f 	and.w	r7, r7, #31
 80069fc:	fa03 f707 	lsl.w	r7, r3, r7
 8006a00:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8006a04:	4621      	mov	r1, r4
 8006a06:	421f      	tst	r7, r3
 8006a08:	f04f 0702 	mov.w	r7, #2
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	bf18      	it	ne
 8006a10:	f04a 0a02 	orrne.w	sl, sl, #2
 8006a14:	1b36      	subs	r6, r6, r4
 8006a16:	f7ff fe1f 	bl	8006658 <rshift>
 8006a1a:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8006a1e:	f1ba 0f00 	cmp.w	sl, #0
 8006a22:	d048      	beq.n	8006ab6 <__gethex+0x3be>
 8006a24:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d015      	beq.n	8006a58 <__gethex+0x360>
 8006a2c:	2b03      	cmp	r3, #3
 8006a2e:	d017      	beq.n	8006a60 <__gethex+0x368>
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d109      	bne.n	8006a48 <__gethex+0x350>
 8006a34:	f01a 0f02 	tst.w	sl, #2
 8006a38:	d006      	beq.n	8006a48 <__gethex+0x350>
 8006a3a:	f8d9 3000 	ldr.w	r3, [r9]
 8006a3e:	ea4a 0a03 	orr.w	sl, sl, r3
 8006a42:	f01a 0f01 	tst.w	sl, #1
 8006a46:	d10e      	bne.n	8006a66 <__gethex+0x36e>
 8006a48:	f047 0710 	orr.w	r7, r7, #16
 8006a4c:	e033      	b.n	8006ab6 <__gethex+0x3be>
 8006a4e:	f04f 0a01 	mov.w	sl, #1
 8006a52:	e7cf      	b.n	80069f4 <__gethex+0x2fc>
 8006a54:	2701      	movs	r7, #1
 8006a56:	e7e2      	b.n	8006a1e <__gethex+0x326>
 8006a58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a5a:	f1c3 0301 	rsb	r3, r3, #1
 8006a5e:	9315      	str	r3, [sp, #84]	; 0x54
 8006a60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d0f0      	beq.n	8006a48 <__gethex+0x350>
 8006a66:	f04f 0c00 	mov.w	ip, #0
 8006a6a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8006a6e:	f105 0314 	add.w	r3, r5, #20
 8006a72:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8006a76:	eb03 010a 	add.w	r1, r3, sl
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a80:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006a84:	d01c      	beq.n	8006ac0 <__gethex+0x3c8>
 8006a86:	3201      	adds	r2, #1
 8006a88:	6002      	str	r2, [r0, #0]
 8006a8a:	2f02      	cmp	r7, #2
 8006a8c:	f105 0314 	add.w	r3, r5, #20
 8006a90:	d138      	bne.n	8006b04 <__gethex+0x40c>
 8006a92:	f8d8 2000 	ldr.w	r2, [r8]
 8006a96:	3a01      	subs	r2, #1
 8006a98:	42b2      	cmp	r2, r6
 8006a9a:	d10a      	bne.n	8006ab2 <__gethex+0x3ba>
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	1171      	asrs	r1, r6, #5
 8006aa0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006aa4:	f006 061f 	and.w	r6, r6, #31
 8006aa8:	fa02 f606 	lsl.w	r6, r2, r6
 8006aac:	421e      	tst	r6, r3
 8006aae:	bf18      	it	ne
 8006ab0:	4617      	movne	r7, r2
 8006ab2:	f047 0720 	orr.w	r7, r7, #32
 8006ab6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006ab8:	601d      	str	r5, [r3, #0]
 8006aba:	9b06      	ldr	r3, [sp, #24]
 8006abc:	601c      	str	r4, [r3, #0]
 8006abe:	e6a3      	b.n	8006808 <__gethex+0x110>
 8006ac0:	4299      	cmp	r1, r3
 8006ac2:	f843 cc04 	str.w	ip, [r3, #-4]
 8006ac6:	d8d8      	bhi.n	8006a7a <__gethex+0x382>
 8006ac8:	68ab      	ldr	r3, [r5, #8]
 8006aca:	4599      	cmp	r9, r3
 8006acc:	db12      	blt.n	8006af4 <__gethex+0x3fc>
 8006ace:	6869      	ldr	r1, [r5, #4]
 8006ad0:	9802      	ldr	r0, [sp, #8]
 8006ad2:	3101      	adds	r1, #1
 8006ad4:	f000 f92f 	bl	8006d36 <_Balloc>
 8006ad8:	4683      	mov	fp, r0
 8006ada:	692a      	ldr	r2, [r5, #16]
 8006adc:	f105 010c 	add.w	r1, r5, #12
 8006ae0:	3202      	adds	r2, #2
 8006ae2:	0092      	lsls	r2, r2, #2
 8006ae4:	300c      	adds	r0, #12
 8006ae6:	f000 f91b 	bl	8006d20 <memcpy>
 8006aea:	4629      	mov	r1, r5
 8006aec:	9802      	ldr	r0, [sp, #8]
 8006aee:	f000 f956 	bl	8006d9e <_Bfree>
 8006af2:	465d      	mov	r5, fp
 8006af4:	692b      	ldr	r3, [r5, #16]
 8006af6:	1c5a      	adds	r2, r3, #1
 8006af8:	612a      	str	r2, [r5, #16]
 8006afa:	2201      	movs	r2, #1
 8006afc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006b00:	615a      	str	r2, [r3, #20]
 8006b02:	e7c2      	b.n	8006a8a <__gethex+0x392>
 8006b04:	692a      	ldr	r2, [r5, #16]
 8006b06:	454a      	cmp	r2, r9
 8006b08:	dd0b      	ble.n	8006b22 <__gethex+0x42a>
 8006b0a:	2101      	movs	r1, #1
 8006b0c:	4628      	mov	r0, r5
 8006b0e:	f7ff fda3 	bl	8006658 <rshift>
 8006b12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006b16:	3401      	adds	r4, #1
 8006b18:	42a3      	cmp	r3, r4
 8006b1a:	f6ff aed8 	blt.w	80068ce <__gethex+0x1d6>
 8006b1e:	2701      	movs	r7, #1
 8006b20:	e7c7      	b.n	8006ab2 <__gethex+0x3ba>
 8006b22:	f016 061f 	ands.w	r6, r6, #31
 8006b26:	d0fa      	beq.n	8006b1e <__gethex+0x426>
 8006b28:	449a      	add	sl, r3
 8006b2a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006b2e:	f000 f9c6 	bl	8006ebe <__hi0bits>
 8006b32:	f1c6 0620 	rsb	r6, r6, #32
 8006b36:	42b0      	cmp	r0, r6
 8006b38:	dbe7      	blt.n	8006b0a <__gethex+0x412>
 8006b3a:	e7f0      	b.n	8006b1e <__gethex+0x426>

08006b3c <L_shift>:
 8006b3c:	f1c2 0208 	rsb	r2, r2, #8
 8006b40:	0092      	lsls	r2, r2, #2
 8006b42:	b570      	push	{r4, r5, r6, lr}
 8006b44:	f1c2 0620 	rsb	r6, r2, #32
 8006b48:	6843      	ldr	r3, [r0, #4]
 8006b4a:	6804      	ldr	r4, [r0, #0]
 8006b4c:	fa03 f506 	lsl.w	r5, r3, r6
 8006b50:	432c      	orrs	r4, r5
 8006b52:	40d3      	lsrs	r3, r2
 8006b54:	6004      	str	r4, [r0, #0]
 8006b56:	f840 3f04 	str.w	r3, [r0, #4]!
 8006b5a:	4288      	cmp	r0, r1
 8006b5c:	d3f4      	bcc.n	8006b48 <L_shift+0xc>
 8006b5e:	bd70      	pop	{r4, r5, r6, pc}

08006b60 <__match>:
 8006b60:	b530      	push	{r4, r5, lr}
 8006b62:	6803      	ldr	r3, [r0, #0]
 8006b64:	3301      	adds	r3, #1
 8006b66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b6a:	b914      	cbnz	r4, 8006b72 <__match+0x12>
 8006b6c:	6003      	str	r3, [r0, #0]
 8006b6e:	2001      	movs	r0, #1
 8006b70:	bd30      	pop	{r4, r5, pc}
 8006b72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b76:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006b7a:	2d19      	cmp	r5, #25
 8006b7c:	bf98      	it	ls
 8006b7e:	3220      	addls	r2, #32
 8006b80:	42a2      	cmp	r2, r4
 8006b82:	d0f0      	beq.n	8006b66 <__match+0x6>
 8006b84:	2000      	movs	r0, #0
 8006b86:	e7f3      	b.n	8006b70 <__match+0x10>

08006b88 <__hexnan>:
 8006b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b8c:	2500      	movs	r5, #0
 8006b8e:	680b      	ldr	r3, [r1, #0]
 8006b90:	4682      	mov	sl, r0
 8006b92:	115f      	asrs	r7, r3, #5
 8006b94:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8006b98:	f013 031f 	ands.w	r3, r3, #31
 8006b9c:	bf18      	it	ne
 8006b9e:	3704      	addne	r7, #4
 8006ba0:	1f3e      	subs	r6, r7, #4
 8006ba2:	4690      	mov	r8, r2
 8006ba4:	46b1      	mov	r9, r6
 8006ba6:	4634      	mov	r4, r6
 8006ba8:	46ab      	mov	fp, r5
 8006baa:	b087      	sub	sp, #28
 8006bac:	6801      	ldr	r1, [r0, #0]
 8006bae:	9301      	str	r3, [sp, #4]
 8006bb0:	f847 5c04 	str.w	r5, [r7, #-4]
 8006bb4:	9502      	str	r5, [sp, #8]
 8006bb6:	784a      	ldrb	r2, [r1, #1]
 8006bb8:	1c4b      	adds	r3, r1, #1
 8006bba:	9303      	str	r3, [sp, #12]
 8006bbc:	b342      	cbz	r2, 8006c10 <__hexnan+0x88>
 8006bbe:	4610      	mov	r0, r2
 8006bc0:	9105      	str	r1, [sp, #20]
 8006bc2:	9204      	str	r2, [sp, #16]
 8006bc4:	f7ff fd83 	bl	80066ce <__hexdig_fun>
 8006bc8:	2800      	cmp	r0, #0
 8006bca:	d143      	bne.n	8006c54 <__hexnan+0xcc>
 8006bcc:	9a04      	ldr	r2, [sp, #16]
 8006bce:	9905      	ldr	r1, [sp, #20]
 8006bd0:	2a20      	cmp	r2, #32
 8006bd2:	d818      	bhi.n	8006c06 <__hexnan+0x7e>
 8006bd4:	9b02      	ldr	r3, [sp, #8]
 8006bd6:	459b      	cmp	fp, r3
 8006bd8:	dd13      	ble.n	8006c02 <__hexnan+0x7a>
 8006bda:	454c      	cmp	r4, r9
 8006bdc:	d206      	bcs.n	8006bec <__hexnan+0x64>
 8006bde:	2d07      	cmp	r5, #7
 8006be0:	dc04      	bgt.n	8006bec <__hexnan+0x64>
 8006be2:	462a      	mov	r2, r5
 8006be4:	4649      	mov	r1, r9
 8006be6:	4620      	mov	r0, r4
 8006be8:	f7ff ffa8 	bl	8006b3c <L_shift>
 8006bec:	4544      	cmp	r4, r8
 8006bee:	d944      	bls.n	8006c7a <__hexnan+0xf2>
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	f1a4 0904 	sub.w	r9, r4, #4
 8006bf6:	f844 3c04 	str.w	r3, [r4, #-4]
 8006bfa:	461d      	mov	r5, r3
 8006bfc:	464c      	mov	r4, r9
 8006bfe:	f8cd b008 	str.w	fp, [sp, #8]
 8006c02:	9903      	ldr	r1, [sp, #12]
 8006c04:	e7d7      	b.n	8006bb6 <__hexnan+0x2e>
 8006c06:	2a29      	cmp	r2, #41	; 0x29
 8006c08:	d14a      	bne.n	8006ca0 <__hexnan+0x118>
 8006c0a:	3102      	adds	r1, #2
 8006c0c:	f8ca 1000 	str.w	r1, [sl]
 8006c10:	f1bb 0f00 	cmp.w	fp, #0
 8006c14:	d044      	beq.n	8006ca0 <__hexnan+0x118>
 8006c16:	454c      	cmp	r4, r9
 8006c18:	d206      	bcs.n	8006c28 <__hexnan+0xa0>
 8006c1a:	2d07      	cmp	r5, #7
 8006c1c:	dc04      	bgt.n	8006c28 <__hexnan+0xa0>
 8006c1e:	462a      	mov	r2, r5
 8006c20:	4649      	mov	r1, r9
 8006c22:	4620      	mov	r0, r4
 8006c24:	f7ff ff8a 	bl	8006b3c <L_shift>
 8006c28:	4544      	cmp	r4, r8
 8006c2a:	d928      	bls.n	8006c7e <__hexnan+0xf6>
 8006c2c:	4643      	mov	r3, r8
 8006c2e:	f854 2b04 	ldr.w	r2, [r4], #4
 8006c32:	42a6      	cmp	r6, r4
 8006c34:	f843 2b04 	str.w	r2, [r3], #4
 8006c38:	d2f9      	bcs.n	8006c2e <__hexnan+0xa6>
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f843 2b04 	str.w	r2, [r3], #4
 8006c40:	429e      	cmp	r6, r3
 8006c42:	d2fb      	bcs.n	8006c3c <__hexnan+0xb4>
 8006c44:	6833      	ldr	r3, [r6, #0]
 8006c46:	b91b      	cbnz	r3, 8006c50 <__hexnan+0xc8>
 8006c48:	4546      	cmp	r6, r8
 8006c4a:	d127      	bne.n	8006c9c <__hexnan+0x114>
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	6033      	str	r3, [r6, #0]
 8006c50:	2005      	movs	r0, #5
 8006c52:	e026      	b.n	8006ca2 <__hexnan+0x11a>
 8006c54:	3501      	adds	r5, #1
 8006c56:	2d08      	cmp	r5, #8
 8006c58:	f10b 0b01 	add.w	fp, fp, #1
 8006c5c:	dd06      	ble.n	8006c6c <__hexnan+0xe4>
 8006c5e:	4544      	cmp	r4, r8
 8006c60:	d9cf      	bls.n	8006c02 <__hexnan+0x7a>
 8006c62:	2300      	movs	r3, #0
 8006c64:	2501      	movs	r5, #1
 8006c66:	f844 3c04 	str.w	r3, [r4, #-4]
 8006c6a:	3c04      	subs	r4, #4
 8006c6c:	6822      	ldr	r2, [r4, #0]
 8006c6e:	f000 000f 	and.w	r0, r0, #15
 8006c72:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006c76:	6020      	str	r0, [r4, #0]
 8006c78:	e7c3      	b.n	8006c02 <__hexnan+0x7a>
 8006c7a:	2508      	movs	r5, #8
 8006c7c:	e7c1      	b.n	8006c02 <__hexnan+0x7a>
 8006c7e:	9b01      	ldr	r3, [sp, #4]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d0df      	beq.n	8006c44 <__hexnan+0xbc>
 8006c84:	f04f 32ff 	mov.w	r2, #4294967295
 8006c88:	f1c3 0320 	rsb	r3, r3, #32
 8006c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c90:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8006c94:	401a      	ands	r2, r3
 8006c96:	f847 2c04 	str.w	r2, [r7, #-4]
 8006c9a:	e7d3      	b.n	8006c44 <__hexnan+0xbc>
 8006c9c:	3e04      	subs	r6, #4
 8006c9e:	e7d1      	b.n	8006c44 <__hexnan+0xbc>
 8006ca0:	2004      	movs	r0, #4
 8006ca2:	b007      	add	sp, #28
 8006ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006ca8 <__locale_ctype_ptr_l>:
 8006ca8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006cac:	4770      	bx	lr

08006cae <__localeconv_l>:
 8006cae:	30f0      	adds	r0, #240	; 0xf0
 8006cb0:	4770      	bx	lr
	...

08006cb4 <_localeconv_r>:
 8006cb4:	4b04      	ldr	r3, [pc, #16]	; (8006cc8 <_localeconv_r+0x14>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	6a18      	ldr	r0, [r3, #32]
 8006cba:	4b04      	ldr	r3, [pc, #16]	; (8006ccc <_localeconv_r+0x18>)
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	bf08      	it	eq
 8006cc0:	4618      	moveq	r0, r3
 8006cc2:	30f0      	adds	r0, #240	; 0xf0
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	2000000c 	.word	0x2000000c
 8006ccc:	20000070 	.word	0x20000070

08006cd0 <malloc>:
 8006cd0:	4b02      	ldr	r3, [pc, #8]	; (8006cdc <malloc+0xc>)
 8006cd2:	4601      	mov	r1, r0
 8006cd4:	6818      	ldr	r0, [r3, #0]
 8006cd6:	f000 bc81 	b.w	80075dc <_malloc_r>
 8006cda:	bf00      	nop
 8006cdc:	2000000c 	.word	0x2000000c

08006ce0 <__ascii_mbtowc>:
 8006ce0:	b082      	sub	sp, #8
 8006ce2:	b901      	cbnz	r1, 8006ce6 <__ascii_mbtowc+0x6>
 8006ce4:	a901      	add	r1, sp, #4
 8006ce6:	b142      	cbz	r2, 8006cfa <__ascii_mbtowc+0x1a>
 8006ce8:	b14b      	cbz	r3, 8006cfe <__ascii_mbtowc+0x1e>
 8006cea:	7813      	ldrb	r3, [r2, #0]
 8006cec:	600b      	str	r3, [r1, #0]
 8006cee:	7812      	ldrb	r2, [r2, #0]
 8006cf0:	1c10      	adds	r0, r2, #0
 8006cf2:	bf18      	it	ne
 8006cf4:	2001      	movne	r0, #1
 8006cf6:	b002      	add	sp, #8
 8006cf8:	4770      	bx	lr
 8006cfa:	4610      	mov	r0, r2
 8006cfc:	e7fb      	b.n	8006cf6 <__ascii_mbtowc+0x16>
 8006cfe:	f06f 0001 	mvn.w	r0, #1
 8006d02:	e7f8      	b.n	8006cf6 <__ascii_mbtowc+0x16>

08006d04 <memchr>:
 8006d04:	b510      	push	{r4, lr}
 8006d06:	b2c9      	uxtb	r1, r1
 8006d08:	4402      	add	r2, r0
 8006d0a:	4290      	cmp	r0, r2
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	d101      	bne.n	8006d14 <memchr+0x10>
 8006d10:	2300      	movs	r3, #0
 8006d12:	e003      	b.n	8006d1c <memchr+0x18>
 8006d14:	781c      	ldrb	r4, [r3, #0]
 8006d16:	3001      	adds	r0, #1
 8006d18:	428c      	cmp	r4, r1
 8006d1a:	d1f6      	bne.n	8006d0a <memchr+0x6>
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	bd10      	pop	{r4, pc}

08006d20 <memcpy>:
 8006d20:	b510      	push	{r4, lr}
 8006d22:	1e43      	subs	r3, r0, #1
 8006d24:	440a      	add	r2, r1
 8006d26:	4291      	cmp	r1, r2
 8006d28:	d100      	bne.n	8006d2c <memcpy+0xc>
 8006d2a:	bd10      	pop	{r4, pc}
 8006d2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d34:	e7f7      	b.n	8006d26 <memcpy+0x6>

08006d36 <_Balloc>:
 8006d36:	b570      	push	{r4, r5, r6, lr}
 8006d38:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006d3a:	4604      	mov	r4, r0
 8006d3c:	460e      	mov	r6, r1
 8006d3e:	b93d      	cbnz	r5, 8006d50 <_Balloc+0x1a>
 8006d40:	2010      	movs	r0, #16
 8006d42:	f7ff ffc5 	bl	8006cd0 <malloc>
 8006d46:	6260      	str	r0, [r4, #36]	; 0x24
 8006d48:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006d4c:	6005      	str	r5, [r0, #0]
 8006d4e:	60c5      	str	r5, [r0, #12]
 8006d50:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006d52:	68eb      	ldr	r3, [r5, #12]
 8006d54:	b183      	cbz	r3, 8006d78 <_Balloc+0x42>
 8006d56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006d5e:	b9b8      	cbnz	r0, 8006d90 <_Balloc+0x5a>
 8006d60:	2101      	movs	r1, #1
 8006d62:	fa01 f506 	lsl.w	r5, r1, r6
 8006d66:	1d6a      	adds	r2, r5, #5
 8006d68:	0092      	lsls	r2, r2, #2
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	f000 fbdc 	bl	8007528 <_calloc_r>
 8006d70:	b160      	cbz	r0, 8006d8c <_Balloc+0x56>
 8006d72:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006d76:	e00e      	b.n	8006d96 <_Balloc+0x60>
 8006d78:	2221      	movs	r2, #33	; 0x21
 8006d7a:	2104      	movs	r1, #4
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	f000 fbd3 	bl	8007528 <_calloc_r>
 8006d82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d84:	60e8      	str	r0, [r5, #12]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1e4      	bne.n	8006d56 <_Balloc+0x20>
 8006d8c:	2000      	movs	r0, #0
 8006d8e:	bd70      	pop	{r4, r5, r6, pc}
 8006d90:	6802      	ldr	r2, [r0, #0]
 8006d92:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006d96:	2300      	movs	r3, #0
 8006d98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006d9c:	e7f7      	b.n	8006d8e <_Balloc+0x58>

08006d9e <_Bfree>:
 8006d9e:	b570      	push	{r4, r5, r6, lr}
 8006da0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006da2:	4606      	mov	r6, r0
 8006da4:	460d      	mov	r5, r1
 8006da6:	b93c      	cbnz	r4, 8006db8 <_Bfree+0x1a>
 8006da8:	2010      	movs	r0, #16
 8006daa:	f7ff ff91 	bl	8006cd0 <malloc>
 8006dae:	6270      	str	r0, [r6, #36]	; 0x24
 8006db0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006db4:	6004      	str	r4, [r0, #0]
 8006db6:	60c4      	str	r4, [r0, #12]
 8006db8:	b13d      	cbz	r5, 8006dca <_Bfree+0x2c>
 8006dba:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006dbc:	686a      	ldr	r2, [r5, #4]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006dc4:	6029      	str	r1, [r5, #0]
 8006dc6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006dca:	bd70      	pop	{r4, r5, r6, pc}

08006dcc <__multadd>:
 8006dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dd0:	461f      	mov	r7, r3
 8006dd2:	4606      	mov	r6, r0
 8006dd4:	460c      	mov	r4, r1
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	690d      	ldr	r5, [r1, #16]
 8006dda:	f101 0c14 	add.w	ip, r1, #20
 8006dde:	f8dc 0000 	ldr.w	r0, [ip]
 8006de2:	3301      	adds	r3, #1
 8006de4:	b281      	uxth	r1, r0
 8006de6:	fb02 7101 	mla	r1, r2, r1, r7
 8006dea:	0c00      	lsrs	r0, r0, #16
 8006dec:	0c0f      	lsrs	r7, r1, #16
 8006dee:	fb02 7000 	mla	r0, r2, r0, r7
 8006df2:	b289      	uxth	r1, r1
 8006df4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006df8:	429d      	cmp	r5, r3
 8006dfa:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006dfe:	f84c 1b04 	str.w	r1, [ip], #4
 8006e02:	dcec      	bgt.n	8006dde <__multadd+0x12>
 8006e04:	b1d7      	cbz	r7, 8006e3c <__multadd+0x70>
 8006e06:	68a3      	ldr	r3, [r4, #8]
 8006e08:	42ab      	cmp	r3, r5
 8006e0a:	dc12      	bgt.n	8006e32 <__multadd+0x66>
 8006e0c:	6861      	ldr	r1, [r4, #4]
 8006e0e:	4630      	mov	r0, r6
 8006e10:	3101      	adds	r1, #1
 8006e12:	f7ff ff90 	bl	8006d36 <_Balloc>
 8006e16:	4680      	mov	r8, r0
 8006e18:	6922      	ldr	r2, [r4, #16]
 8006e1a:	f104 010c 	add.w	r1, r4, #12
 8006e1e:	3202      	adds	r2, #2
 8006e20:	0092      	lsls	r2, r2, #2
 8006e22:	300c      	adds	r0, #12
 8006e24:	f7ff ff7c 	bl	8006d20 <memcpy>
 8006e28:	4621      	mov	r1, r4
 8006e2a:	4630      	mov	r0, r6
 8006e2c:	f7ff ffb7 	bl	8006d9e <_Bfree>
 8006e30:	4644      	mov	r4, r8
 8006e32:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006e36:	3501      	adds	r5, #1
 8006e38:	615f      	str	r7, [r3, #20]
 8006e3a:	6125      	str	r5, [r4, #16]
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006e42 <__s2b>:
 8006e42:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e46:	4615      	mov	r5, r2
 8006e48:	2209      	movs	r2, #9
 8006e4a:	461f      	mov	r7, r3
 8006e4c:	3308      	adds	r3, #8
 8006e4e:	460c      	mov	r4, r1
 8006e50:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e54:	4606      	mov	r6, r0
 8006e56:	2201      	movs	r2, #1
 8006e58:	2100      	movs	r1, #0
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	db20      	blt.n	8006ea0 <__s2b+0x5e>
 8006e5e:	4630      	mov	r0, r6
 8006e60:	f7ff ff69 	bl	8006d36 <_Balloc>
 8006e64:	9b08      	ldr	r3, [sp, #32]
 8006e66:	2d09      	cmp	r5, #9
 8006e68:	6143      	str	r3, [r0, #20]
 8006e6a:	f04f 0301 	mov.w	r3, #1
 8006e6e:	6103      	str	r3, [r0, #16]
 8006e70:	dd19      	ble.n	8006ea6 <__s2b+0x64>
 8006e72:	f104 0809 	add.w	r8, r4, #9
 8006e76:	46c1      	mov	r9, r8
 8006e78:	442c      	add	r4, r5
 8006e7a:	f819 3b01 	ldrb.w	r3, [r9], #1
 8006e7e:	4601      	mov	r1, r0
 8006e80:	3b30      	subs	r3, #48	; 0x30
 8006e82:	220a      	movs	r2, #10
 8006e84:	4630      	mov	r0, r6
 8006e86:	f7ff ffa1 	bl	8006dcc <__multadd>
 8006e8a:	45a1      	cmp	r9, r4
 8006e8c:	d1f5      	bne.n	8006e7a <__s2b+0x38>
 8006e8e:	eb08 0405 	add.w	r4, r8, r5
 8006e92:	3c08      	subs	r4, #8
 8006e94:	1b2d      	subs	r5, r5, r4
 8006e96:	1963      	adds	r3, r4, r5
 8006e98:	42bb      	cmp	r3, r7
 8006e9a:	db07      	blt.n	8006eac <__s2b+0x6a>
 8006e9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ea0:	0052      	lsls	r2, r2, #1
 8006ea2:	3101      	adds	r1, #1
 8006ea4:	e7d9      	b.n	8006e5a <__s2b+0x18>
 8006ea6:	340a      	adds	r4, #10
 8006ea8:	2509      	movs	r5, #9
 8006eaa:	e7f3      	b.n	8006e94 <__s2b+0x52>
 8006eac:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006eb0:	4601      	mov	r1, r0
 8006eb2:	3b30      	subs	r3, #48	; 0x30
 8006eb4:	220a      	movs	r2, #10
 8006eb6:	4630      	mov	r0, r6
 8006eb8:	f7ff ff88 	bl	8006dcc <__multadd>
 8006ebc:	e7eb      	b.n	8006e96 <__s2b+0x54>

08006ebe <__hi0bits>:
 8006ebe:	0c02      	lsrs	r2, r0, #16
 8006ec0:	0412      	lsls	r2, r2, #16
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	b9b2      	cbnz	r2, 8006ef4 <__hi0bits+0x36>
 8006ec6:	0403      	lsls	r3, r0, #16
 8006ec8:	2010      	movs	r0, #16
 8006eca:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006ece:	bf04      	itt	eq
 8006ed0:	021b      	lsleq	r3, r3, #8
 8006ed2:	3008      	addeq	r0, #8
 8006ed4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006ed8:	bf04      	itt	eq
 8006eda:	011b      	lsleq	r3, r3, #4
 8006edc:	3004      	addeq	r0, #4
 8006ede:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006ee2:	bf04      	itt	eq
 8006ee4:	009b      	lsleq	r3, r3, #2
 8006ee6:	3002      	addeq	r0, #2
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	db06      	blt.n	8006efa <__hi0bits+0x3c>
 8006eec:	005b      	lsls	r3, r3, #1
 8006eee:	d503      	bpl.n	8006ef8 <__hi0bits+0x3a>
 8006ef0:	3001      	adds	r0, #1
 8006ef2:	4770      	bx	lr
 8006ef4:	2000      	movs	r0, #0
 8006ef6:	e7e8      	b.n	8006eca <__hi0bits+0xc>
 8006ef8:	2020      	movs	r0, #32
 8006efa:	4770      	bx	lr

08006efc <__lo0bits>:
 8006efc:	6803      	ldr	r3, [r0, #0]
 8006efe:	4601      	mov	r1, r0
 8006f00:	f013 0207 	ands.w	r2, r3, #7
 8006f04:	d00b      	beq.n	8006f1e <__lo0bits+0x22>
 8006f06:	07da      	lsls	r2, r3, #31
 8006f08:	d423      	bmi.n	8006f52 <__lo0bits+0x56>
 8006f0a:	0798      	lsls	r0, r3, #30
 8006f0c:	bf49      	itett	mi
 8006f0e:	085b      	lsrmi	r3, r3, #1
 8006f10:	089b      	lsrpl	r3, r3, #2
 8006f12:	2001      	movmi	r0, #1
 8006f14:	600b      	strmi	r3, [r1, #0]
 8006f16:	bf5c      	itt	pl
 8006f18:	600b      	strpl	r3, [r1, #0]
 8006f1a:	2002      	movpl	r0, #2
 8006f1c:	4770      	bx	lr
 8006f1e:	b298      	uxth	r0, r3
 8006f20:	b9a8      	cbnz	r0, 8006f4e <__lo0bits+0x52>
 8006f22:	2010      	movs	r0, #16
 8006f24:	0c1b      	lsrs	r3, r3, #16
 8006f26:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006f2a:	bf04      	itt	eq
 8006f2c:	0a1b      	lsreq	r3, r3, #8
 8006f2e:	3008      	addeq	r0, #8
 8006f30:	071a      	lsls	r2, r3, #28
 8006f32:	bf04      	itt	eq
 8006f34:	091b      	lsreq	r3, r3, #4
 8006f36:	3004      	addeq	r0, #4
 8006f38:	079a      	lsls	r2, r3, #30
 8006f3a:	bf04      	itt	eq
 8006f3c:	089b      	lsreq	r3, r3, #2
 8006f3e:	3002      	addeq	r0, #2
 8006f40:	07da      	lsls	r2, r3, #31
 8006f42:	d402      	bmi.n	8006f4a <__lo0bits+0x4e>
 8006f44:	085b      	lsrs	r3, r3, #1
 8006f46:	d006      	beq.n	8006f56 <__lo0bits+0x5a>
 8006f48:	3001      	adds	r0, #1
 8006f4a:	600b      	str	r3, [r1, #0]
 8006f4c:	4770      	bx	lr
 8006f4e:	4610      	mov	r0, r2
 8006f50:	e7e9      	b.n	8006f26 <__lo0bits+0x2a>
 8006f52:	2000      	movs	r0, #0
 8006f54:	4770      	bx	lr
 8006f56:	2020      	movs	r0, #32
 8006f58:	4770      	bx	lr

08006f5a <__i2b>:
 8006f5a:	b510      	push	{r4, lr}
 8006f5c:	460c      	mov	r4, r1
 8006f5e:	2101      	movs	r1, #1
 8006f60:	f7ff fee9 	bl	8006d36 <_Balloc>
 8006f64:	2201      	movs	r2, #1
 8006f66:	6144      	str	r4, [r0, #20]
 8006f68:	6102      	str	r2, [r0, #16]
 8006f6a:	bd10      	pop	{r4, pc}

08006f6c <__multiply>:
 8006f6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f70:	4614      	mov	r4, r2
 8006f72:	690a      	ldr	r2, [r1, #16]
 8006f74:	6923      	ldr	r3, [r4, #16]
 8006f76:	4688      	mov	r8, r1
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	bfbe      	ittt	lt
 8006f7c:	460b      	movlt	r3, r1
 8006f7e:	46a0      	movlt	r8, r4
 8006f80:	461c      	movlt	r4, r3
 8006f82:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006f86:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006f8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006f8e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006f92:	eb07 0609 	add.w	r6, r7, r9
 8006f96:	42b3      	cmp	r3, r6
 8006f98:	bfb8      	it	lt
 8006f9a:	3101      	addlt	r1, #1
 8006f9c:	f7ff fecb 	bl	8006d36 <_Balloc>
 8006fa0:	f100 0514 	add.w	r5, r0, #20
 8006fa4:	462b      	mov	r3, r5
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006fac:	4573      	cmp	r3, lr
 8006fae:	d316      	bcc.n	8006fde <__multiply+0x72>
 8006fb0:	f104 0214 	add.w	r2, r4, #20
 8006fb4:	f108 0114 	add.w	r1, r8, #20
 8006fb8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006fbc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006fc0:	9300      	str	r3, [sp, #0]
 8006fc2:	9b00      	ldr	r3, [sp, #0]
 8006fc4:	9201      	str	r2, [sp, #4]
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d80c      	bhi.n	8006fe4 <__multiply+0x78>
 8006fca:	2e00      	cmp	r6, #0
 8006fcc:	dd03      	ble.n	8006fd6 <__multiply+0x6a>
 8006fce:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d05d      	beq.n	8007092 <__multiply+0x126>
 8006fd6:	6106      	str	r6, [r0, #16]
 8006fd8:	b003      	add	sp, #12
 8006fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fde:	f843 2b04 	str.w	r2, [r3], #4
 8006fe2:	e7e3      	b.n	8006fac <__multiply+0x40>
 8006fe4:	f8b2 b000 	ldrh.w	fp, [r2]
 8006fe8:	f1bb 0f00 	cmp.w	fp, #0
 8006fec:	d023      	beq.n	8007036 <__multiply+0xca>
 8006fee:	4689      	mov	r9, r1
 8006ff0:	46ac      	mov	ip, r5
 8006ff2:	f04f 0800 	mov.w	r8, #0
 8006ff6:	f859 4b04 	ldr.w	r4, [r9], #4
 8006ffa:	f8dc a000 	ldr.w	sl, [ip]
 8006ffe:	b2a3      	uxth	r3, r4
 8007000:	fa1f fa8a 	uxth.w	sl, sl
 8007004:	fb0b a303 	mla	r3, fp, r3, sl
 8007008:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800700c:	f8dc 4000 	ldr.w	r4, [ip]
 8007010:	4443      	add	r3, r8
 8007012:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007016:	fb0b 840a 	mla	r4, fp, sl, r8
 800701a:	46e2      	mov	sl, ip
 800701c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007020:	b29b      	uxth	r3, r3
 8007022:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007026:	454f      	cmp	r7, r9
 8007028:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800702c:	f84a 3b04 	str.w	r3, [sl], #4
 8007030:	d82b      	bhi.n	800708a <__multiply+0x11e>
 8007032:	f8cc 8004 	str.w	r8, [ip, #4]
 8007036:	9b01      	ldr	r3, [sp, #4]
 8007038:	3204      	adds	r2, #4
 800703a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800703e:	f1ba 0f00 	cmp.w	sl, #0
 8007042:	d020      	beq.n	8007086 <__multiply+0x11a>
 8007044:	4689      	mov	r9, r1
 8007046:	46a8      	mov	r8, r5
 8007048:	f04f 0b00 	mov.w	fp, #0
 800704c:	682b      	ldr	r3, [r5, #0]
 800704e:	f8b9 c000 	ldrh.w	ip, [r9]
 8007052:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007056:	b29b      	uxth	r3, r3
 8007058:	fb0a 440c 	mla	r4, sl, ip, r4
 800705c:	46c4      	mov	ip, r8
 800705e:	445c      	add	r4, fp
 8007060:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007064:	f84c 3b04 	str.w	r3, [ip], #4
 8007068:	f859 3b04 	ldr.w	r3, [r9], #4
 800706c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007070:	0c1b      	lsrs	r3, r3, #16
 8007072:	fb0a b303 	mla	r3, sl, r3, fp
 8007076:	454f      	cmp	r7, r9
 8007078:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800707c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007080:	d805      	bhi.n	800708e <__multiply+0x122>
 8007082:	f8c8 3004 	str.w	r3, [r8, #4]
 8007086:	3504      	adds	r5, #4
 8007088:	e79b      	b.n	8006fc2 <__multiply+0x56>
 800708a:	46d4      	mov	ip, sl
 800708c:	e7b3      	b.n	8006ff6 <__multiply+0x8a>
 800708e:	46e0      	mov	r8, ip
 8007090:	e7dd      	b.n	800704e <__multiply+0xe2>
 8007092:	3e01      	subs	r6, #1
 8007094:	e799      	b.n	8006fca <__multiply+0x5e>
	...

08007098 <__pow5mult>:
 8007098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800709c:	4615      	mov	r5, r2
 800709e:	f012 0203 	ands.w	r2, r2, #3
 80070a2:	4606      	mov	r6, r0
 80070a4:	460f      	mov	r7, r1
 80070a6:	d007      	beq.n	80070b8 <__pow5mult+0x20>
 80070a8:	4c21      	ldr	r4, [pc, #132]	; (8007130 <__pow5mult+0x98>)
 80070aa:	3a01      	subs	r2, #1
 80070ac:	2300      	movs	r3, #0
 80070ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80070b2:	f7ff fe8b 	bl	8006dcc <__multadd>
 80070b6:	4607      	mov	r7, r0
 80070b8:	10ad      	asrs	r5, r5, #2
 80070ba:	d035      	beq.n	8007128 <__pow5mult+0x90>
 80070bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80070be:	b93c      	cbnz	r4, 80070d0 <__pow5mult+0x38>
 80070c0:	2010      	movs	r0, #16
 80070c2:	f7ff fe05 	bl	8006cd0 <malloc>
 80070c6:	6270      	str	r0, [r6, #36]	; 0x24
 80070c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80070cc:	6004      	str	r4, [r0, #0]
 80070ce:	60c4      	str	r4, [r0, #12]
 80070d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80070d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80070d8:	b94c      	cbnz	r4, 80070ee <__pow5mult+0x56>
 80070da:	f240 2171 	movw	r1, #625	; 0x271
 80070de:	4630      	mov	r0, r6
 80070e0:	f7ff ff3b 	bl	8006f5a <__i2b>
 80070e4:	2300      	movs	r3, #0
 80070e6:	4604      	mov	r4, r0
 80070e8:	f8c8 0008 	str.w	r0, [r8, #8]
 80070ec:	6003      	str	r3, [r0, #0]
 80070ee:	f04f 0800 	mov.w	r8, #0
 80070f2:	07eb      	lsls	r3, r5, #31
 80070f4:	d50a      	bpl.n	800710c <__pow5mult+0x74>
 80070f6:	4639      	mov	r1, r7
 80070f8:	4622      	mov	r2, r4
 80070fa:	4630      	mov	r0, r6
 80070fc:	f7ff ff36 	bl	8006f6c <__multiply>
 8007100:	4681      	mov	r9, r0
 8007102:	4639      	mov	r1, r7
 8007104:	4630      	mov	r0, r6
 8007106:	f7ff fe4a 	bl	8006d9e <_Bfree>
 800710a:	464f      	mov	r7, r9
 800710c:	106d      	asrs	r5, r5, #1
 800710e:	d00b      	beq.n	8007128 <__pow5mult+0x90>
 8007110:	6820      	ldr	r0, [r4, #0]
 8007112:	b938      	cbnz	r0, 8007124 <__pow5mult+0x8c>
 8007114:	4622      	mov	r2, r4
 8007116:	4621      	mov	r1, r4
 8007118:	4630      	mov	r0, r6
 800711a:	f7ff ff27 	bl	8006f6c <__multiply>
 800711e:	6020      	str	r0, [r4, #0]
 8007120:	f8c0 8000 	str.w	r8, [r0]
 8007124:	4604      	mov	r4, r0
 8007126:	e7e4      	b.n	80070f2 <__pow5mult+0x5a>
 8007128:	4638      	mov	r0, r7
 800712a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800712e:	bf00      	nop
 8007130:	08007c00 	.word	0x08007c00

08007134 <__lshift>:
 8007134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007138:	460c      	mov	r4, r1
 800713a:	4607      	mov	r7, r0
 800713c:	4616      	mov	r6, r2
 800713e:	6923      	ldr	r3, [r4, #16]
 8007140:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007144:	eb0a 0903 	add.w	r9, sl, r3
 8007148:	6849      	ldr	r1, [r1, #4]
 800714a:	68a3      	ldr	r3, [r4, #8]
 800714c:	f109 0501 	add.w	r5, r9, #1
 8007150:	42ab      	cmp	r3, r5
 8007152:	db32      	blt.n	80071ba <__lshift+0x86>
 8007154:	4638      	mov	r0, r7
 8007156:	f7ff fdee 	bl	8006d36 <_Balloc>
 800715a:	2300      	movs	r3, #0
 800715c:	4680      	mov	r8, r0
 800715e:	461a      	mov	r2, r3
 8007160:	f100 0114 	add.w	r1, r0, #20
 8007164:	4553      	cmp	r3, sl
 8007166:	db2b      	blt.n	80071c0 <__lshift+0x8c>
 8007168:	6920      	ldr	r0, [r4, #16]
 800716a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800716e:	f104 0314 	add.w	r3, r4, #20
 8007172:	f016 021f 	ands.w	r2, r6, #31
 8007176:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800717a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800717e:	d025      	beq.n	80071cc <__lshift+0x98>
 8007180:	2000      	movs	r0, #0
 8007182:	f1c2 0e20 	rsb	lr, r2, #32
 8007186:	468a      	mov	sl, r1
 8007188:	681e      	ldr	r6, [r3, #0]
 800718a:	4096      	lsls	r6, r2
 800718c:	4330      	orrs	r0, r6
 800718e:	f84a 0b04 	str.w	r0, [sl], #4
 8007192:	f853 0b04 	ldr.w	r0, [r3], #4
 8007196:	459c      	cmp	ip, r3
 8007198:	fa20 f00e 	lsr.w	r0, r0, lr
 800719c:	d814      	bhi.n	80071c8 <__lshift+0x94>
 800719e:	6048      	str	r0, [r1, #4]
 80071a0:	b108      	cbz	r0, 80071a6 <__lshift+0x72>
 80071a2:	f109 0502 	add.w	r5, r9, #2
 80071a6:	3d01      	subs	r5, #1
 80071a8:	4638      	mov	r0, r7
 80071aa:	f8c8 5010 	str.w	r5, [r8, #16]
 80071ae:	4621      	mov	r1, r4
 80071b0:	f7ff fdf5 	bl	8006d9e <_Bfree>
 80071b4:	4640      	mov	r0, r8
 80071b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ba:	3101      	adds	r1, #1
 80071bc:	005b      	lsls	r3, r3, #1
 80071be:	e7c7      	b.n	8007150 <__lshift+0x1c>
 80071c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80071c4:	3301      	adds	r3, #1
 80071c6:	e7cd      	b.n	8007164 <__lshift+0x30>
 80071c8:	4651      	mov	r1, sl
 80071ca:	e7dc      	b.n	8007186 <__lshift+0x52>
 80071cc:	3904      	subs	r1, #4
 80071ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80071d2:	459c      	cmp	ip, r3
 80071d4:	f841 2f04 	str.w	r2, [r1, #4]!
 80071d8:	d8f9      	bhi.n	80071ce <__lshift+0x9a>
 80071da:	e7e4      	b.n	80071a6 <__lshift+0x72>

080071dc <__mcmp>:
 80071dc:	6903      	ldr	r3, [r0, #16]
 80071de:	690a      	ldr	r2, [r1, #16]
 80071e0:	b530      	push	{r4, r5, lr}
 80071e2:	1a9b      	subs	r3, r3, r2
 80071e4:	d10c      	bne.n	8007200 <__mcmp+0x24>
 80071e6:	0092      	lsls	r2, r2, #2
 80071e8:	3014      	adds	r0, #20
 80071ea:	3114      	adds	r1, #20
 80071ec:	1884      	adds	r4, r0, r2
 80071ee:	4411      	add	r1, r2
 80071f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80071f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80071f8:	4295      	cmp	r5, r2
 80071fa:	d003      	beq.n	8007204 <__mcmp+0x28>
 80071fc:	d305      	bcc.n	800720a <__mcmp+0x2e>
 80071fe:	2301      	movs	r3, #1
 8007200:	4618      	mov	r0, r3
 8007202:	bd30      	pop	{r4, r5, pc}
 8007204:	42a0      	cmp	r0, r4
 8007206:	d3f3      	bcc.n	80071f0 <__mcmp+0x14>
 8007208:	e7fa      	b.n	8007200 <__mcmp+0x24>
 800720a:	f04f 33ff 	mov.w	r3, #4294967295
 800720e:	e7f7      	b.n	8007200 <__mcmp+0x24>

08007210 <__mdiff>:
 8007210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007214:	460d      	mov	r5, r1
 8007216:	4607      	mov	r7, r0
 8007218:	4611      	mov	r1, r2
 800721a:	4628      	mov	r0, r5
 800721c:	4614      	mov	r4, r2
 800721e:	f7ff ffdd 	bl	80071dc <__mcmp>
 8007222:	1e06      	subs	r6, r0, #0
 8007224:	d108      	bne.n	8007238 <__mdiff+0x28>
 8007226:	4631      	mov	r1, r6
 8007228:	4638      	mov	r0, r7
 800722a:	f7ff fd84 	bl	8006d36 <_Balloc>
 800722e:	2301      	movs	r3, #1
 8007230:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007238:	bfa4      	itt	ge
 800723a:	4623      	movge	r3, r4
 800723c:	462c      	movge	r4, r5
 800723e:	4638      	mov	r0, r7
 8007240:	6861      	ldr	r1, [r4, #4]
 8007242:	bfa6      	itte	ge
 8007244:	461d      	movge	r5, r3
 8007246:	2600      	movge	r6, #0
 8007248:	2601      	movlt	r6, #1
 800724a:	f7ff fd74 	bl	8006d36 <_Balloc>
 800724e:	f04f 0e00 	mov.w	lr, #0
 8007252:	60c6      	str	r6, [r0, #12]
 8007254:	692b      	ldr	r3, [r5, #16]
 8007256:	6926      	ldr	r6, [r4, #16]
 8007258:	f104 0214 	add.w	r2, r4, #20
 800725c:	f105 0914 	add.w	r9, r5, #20
 8007260:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007264:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007268:	f100 0114 	add.w	r1, r0, #20
 800726c:	f852 ab04 	ldr.w	sl, [r2], #4
 8007270:	f859 5b04 	ldr.w	r5, [r9], #4
 8007274:	fa1f f38a 	uxth.w	r3, sl
 8007278:	4473      	add	r3, lr
 800727a:	b2ac      	uxth	r4, r5
 800727c:	1b1b      	subs	r3, r3, r4
 800727e:	0c2c      	lsrs	r4, r5, #16
 8007280:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8007284:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8007288:	b29b      	uxth	r3, r3
 800728a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800728e:	45c8      	cmp	r8, r9
 8007290:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007294:	4694      	mov	ip, r2
 8007296:	f841 4b04 	str.w	r4, [r1], #4
 800729a:	d8e7      	bhi.n	800726c <__mdiff+0x5c>
 800729c:	45bc      	cmp	ip, r7
 800729e:	d304      	bcc.n	80072aa <__mdiff+0x9a>
 80072a0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80072a4:	b183      	cbz	r3, 80072c8 <__mdiff+0xb8>
 80072a6:	6106      	str	r6, [r0, #16]
 80072a8:	e7c4      	b.n	8007234 <__mdiff+0x24>
 80072aa:	f85c 4b04 	ldr.w	r4, [ip], #4
 80072ae:	b2a2      	uxth	r2, r4
 80072b0:	4472      	add	r2, lr
 80072b2:	1413      	asrs	r3, r2, #16
 80072b4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80072b8:	b292      	uxth	r2, r2
 80072ba:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80072be:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80072c2:	f841 2b04 	str.w	r2, [r1], #4
 80072c6:	e7e9      	b.n	800729c <__mdiff+0x8c>
 80072c8:	3e01      	subs	r6, #1
 80072ca:	e7e9      	b.n	80072a0 <__mdiff+0x90>

080072cc <__ulp>:
 80072cc:	4b10      	ldr	r3, [pc, #64]	; (8007310 <__ulp+0x44>)
 80072ce:	400b      	ands	r3, r1
 80072d0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	dd02      	ble.n	80072de <__ulp+0x12>
 80072d8:	2000      	movs	r0, #0
 80072da:	4619      	mov	r1, r3
 80072dc:	4770      	bx	lr
 80072de:	425b      	negs	r3, r3
 80072e0:	151b      	asrs	r3, r3, #20
 80072e2:	2b13      	cmp	r3, #19
 80072e4:	f04f 0000 	mov.w	r0, #0
 80072e8:	f04f 0100 	mov.w	r1, #0
 80072ec:	dc04      	bgt.n	80072f8 <__ulp+0x2c>
 80072ee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80072f2:	fa42 f103 	asr.w	r1, r2, r3
 80072f6:	4770      	bx	lr
 80072f8:	2201      	movs	r2, #1
 80072fa:	3b14      	subs	r3, #20
 80072fc:	2b1e      	cmp	r3, #30
 80072fe:	bfce      	itee	gt
 8007300:	4613      	movgt	r3, r2
 8007302:	f1c3 031f 	rsble	r3, r3, #31
 8007306:	fa02 f303 	lslle.w	r3, r2, r3
 800730a:	4618      	mov	r0, r3
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	7ff00000 	.word	0x7ff00000

08007314 <__b2d>:
 8007314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007318:	6907      	ldr	r7, [r0, #16]
 800731a:	f100 0914 	add.w	r9, r0, #20
 800731e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007322:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8007326:	f1a7 0804 	sub.w	r8, r7, #4
 800732a:	4630      	mov	r0, r6
 800732c:	f7ff fdc7 	bl	8006ebe <__hi0bits>
 8007330:	f1c0 0320 	rsb	r3, r0, #32
 8007334:	280a      	cmp	r0, #10
 8007336:	600b      	str	r3, [r1, #0]
 8007338:	491e      	ldr	r1, [pc, #120]	; (80073b4 <__b2d+0xa0>)
 800733a:	dc17      	bgt.n	800736c <__b2d+0x58>
 800733c:	45c1      	cmp	r9, r8
 800733e:	bf28      	it	cs
 8007340:	2200      	movcs	r2, #0
 8007342:	f1c0 0c0b 	rsb	ip, r0, #11
 8007346:	fa26 f30c 	lsr.w	r3, r6, ip
 800734a:	bf38      	it	cc
 800734c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007350:	ea43 0501 	orr.w	r5, r3, r1
 8007354:	f100 0315 	add.w	r3, r0, #21
 8007358:	fa06 f303 	lsl.w	r3, r6, r3
 800735c:	fa22 f20c 	lsr.w	r2, r2, ip
 8007360:	ea43 0402 	orr.w	r4, r3, r2
 8007364:	4620      	mov	r0, r4
 8007366:	4629      	mov	r1, r5
 8007368:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800736c:	45c1      	cmp	r9, r8
 800736e:	bf3a      	itte	cc
 8007370:	f1a7 0808 	subcc.w	r8, r7, #8
 8007374:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007378:	2200      	movcs	r2, #0
 800737a:	f1b0 030b 	subs.w	r3, r0, #11
 800737e:	d015      	beq.n	80073ac <__b2d+0x98>
 8007380:	409e      	lsls	r6, r3
 8007382:	f1c3 0720 	rsb	r7, r3, #32
 8007386:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800738a:	fa22 f107 	lsr.w	r1, r2, r7
 800738e:	45c8      	cmp	r8, r9
 8007390:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8007394:	ea46 0501 	orr.w	r5, r6, r1
 8007398:	bf94      	ite	ls
 800739a:	2100      	movls	r1, #0
 800739c:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80073a0:	fa02 f003 	lsl.w	r0, r2, r3
 80073a4:	40f9      	lsrs	r1, r7
 80073a6:	ea40 0401 	orr.w	r4, r0, r1
 80073aa:	e7db      	b.n	8007364 <__b2d+0x50>
 80073ac:	ea46 0501 	orr.w	r5, r6, r1
 80073b0:	4614      	mov	r4, r2
 80073b2:	e7d7      	b.n	8007364 <__b2d+0x50>
 80073b4:	3ff00000 	.word	0x3ff00000

080073b8 <__d2b>:
 80073b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80073bc:	461c      	mov	r4, r3
 80073be:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80073c2:	2101      	movs	r1, #1
 80073c4:	4690      	mov	r8, r2
 80073c6:	f7ff fcb6 	bl	8006d36 <_Balloc>
 80073ca:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80073ce:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80073d2:	4607      	mov	r7, r0
 80073d4:	bb34      	cbnz	r4, 8007424 <__d2b+0x6c>
 80073d6:	9201      	str	r2, [sp, #4]
 80073d8:	f1b8 0200 	subs.w	r2, r8, #0
 80073dc:	d027      	beq.n	800742e <__d2b+0x76>
 80073de:	a802      	add	r0, sp, #8
 80073e0:	f840 2d08 	str.w	r2, [r0, #-8]!
 80073e4:	f7ff fd8a 	bl	8006efc <__lo0bits>
 80073e8:	9900      	ldr	r1, [sp, #0]
 80073ea:	b1f0      	cbz	r0, 800742a <__d2b+0x72>
 80073ec:	9a01      	ldr	r2, [sp, #4]
 80073ee:	f1c0 0320 	rsb	r3, r0, #32
 80073f2:	fa02 f303 	lsl.w	r3, r2, r3
 80073f6:	430b      	orrs	r3, r1
 80073f8:	40c2      	lsrs	r2, r0
 80073fa:	617b      	str	r3, [r7, #20]
 80073fc:	9201      	str	r2, [sp, #4]
 80073fe:	9b01      	ldr	r3, [sp, #4]
 8007400:	2b00      	cmp	r3, #0
 8007402:	bf14      	ite	ne
 8007404:	2102      	movne	r1, #2
 8007406:	2101      	moveq	r1, #1
 8007408:	61bb      	str	r3, [r7, #24]
 800740a:	6139      	str	r1, [r7, #16]
 800740c:	b1c4      	cbz	r4, 8007440 <__d2b+0x88>
 800740e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007412:	4404      	add	r4, r0
 8007414:	6034      	str	r4, [r6, #0]
 8007416:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800741a:	6028      	str	r0, [r5, #0]
 800741c:	4638      	mov	r0, r7
 800741e:	b002      	add	sp, #8
 8007420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007424:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007428:	e7d5      	b.n	80073d6 <__d2b+0x1e>
 800742a:	6179      	str	r1, [r7, #20]
 800742c:	e7e7      	b.n	80073fe <__d2b+0x46>
 800742e:	a801      	add	r0, sp, #4
 8007430:	f7ff fd64 	bl	8006efc <__lo0bits>
 8007434:	2101      	movs	r1, #1
 8007436:	9b01      	ldr	r3, [sp, #4]
 8007438:	6139      	str	r1, [r7, #16]
 800743a:	617b      	str	r3, [r7, #20]
 800743c:	3020      	adds	r0, #32
 800743e:	e7e5      	b.n	800740c <__d2b+0x54>
 8007440:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007444:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007448:	6030      	str	r0, [r6, #0]
 800744a:	6918      	ldr	r0, [r3, #16]
 800744c:	f7ff fd37 	bl	8006ebe <__hi0bits>
 8007450:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007454:	e7e1      	b.n	800741a <__d2b+0x62>

08007456 <__ratio>:
 8007456:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800745a:	4688      	mov	r8, r1
 800745c:	4669      	mov	r1, sp
 800745e:	4681      	mov	r9, r0
 8007460:	f7ff ff58 	bl	8007314 <__b2d>
 8007464:	468b      	mov	fp, r1
 8007466:	4606      	mov	r6, r0
 8007468:	460f      	mov	r7, r1
 800746a:	4640      	mov	r0, r8
 800746c:	a901      	add	r1, sp, #4
 800746e:	f7ff ff51 	bl	8007314 <__b2d>
 8007472:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007476:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800747a:	460d      	mov	r5, r1
 800747c:	eba3 0c02 	sub.w	ip, r3, r2
 8007480:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007484:	1a9b      	subs	r3, r3, r2
 8007486:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800748a:	2b00      	cmp	r3, #0
 800748c:	bfd5      	itete	le
 800748e:	460a      	movle	r2, r1
 8007490:	463a      	movgt	r2, r7
 8007492:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007496:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800749a:	bfd8      	it	le
 800749c:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 80074a0:	462b      	mov	r3, r5
 80074a2:	4602      	mov	r2, r0
 80074a4:	4659      	mov	r1, fp
 80074a6:	4630      	mov	r0, r6
 80074a8:	f7f9 f9ac 	bl	8000804 <__aeabi_ddiv>
 80074ac:	b003      	add	sp, #12
 80074ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080074b2 <__copybits>:
 80074b2:	3901      	subs	r1, #1
 80074b4:	b510      	push	{r4, lr}
 80074b6:	1149      	asrs	r1, r1, #5
 80074b8:	6914      	ldr	r4, [r2, #16]
 80074ba:	3101      	adds	r1, #1
 80074bc:	f102 0314 	add.w	r3, r2, #20
 80074c0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80074c4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80074c8:	42a3      	cmp	r3, r4
 80074ca:	4602      	mov	r2, r0
 80074cc:	d303      	bcc.n	80074d6 <__copybits+0x24>
 80074ce:	2300      	movs	r3, #0
 80074d0:	428a      	cmp	r2, r1
 80074d2:	d305      	bcc.n	80074e0 <__copybits+0x2e>
 80074d4:	bd10      	pop	{r4, pc}
 80074d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80074da:	f840 2b04 	str.w	r2, [r0], #4
 80074de:	e7f3      	b.n	80074c8 <__copybits+0x16>
 80074e0:	f842 3b04 	str.w	r3, [r2], #4
 80074e4:	e7f4      	b.n	80074d0 <__copybits+0x1e>

080074e6 <__any_on>:
 80074e6:	f100 0214 	add.w	r2, r0, #20
 80074ea:	6900      	ldr	r0, [r0, #16]
 80074ec:	114b      	asrs	r3, r1, #5
 80074ee:	4298      	cmp	r0, r3
 80074f0:	b510      	push	{r4, lr}
 80074f2:	db11      	blt.n	8007518 <__any_on+0x32>
 80074f4:	dd0a      	ble.n	800750c <__any_on+0x26>
 80074f6:	f011 011f 	ands.w	r1, r1, #31
 80074fa:	d007      	beq.n	800750c <__any_on+0x26>
 80074fc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007500:	fa24 f001 	lsr.w	r0, r4, r1
 8007504:	fa00 f101 	lsl.w	r1, r0, r1
 8007508:	428c      	cmp	r4, r1
 800750a:	d10b      	bne.n	8007524 <__any_on+0x3e>
 800750c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007510:	4293      	cmp	r3, r2
 8007512:	d803      	bhi.n	800751c <__any_on+0x36>
 8007514:	2000      	movs	r0, #0
 8007516:	bd10      	pop	{r4, pc}
 8007518:	4603      	mov	r3, r0
 800751a:	e7f7      	b.n	800750c <__any_on+0x26>
 800751c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007520:	2900      	cmp	r1, #0
 8007522:	d0f5      	beq.n	8007510 <__any_on+0x2a>
 8007524:	2001      	movs	r0, #1
 8007526:	e7f6      	b.n	8007516 <__any_on+0x30>

08007528 <_calloc_r>:
 8007528:	b538      	push	{r3, r4, r5, lr}
 800752a:	fb02 f401 	mul.w	r4, r2, r1
 800752e:	4621      	mov	r1, r4
 8007530:	f000 f854 	bl	80075dc <_malloc_r>
 8007534:	4605      	mov	r5, r0
 8007536:	b118      	cbz	r0, 8007540 <_calloc_r+0x18>
 8007538:	4622      	mov	r2, r4
 800753a:	2100      	movs	r1, #0
 800753c:	f7fc fd2e 	bl	8003f9c <memset>
 8007540:	4628      	mov	r0, r5
 8007542:	bd38      	pop	{r3, r4, r5, pc}

08007544 <_free_r>:
 8007544:	b538      	push	{r3, r4, r5, lr}
 8007546:	4605      	mov	r5, r0
 8007548:	2900      	cmp	r1, #0
 800754a:	d043      	beq.n	80075d4 <_free_r+0x90>
 800754c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007550:	1f0c      	subs	r4, r1, #4
 8007552:	2b00      	cmp	r3, #0
 8007554:	bfb8      	it	lt
 8007556:	18e4      	addlt	r4, r4, r3
 8007558:	f000 fa34 	bl	80079c4 <__malloc_lock>
 800755c:	4a1e      	ldr	r2, [pc, #120]	; (80075d8 <_free_r+0x94>)
 800755e:	6813      	ldr	r3, [r2, #0]
 8007560:	4610      	mov	r0, r2
 8007562:	b933      	cbnz	r3, 8007572 <_free_r+0x2e>
 8007564:	6063      	str	r3, [r4, #4]
 8007566:	6014      	str	r4, [r2, #0]
 8007568:	4628      	mov	r0, r5
 800756a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800756e:	f000 ba2a 	b.w	80079c6 <__malloc_unlock>
 8007572:	42a3      	cmp	r3, r4
 8007574:	d90b      	bls.n	800758e <_free_r+0x4a>
 8007576:	6821      	ldr	r1, [r4, #0]
 8007578:	1862      	adds	r2, r4, r1
 800757a:	4293      	cmp	r3, r2
 800757c:	bf01      	itttt	eq
 800757e:	681a      	ldreq	r2, [r3, #0]
 8007580:	685b      	ldreq	r3, [r3, #4]
 8007582:	1852      	addeq	r2, r2, r1
 8007584:	6022      	streq	r2, [r4, #0]
 8007586:	6063      	str	r3, [r4, #4]
 8007588:	6004      	str	r4, [r0, #0]
 800758a:	e7ed      	b.n	8007568 <_free_r+0x24>
 800758c:	4613      	mov	r3, r2
 800758e:	685a      	ldr	r2, [r3, #4]
 8007590:	b10a      	cbz	r2, 8007596 <_free_r+0x52>
 8007592:	42a2      	cmp	r2, r4
 8007594:	d9fa      	bls.n	800758c <_free_r+0x48>
 8007596:	6819      	ldr	r1, [r3, #0]
 8007598:	1858      	adds	r0, r3, r1
 800759a:	42a0      	cmp	r0, r4
 800759c:	d10b      	bne.n	80075b6 <_free_r+0x72>
 800759e:	6820      	ldr	r0, [r4, #0]
 80075a0:	4401      	add	r1, r0
 80075a2:	1858      	adds	r0, r3, r1
 80075a4:	4282      	cmp	r2, r0
 80075a6:	6019      	str	r1, [r3, #0]
 80075a8:	d1de      	bne.n	8007568 <_free_r+0x24>
 80075aa:	6810      	ldr	r0, [r2, #0]
 80075ac:	6852      	ldr	r2, [r2, #4]
 80075ae:	4401      	add	r1, r0
 80075b0:	6019      	str	r1, [r3, #0]
 80075b2:	605a      	str	r2, [r3, #4]
 80075b4:	e7d8      	b.n	8007568 <_free_r+0x24>
 80075b6:	d902      	bls.n	80075be <_free_r+0x7a>
 80075b8:	230c      	movs	r3, #12
 80075ba:	602b      	str	r3, [r5, #0]
 80075bc:	e7d4      	b.n	8007568 <_free_r+0x24>
 80075be:	6820      	ldr	r0, [r4, #0]
 80075c0:	1821      	adds	r1, r4, r0
 80075c2:	428a      	cmp	r2, r1
 80075c4:	bf01      	itttt	eq
 80075c6:	6811      	ldreq	r1, [r2, #0]
 80075c8:	6852      	ldreq	r2, [r2, #4]
 80075ca:	1809      	addeq	r1, r1, r0
 80075cc:	6021      	streq	r1, [r4, #0]
 80075ce:	6062      	str	r2, [r4, #4]
 80075d0:	605c      	str	r4, [r3, #4]
 80075d2:	e7c9      	b.n	8007568 <_free_r+0x24>
 80075d4:	bd38      	pop	{r3, r4, r5, pc}
 80075d6:	bf00      	nop
 80075d8:	20000214 	.word	0x20000214

080075dc <_malloc_r>:
 80075dc:	b570      	push	{r4, r5, r6, lr}
 80075de:	1ccd      	adds	r5, r1, #3
 80075e0:	f025 0503 	bic.w	r5, r5, #3
 80075e4:	3508      	adds	r5, #8
 80075e6:	2d0c      	cmp	r5, #12
 80075e8:	bf38      	it	cc
 80075ea:	250c      	movcc	r5, #12
 80075ec:	2d00      	cmp	r5, #0
 80075ee:	4606      	mov	r6, r0
 80075f0:	db01      	blt.n	80075f6 <_malloc_r+0x1a>
 80075f2:	42a9      	cmp	r1, r5
 80075f4:	d903      	bls.n	80075fe <_malloc_r+0x22>
 80075f6:	230c      	movs	r3, #12
 80075f8:	6033      	str	r3, [r6, #0]
 80075fa:	2000      	movs	r0, #0
 80075fc:	bd70      	pop	{r4, r5, r6, pc}
 80075fe:	f000 f9e1 	bl	80079c4 <__malloc_lock>
 8007602:	4a21      	ldr	r2, [pc, #132]	; (8007688 <_malloc_r+0xac>)
 8007604:	6814      	ldr	r4, [r2, #0]
 8007606:	4621      	mov	r1, r4
 8007608:	b991      	cbnz	r1, 8007630 <_malloc_r+0x54>
 800760a:	4c20      	ldr	r4, [pc, #128]	; (800768c <_malloc_r+0xb0>)
 800760c:	6823      	ldr	r3, [r4, #0]
 800760e:	b91b      	cbnz	r3, 8007618 <_malloc_r+0x3c>
 8007610:	4630      	mov	r0, r6
 8007612:	f000 f98f 	bl	8007934 <_sbrk_r>
 8007616:	6020      	str	r0, [r4, #0]
 8007618:	4629      	mov	r1, r5
 800761a:	4630      	mov	r0, r6
 800761c:	f000 f98a 	bl	8007934 <_sbrk_r>
 8007620:	1c43      	adds	r3, r0, #1
 8007622:	d124      	bne.n	800766e <_malloc_r+0x92>
 8007624:	230c      	movs	r3, #12
 8007626:	4630      	mov	r0, r6
 8007628:	6033      	str	r3, [r6, #0]
 800762a:	f000 f9cc 	bl	80079c6 <__malloc_unlock>
 800762e:	e7e4      	b.n	80075fa <_malloc_r+0x1e>
 8007630:	680b      	ldr	r3, [r1, #0]
 8007632:	1b5b      	subs	r3, r3, r5
 8007634:	d418      	bmi.n	8007668 <_malloc_r+0x8c>
 8007636:	2b0b      	cmp	r3, #11
 8007638:	d90f      	bls.n	800765a <_malloc_r+0x7e>
 800763a:	600b      	str	r3, [r1, #0]
 800763c:	18cc      	adds	r4, r1, r3
 800763e:	50cd      	str	r5, [r1, r3]
 8007640:	4630      	mov	r0, r6
 8007642:	f000 f9c0 	bl	80079c6 <__malloc_unlock>
 8007646:	f104 000b 	add.w	r0, r4, #11
 800764a:	1d23      	adds	r3, r4, #4
 800764c:	f020 0007 	bic.w	r0, r0, #7
 8007650:	1ac3      	subs	r3, r0, r3
 8007652:	d0d3      	beq.n	80075fc <_malloc_r+0x20>
 8007654:	425a      	negs	r2, r3
 8007656:	50e2      	str	r2, [r4, r3]
 8007658:	e7d0      	b.n	80075fc <_malloc_r+0x20>
 800765a:	684b      	ldr	r3, [r1, #4]
 800765c:	428c      	cmp	r4, r1
 800765e:	bf16      	itet	ne
 8007660:	6063      	strne	r3, [r4, #4]
 8007662:	6013      	streq	r3, [r2, #0]
 8007664:	460c      	movne	r4, r1
 8007666:	e7eb      	b.n	8007640 <_malloc_r+0x64>
 8007668:	460c      	mov	r4, r1
 800766a:	6849      	ldr	r1, [r1, #4]
 800766c:	e7cc      	b.n	8007608 <_malloc_r+0x2c>
 800766e:	1cc4      	adds	r4, r0, #3
 8007670:	f024 0403 	bic.w	r4, r4, #3
 8007674:	42a0      	cmp	r0, r4
 8007676:	d005      	beq.n	8007684 <_malloc_r+0xa8>
 8007678:	1a21      	subs	r1, r4, r0
 800767a:	4630      	mov	r0, r6
 800767c:	f000 f95a 	bl	8007934 <_sbrk_r>
 8007680:	3001      	adds	r0, #1
 8007682:	d0cf      	beq.n	8007624 <_malloc_r+0x48>
 8007684:	6025      	str	r5, [r4, #0]
 8007686:	e7db      	b.n	8007640 <_malloc_r+0x64>
 8007688:	20000214 	.word	0x20000214
 800768c:	20000218 	.word	0x20000218

08007690 <__ssputs_r>:
 8007690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007694:	688e      	ldr	r6, [r1, #8]
 8007696:	4682      	mov	sl, r0
 8007698:	429e      	cmp	r6, r3
 800769a:	460c      	mov	r4, r1
 800769c:	4690      	mov	r8, r2
 800769e:	4699      	mov	r9, r3
 80076a0:	d837      	bhi.n	8007712 <__ssputs_r+0x82>
 80076a2:	898a      	ldrh	r2, [r1, #12]
 80076a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80076a8:	d031      	beq.n	800770e <__ssputs_r+0x7e>
 80076aa:	2302      	movs	r3, #2
 80076ac:	6825      	ldr	r5, [r4, #0]
 80076ae:	6909      	ldr	r1, [r1, #16]
 80076b0:	1a6f      	subs	r7, r5, r1
 80076b2:	6965      	ldr	r5, [r4, #20]
 80076b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80076b8:	fb95 f5f3 	sdiv	r5, r5, r3
 80076bc:	f109 0301 	add.w	r3, r9, #1
 80076c0:	443b      	add	r3, r7
 80076c2:	429d      	cmp	r5, r3
 80076c4:	bf38      	it	cc
 80076c6:	461d      	movcc	r5, r3
 80076c8:	0553      	lsls	r3, r2, #21
 80076ca:	d530      	bpl.n	800772e <__ssputs_r+0x9e>
 80076cc:	4629      	mov	r1, r5
 80076ce:	f7ff ff85 	bl	80075dc <_malloc_r>
 80076d2:	4606      	mov	r6, r0
 80076d4:	b950      	cbnz	r0, 80076ec <__ssputs_r+0x5c>
 80076d6:	230c      	movs	r3, #12
 80076d8:	f04f 30ff 	mov.w	r0, #4294967295
 80076dc:	f8ca 3000 	str.w	r3, [sl]
 80076e0:	89a3      	ldrh	r3, [r4, #12]
 80076e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076e6:	81a3      	strh	r3, [r4, #12]
 80076e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ec:	463a      	mov	r2, r7
 80076ee:	6921      	ldr	r1, [r4, #16]
 80076f0:	f7ff fb16 	bl	8006d20 <memcpy>
 80076f4:	89a3      	ldrh	r3, [r4, #12]
 80076f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80076fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076fe:	81a3      	strh	r3, [r4, #12]
 8007700:	6126      	str	r6, [r4, #16]
 8007702:	443e      	add	r6, r7
 8007704:	6026      	str	r6, [r4, #0]
 8007706:	464e      	mov	r6, r9
 8007708:	6165      	str	r5, [r4, #20]
 800770a:	1bed      	subs	r5, r5, r7
 800770c:	60a5      	str	r5, [r4, #8]
 800770e:	454e      	cmp	r6, r9
 8007710:	d900      	bls.n	8007714 <__ssputs_r+0x84>
 8007712:	464e      	mov	r6, r9
 8007714:	4632      	mov	r2, r6
 8007716:	4641      	mov	r1, r8
 8007718:	6820      	ldr	r0, [r4, #0]
 800771a:	f000 f93a 	bl	8007992 <memmove>
 800771e:	68a3      	ldr	r3, [r4, #8]
 8007720:	2000      	movs	r0, #0
 8007722:	1b9b      	subs	r3, r3, r6
 8007724:	60a3      	str	r3, [r4, #8]
 8007726:	6823      	ldr	r3, [r4, #0]
 8007728:	441e      	add	r6, r3
 800772a:	6026      	str	r6, [r4, #0]
 800772c:	e7dc      	b.n	80076e8 <__ssputs_r+0x58>
 800772e:	462a      	mov	r2, r5
 8007730:	f000 f94a 	bl	80079c8 <_realloc_r>
 8007734:	4606      	mov	r6, r0
 8007736:	2800      	cmp	r0, #0
 8007738:	d1e2      	bne.n	8007700 <__ssputs_r+0x70>
 800773a:	6921      	ldr	r1, [r4, #16]
 800773c:	4650      	mov	r0, sl
 800773e:	f7ff ff01 	bl	8007544 <_free_r>
 8007742:	e7c8      	b.n	80076d6 <__ssputs_r+0x46>

08007744 <_svfiprintf_r>:
 8007744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007748:	461d      	mov	r5, r3
 800774a:	898b      	ldrh	r3, [r1, #12]
 800774c:	b09d      	sub	sp, #116	; 0x74
 800774e:	061f      	lsls	r7, r3, #24
 8007750:	4680      	mov	r8, r0
 8007752:	460c      	mov	r4, r1
 8007754:	4616      	mov	r6, r2
 8007756:	d50f      	bpl.n	8007778 <_svfiprintf_r+0x34>
 8007758:	690b      	ldr	r3, [r1, #16]
 800775a:	b96b      	cbnz	r3, 8007778 <_svfiprintf_r+0x34>
 800775c:	2140      	movs	r1, #64	; 0x40
 800775e:	f7ff ff3d 	bl	80075dc <_malloc_r>
 8007762:	6020      	str	r0, [r4, #0]
 8007764:	6120      	str	r0, [r4, #16]
 8007766:	b928      	cbnz	r0, 8007774 <_svfiprintf_r+0x30>
 8007768:	230c      	movs	r3, #12
 800776a:	f8c8 3000 	str.w	r3, [r8]
 800776e:	f04f 30ff 	mov.w	r0, #4294967295
 8007772:	e0c8      	b.n	8007906 <_svfiprintf_r+0x1c2>
 8007774:	2340      	movs	r3, #64	; 0x40
 8007776:	6163      	str	r3, [r4, #20]
 8007778:	2300      	movs	r3, #0
 800777a:	9309      	str	r3, [sp, #36]	; 0x24
 800777c:	2320      	movs	r3, #32
 800777e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007782:	2330      	movs	r3, #48	; 0x30
 8007784:	f04f 0b01 	mov.w	fp, #1
 8007788:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800778c:	9503      	str	r5, [sp, #12]
 800778e:	4637      	mov	r7, r6
 8007790:	463d      	mov	r5, r7
 8007792:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007796:	b10b      	cbz	r3, 800779c <_svfiprintf_r+0x58>
 8007798:	2b25      	cmp	r3, #37	; 0x25
 800779a:	d13e      	bne.n	800781a <_svfiprintf_r+0xd6>
 800779c:	ebb7 0a06 	subs.w	sl, r7, r6
 80077a0:	d00b      	beq.n	80077ba <_svfiprintf_r+0x76>
 80077a2:	4653      	mov	r3, sl
 80077a4:	4632      	mov	r2, r6
 80077a6:	4621      	mov	r1, r4
 80077a8:	4640      	mov	r0, r8
 80077aa:	f7ff ff71 	bl	8007690 <__ssputs_r>
 80077ae:	3001      	adds	r0, #1
 80077b0:	f000 80a4 	beq.w	80078fc <_svfiprintf_r+0x1b8>
 80077b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077b6:	4453      	add	r3, sl
 80077b8:	9309      	str	r3, [sp, #36]	; 0x24
 80077ba:	783b      	ldrb	r3, [r7, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f000 809d 	beq.w	80078fc <_svfiprintf_r+0x1b8>
 80077c2:	2300      	movs	r3, #0
 80077c4:	f04f 32ff 	mov.w	r2, #4294967295
 80077c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077cc:	9304      	str	r3, [sp, #16]
 80077ce:	9307      	str	r3, [sp, #28]
 80077d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077d4:	931a      	str	r3, [sp, #104]	; 0x68
 80077d6:	462f      	mov	r7, r5
 80077d8:	2205      	movs	r2, #5
 80077da:	f817 1b01 	ldrb.w	r1, [r7], #1
 80077de:	4850      	ldr	r0, [pc, #320]	; (8007920 <_svfiprintf_r+0x1dc>)
 80077e0:	f7ff fa90 	bl	8006d04 <memchr>
 80077e4:	9b04      	ldr	r3, [sp, #16]
 80077e6:	b9d0      	cbnz	r0, 800781e <_svfiprintf_r+0xda>
 80077e8:	06d9      	lsls	r1, r3, #27
 80077ea:	bf44      	itt	mi
 80077ec:	2220      	movmi	r2, #32
 80077ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80077f2:	071a      	lsls	r2, r3, #28
 80077f4:	bf44      	itt	mi
 80077f6:	222b      	movmi	r2, #43	; 0x2b
 80077f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80077fc:	782a      	ldrb	r2, [r5, #0]
 80077fe:	2a2a      	cmp	r2, #42	; 0x2a
 8007800:	d015      	beq.n	800782e <_svfiprintf_r+0xea>
 8007802:	462f      	mov	r7, r5
 8007804:	2000      	movs	r0, #0
 8007806:	250a      	movs	r5, #10
 8007808:	9a07      	ldr	r2, [sp, #28]
 800780a:	4639      	mov	r1, r7
 800780c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007810:	3b30      	subs	r3, #48	; 0x30
 8007812:	2b09      	cmp	r3, #9
 8007814:	d94d      	bls.n	80078b2 <_svfiprintf_r+0x16e>
 8007816:	b1b8      	cbz	r0, 8007848 <_svfiprintf_r+0x104>
 8007818:	e00f      	b.n	800783a <_svfiprintf_r+0xf6>
 800781a:	462f      	mov	r7, r5
 800781c:	e7b8      	b.n	8007790 <_svfiprintf_r+0x4c>
 800781e:	4a40      	ldr	r2, [pc, #256]	; (8007920 <_svfiprintf_r+0x1dc>)
 8007820:	463d      	mov	r5, r7
 8007822:	1a80      	subs	r0, r0, r2
 8007824:	fa0b f000 	lsl.w	r0, fp, r0
 8007828:	4318      	orrs	r0, r3
 800782a:	9004      	str	r0, [sp, #16]
 800782c:	e7d3      	b.n	80077d6 <_svfiprintf_r+0x92>
 800782e:	9a03      	ldr	r2, [sp, #12]
 8007830:	1d11      	adds	r1, r2, #4
 8007832:	6812      	ldr	r2, [r2, #0]
 8007834:	9103      	str	r1, [sp, #12]
 8007836:	2a00      	cmp	r2, #0
 8007838:	db01      	blt.n	800783e <_svfiprintf_r+0xfa>
 800783a:	9207      	str	r2, [sp, #28]
 800783c:	e004      	b.n	8007848 <_svfiprintf_r+0x104>
 800783e:	4252      	negs	r2, r2
 8007840:	f043 0302 	orr.w	r3, r3, #2
 8007844:	9207      	str	r2, [sp, #28]
 8007846:	9304      	str	r3, [sp, #16]
 8007848:	783b      	ldrb	r3, [r7, #0]
 800784a:	2b2e      	cmp	r3, #46	; 0x2e
 800784c:	d10c      	bne.n	8007868 <_svfiprintf_r+0x124>
 800784e:	787b      	ldrb	r3, [r7, #1]
 8007850:	2b2a      	cmp	r3, #42	; 0x2a
 8007852:	d133      	bne.n	80078bc <_svfiprintf_r+0x178>
 8007854:	9b03      	ldr	r3, [sp, #12]
 8007856:	3702      	adds	r7, #2
 8007858:	1d1a      	adds	r2, r3, #4
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	9203      	str	r2, [sp, #12]
 800785e:	2b00      	cmp	r3, #0
 8007860:	bfb8      	it	lt
 8007862:	f04f 33ff 	movlt.w	r3, #4294967295
 8007866:	9305      	str	r3, [sp, #20]
 8007868:	4d2e      	ldr	r5, [pc, #184]	; (8007924 <_svfiprintf_r+0x1e0>)
 800786a:	2203      	movs	r2, #3
 800786c:	7839      	ldrb	r1, [r7, #0]
 800786e:	4628      	mov	r0, r5
 8007870:	f7ff fa48 	bl	8006d04 <memchr>
 8007874:	b138      	cbz	r0, 8007886 <_svfiprintf_r+0x142>
 8007876:	2340      	movs	r3, #64	; 0x40
 8007878:	1b40      	subs	r0, r0, r5
 800787a:	fa03 f000 	lsl.w	r0, r3, r0
 800787e:	9b04      	ldr	r3, [sp, #16]
 8007880:	3701      	adds	r7, #1
 8007882:	4303      	orrs	r3, r0
 8007884:	9304      	str	r3, [sp, #16]
 8007886:	7839      	ldrb	r1, [r7, #0]
 8007888:	2206      	movs	r2, #6
 800788a:	4827      	ldr	r0, [pc, #156]	; (8007928 <_svfiprintf_r+0x1e4>)
 800788c:	1c7e      	adds	r6, r7, #1
 800788e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007892:	f7ff fa37 	bl	8006d04 <memchr>
 8007896:	2800      	cmp	r0, #0
 8007898:	d038      	beq.n	800790c <_svfiprintf_r+0x1c8>
 800789a:	4b24      	ldr	r3, [pc, #144]	; (800792c <_svfiprintf_r+0x1e8>)
 800789c:	bb13      	cbnz	r3, 80078e4 <_svfiprintf_r+0x1a0>
 800789e:	9b03      	ldr	r3, [sp, #12]
 80078a0:	3307      	adds	r3, #7
 80078a2:	f023 0307 	bic.w	r3, r3, #7
 80078a6:	3308      	adds	r3, #8
 80078a8:	9303      	str	r3, [sp, #12]
 80078aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ac:	444b      	add	r3, r9
 80078ae:	9309      	str	r3, [sp, #36]	; 0x24
 80078b0:	e76d      	b.n	800778e <_svfiprintf_r+0x4a>
 80078b2:	fb05 3202 	mla	r2, r5, r2, r3
 80078b6:	2001      	movs	r0, #1
 80078b8:	460f      	mov	r7, r1
 80078ba:	e7a6      	b.n	800780a <_svfiprintf_r+0xc6>
 80078bc:	2300      	movs	r3, #0
 80078be:	250a      	movs	r5, #10
 80078c0:	4619      	mov	r1, r3
 80078c2:	3701      	adds	r7, #1
 80078c4:	9305      	str	r3, [sp, #20]
 80078c6:	4638      	mov	r0, r7
 80078c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078cc:	3a30      	subs	r2, #48	; 0x30
 80078ce:	2a09      	cmp	r2, #9
 80078d0:	d903      	bls.n	80078da <_svfiprintf_r+0x196>
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d0c8      	beq.n	8007868 <_svfiprintf_r+0x124>
 80078d6:	9105      	str	r1, [sp, #20]
 80078d8:	e7c6      	b.n	8007868 <_svfiprintf_r+0x124>
 80078da:	fb05 2101 	mla	r1, r5, r1, r2
 80078de:	2301      	movs	r3, #1
 80078e0:	4607      	mov	r7, r0
 80078e2:	e7f0      	b.n	80078c6 <_svfiprintf_r+0x182>
 80078e4:	ab03      	add	r3, sp, #12
 80078e6:	9300      	str	r3, [sp, #0]
 80078e8:	4622      	mov	r2, r4
 80078ea:	4b11      	ldr	r3, [pc, #68]	; (8007930 <_svfiprintf_r+0x1ec>)
 80078ec:	a904      	add	r1, sp, #16
 80078ee:	4640      	mov	r0, r8
 80078f0:	f7fc fbee 	bl	80040d0 <_printf_float>
 80078f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80078f8:	4681      	mov	r9, r0
 80078fa:	d1d6      	bne.n	80078aa <_svfiprintf_r+0x166>
 80078fc:	89a3      	ldrh	r3, [r4, #12]
 80078fe:	065b      	lsls	r3, r3, #25
 8007900:	f53f af35 	bmi.w	800776e <_svfiprintf_r+0x2a>
 8007904:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007906:	b01d      	add	sp, #116	; 0x74
 8007908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800790c:	ab03      	add	r3, sp, #12
 800790e:	9300      	str	r3, [sp, #0]
 8007910:	4622      	mov	r2, r4
 8007912:	4b07      	ldr	r3, [pc, #28]	; (8007930 <_svfiprintf_r+0x1ec>)
 8007914:	a904      	add	r1, sp, #16
 8007916:	4640      	mov	r0, r8
 8007918:	f7fc fe86 	bl	8004628 <_printf_i>
 800791c:	e7ea      	b.n	80078f4 <_svfiprintf_r+0x1b0>
 800791e:	bf00      	nop
 8007920:	08007c0c 	.word	0x08007c0c
 8007924:	08007c12 	.word	0x08007c12
 8007928:	08007c16 	.word	0x08007c16
 800792c:	080040d1 	.word	0x080040d1
 8007930:	08007691 	.word	0x08007691

08007934 <_sbrk_r>:
 8007934:	b538      	push	{r3, r4, r5, lr}
 8007936:	2300      	movs	r3, #0
 8007938:	4c05      	ldr	r4, [pc, #20]	; (8007950 <_sbrk_r+0x1c>)
 800793a:	4605      	mov	r5, r0
 800793c:	4608      	mov	r0, r1
 800793e:	6023      	str	r3, [r4, #0]
 8007940:	f7f9 ffec 	bl	800191c <_sbrk>
 8007944:	1c43      	adds	r3, r0, #1
 8007946:	d102      	bne.n	800794e <_sbrk_r+0x1a>
 8007948:	6823      	ldr	r3, [r4, #0]
 800794a:	b103      	cbz	r3, 800794e <_sbrk_r+0x1a>
 800794c:	602b      	str	r3, [r5, #0]
 800794e:	bd38      	pop	{r3, r4, r5, pc}
 8007950:	2000032c 	.word	0x2000032c

08007954 <strncmp>:
 8007954:	b510      	push	{r4, lr}
 8007956:	b16a      	cbz	r2, 8007974 <strncmp+0x20>
 8007958:	3901      	subs	r1, #1
 800795a:	1884      	adds	r4, r0, r2
 800795c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007960:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007964:	4293      	cmp	r3, r2
 8007966:	d103      	bne.n	8007970 <strncmp+0x1c>
 8007968:	42a0      	cmp	r0, r4
 800796a:	d001      	beq.n	8007970 <strncmp+0x1c>
 800796c:	2b00      	cmp	r3, #0
 800796e:	d1f5      	bne.n	800795c <strncmp+0x8>
 8007970:	1a98      	subs	r0, r3, r2
 8007972:	bd10      	pop	{r4, pc}
 8007974:	4610      	mov	r0, r2
 8007976:	e7fc      	b.n	8007972 <strncmp+0x1e>

08007978 <__ascii_wctomb>:
 8007978:	b149      	cbz	r1, 800798e <__ascii_wctomb+0x16>
 800797a:	2aff      	cmp	r2, #255	; 0xff
 800797c:	bf8b      	itete	hi
 800797e:	238a      	movhi	r3, #138	; 0x8a
 8007980:	700a      	strbls	r2, [r1, #0]
 8007982:	6003      	strhi	r3, [r0, #0]
 8007984:	2001      	movls	r0, #1
 8007986:	bf88      	it	hi
 8007988:	f04f 30ff 	movhi.w	r0, #4294967295
 800798c:	4770      	bx	lr
 800798e:	4608      	mov	r0, r1
 8007990:	4770      	bx	lr

08007992 <memmove>:
 8007992:	4288      	cmp	r0, r1
 8007994:	b510      	push	{r4, lr}
 8007996:	eb01 0302 	add.w	r3, r1, r2
 800799a:	d807      	bhi.n	80079ac <memmove+0x1a>
 800799c:	1e42      	subs	r2, r0, #1
 800799e:	4299      	cmp	r1, r3
 80079a0:	d00a      	beq.n	80079b8 <memmove+0x26>
 80079a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079a6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80079aa:	e7f8      	b.n	800799e <memmove+0xc>
 80079ac:	4283      	cmp	r3, r0
 80079ae:	d9f5      	bls.n	800799c <memmove+0xa>
 80079b0:	1881      	adds	r1, r0, r2
 80079b2:	1ad2      	subs	r2, r2, r3
 80079b4:	42d3      	cmn	r3, r2
 80079b6:	d100      	bne.n	80079ba <memmove+0x28>
 80079b8:	bd10      	pop	{r4, pc}
 80079ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079be:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80079c2:	e7f7      	b.n	80079b4 <memmove+0x22>

080079c4 <__malloc_lock>:
 80079c4:	4770      	bx	lr

080079c6 <__malloc_unlock>:
 80079c6:	4770      	bx	lr

080079c8 <_realloc_r>:
 80079c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ca:	4607      	mov	r7, r0
 80079cc:	4614      	mov	r4, r2
 80079ce:	460e      	mov	r6, r1
 80079d0:	b921      	cbnz	r1, 80079dc <_realloc_r+0x14>
 80079d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80079d6:	4611      	mov	r1, r2
 80079d8:	f7ff be00 	b.w	80075dc <_malloc_r>
 80079dc:	b922      	cbnz	r2, 80079e8 <_realloc_r+0x20>
 80079de:	f7ff fdb1 	bl	8007544 <_free_r>
 80079e2:	4625      	mov	r5, r4
 80079e4:	4628      	mov	r0, r5
 80079e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079e8:	f000 f814 	bl	8007a14 <_malloc_usable_size_r>
 80079ec:	42a0      	cmp	r0, r4
 80079ee:	d20f      	bcs.n	8007a10 <_realloc_r+0x48>
 80079f0:	4621      	mov	r1, r4
 80079f2:	4638      	mov	r0, r7
 80079f4:	f7ff fdf2 	bl	80075dc <_malloc_r>
 80079f8:	4605      	mov	r5, r0
 80079fa:	2800      	cmp	r0, #0
 80079fc:	d0f2      	beq.n	80079e4 <_realloc_r+0x1c>
 80079fe:	4631      	mov	r1, r6
 8007a00:	4622      	mov	r2, r4
 8007a02:	f7ff f98d 	bl	8006d20 <memcpy>
 8007a06:	4631      	mov	r1, r6
 8007a08:	4638      	mov	r0, r7
 8007a0a:	f7ff fd9b 	bl	8007544 <_free_r>
 8007a0e:	e7e9      	b.n	80079e4 <_realloc_r+0x1c>
 8007a10:	4635      	mov	r5, r6
 8007a12:	e7e7      	b.n	80079e4 <_realloc_r+0x1c>

08007a14 <_malloc_usable_size_r>:
 8007a14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a18:	1f18      	subs	r0, r3, #4
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	bfbc      	itt	lt
 8007a1e:	580b      	ldrlt	r3, [r1, r0]
 8007a20:	18c0      	addlt	r0, r0, r3
 8007a22:	4770      	bx	lr

08007a24 <_init>:
 8007a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a26:	bf00      	nop
 8007a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a2a:	bc08      	pop	{r3}
 8007a2c:	469e      	mov	lr, r3
 8007a2e:	4770      	bx	lr

08007a30 <_fini>:
 8007a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a32:	bf00      	nop
 8007a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a36:	bc08      	pop	{r3}
 8007a38:	469e      	mov	lr, r3
 8007a3a:	4770      	bx	lr
